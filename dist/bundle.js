(()=>{var t={1566:(t,e,i)=>{"use strict";i.d(e,{Z:()=>r});var n=i(4015),o=i.n(n),a=i(3645),s=i.n(a)()(o());s.push([t.id,'html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}table{border-collapse:collapse;border-spacing:0}#game-container{position:fixed;top:0;left:0;padding:0;margin:0;width:100%;height:100%;display:flex;align-content:center;align-items:center;justify-content:center;overflow-y:hidden;flex-direction:column;font-family:sans-serif;-webkit-user-select:none;-moz-user-select:none}#game-container #game-description{width:100%;text-align:center;margin-bottom:20px;max-width:300px;color:#fff;-webkit-user-select:none;-moz-user-select:none}#game-container #game-description h1{font-size:2em;font-weight:bold;line-height:2em;-webkit-user-select:none;-moz-user-select:none}#game-container #game-description p{line-height:1.4em;font-size:1em;-webkit-user-select:none;-moz-user-select:none}#game-container #start-game{padding:10px 20px;background:#eee;border:1px solid #333;font-size:1em;-webkit-user-select:none;-moz-user-select:none}#game-container canvas{-webkit-tap-highlight-color:rgba(0,0,0,0);user-select:none;touch-action:none;-webkit-user-select:none;-moz-user-select:none;margin:0;padding:0}body{overflow-y:hidden;background:#336b22;-webkit-user-select:none;-moz-user-select:none}',"",{version:3,sources:["webpack://./src/assets/reset.scss","webpack://./src/assets/style.scss"],names:[],mappings:"AAKA,2ZAaC,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,uBAAA,CAGD,8EAEC,aAAA,CAED,KACC,aAAA,CAED,MACC,eAAA,CAED,aACC,WAAA,CAED,oDAEC,UAAA,CACA,YAAA,CAED,MACC,wBAAA,CACA,gBAAA,CC5CD,gBACI,cAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,oBAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CACA,qBAAA,CACA,sBAAA,CACA,wBAAA,CACA,qBAAA,CAEA,kCACE,UAAA,CACA,iBAAA,CACA,kBAAA,CACA,eAAA,CACA,UAAA,CACA,wBAAA,CACA,qBAAA,CAEA,qCACE,aAAA,CACA,gBAAA,CACA,eAAA,CACA,wBAAA,CACA,qBAAA,CAGF,oCACE,iBAAA,CACA,aAAA,CACA,wBAAA,CACA,qBAAA,CAKJ,4BACE,iBAAA,CACA,eAAA,CACA,qBAAA,CACA,aAAA,CACA,wBAAA,CACA,qBAAA,CAIF,uBAEE,yCAAA,CACA,gBAAA,CACA,iBAAA,CACA,wBAAA,CACA,qBAAA,CACA,QAAA,CACA,SAAA,CAIN,KACE,iBAAA,CACA,kBAAA,CACA,wBAAA,CACA,qBAAA",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/\r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n","@import 'reset.scss';\r\n\r\n#game-container {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    padding: 0;\r\n    margin: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-content: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow-y: hidden;\r\n    flex-direction: column;\r\n    font-family: sans-serif;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n\r\n    #game-description {\r\n      width: 100%;\r\n      text-align: center;\r\n      margin-bottom: 20px;\r\n      max-width: 300px;\r\n      color: white;\r\n      -webkit-user-select: none;\r\n      -moz-user-select: none;\r\n\r\n      h1 {\r\n        font-size: 2em;\r\n        font-weight: bold;\r\n        line-height: 2em;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n\r\n      }\r\n      p {\r\n        line-height: 1.4em;\r\n        font-size: 1em;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n\r\n      }\r\n    }\r\n\r\n    #start-game {\r\n      padding: 10px 20px;\r\n      background: #eee;\r\n      border: 1px solid #333;\r\n      font-size: 1em;\r\n      -webkit-user-select: none;\r\n      -moz-user-select: none;\r\n\r\n    }\r\n\r\n    canvas {\r\n      // border: 1px solid;\r\n      -webkit-tap-highlight-color: rgba(0,0,0,0);\r\n      user-select: none;\r\n      touch-action: none;\r\n      -webkit-user-select: none;\r\n      -moz-user-select: none;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n}\r\n\r\nbody {\r\n  overflow-y: hidden;\r\n  background: #336b22;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n}\r\n"],sourceRoot:""}]);const r=s},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var r=0;r<t.length;r++){var h=[].concat(t[r]);n&&o[h[0]]||(i&&(h[2]?h[2]="".concat(i," and ").concat(h[2]):h[2]=i),e.push(h))}},e}},4015:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}t.exports=function(t){var i,n,o=(n=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){var i=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=i){var n,o,a=[],s=!0,r=!1;try{for(i=i.call(t);!(s=(n=i.next()).done)&&(a.push(n.value),!e||a.length!==e);s=!0);}catch(t){r=!0,o=t}finally{try{s||null==i.return||i.return()}finally{if(r)throw o}}return a}}(i,n)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],s=o[3];if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),h="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(h," */"),c=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[a].concat(c).concat([l]).join("\n")}return[a].join("\n")}},4485:(t,e,i)=>{t.exports=i(2894)},2894:function(t,e,i){t=i.nmd(t),function(){var e,i,n,o,a,s,r,h,l,c,u,p,f,d,y;n=Math.floor,c=Math.min,i=function(t,e){return t<e?-1:t>e?1:0},l=function(t,e,o,a,s){var r;if(null==o&&(o=0),null==s&&(s=i),o<0)throw new Error("lo must be non-negative");for(null==a&&(a=t.length);o<a;)s(e,t[r=n((o+a)/2)])<0?a=r:o=r+1;return[].splice.apply(t,[o,o-o].concat(e)),e},s=function(t,e,n){return null==n&&(n=i),t.push(e),d(t,0,t.length-1,n)},a=function(t,e){var n,o;return null==e&&(e=i),n=t.pop(),t.length?(o=t[0],t[0]=n,y(t,0,e)):o=n,o},h=function(t,e,n){var o;return null==n&&(n=i),o=t[0],t[0]=e,y(t,0,n),o},r=function(t,e,n){var o;return null==n&&(n=i),t.length&&n(t[0],e)<0&&(e=(o=[t[0],e])[0],t[0]=o[1],y(t,0,n)),e},o=function(t,e){var o,a,s,r,h,l;for(null==e&&(e=i),h=[],a=0,s=(r=function(){l=[];for(var e=0,i=n(t.length/2);0<=i?e<i:e>i;0<=i?e++:e--)l.push(e);return l}.apply(this).reverse()).length;a<s;a++)o=r[a],h.push(y(t,o,e));return h},f=function(t,e,n){var o;if(null==n&&(n=i),-1!==(o=t.indexOf(e)))return d(t,0,o,n),y(t,o,n)},u=function(t,e,n){var a,s,h,l,c;if(null==n&&(n=i),!(s=t.slice(0,e)).length)return s;for(o(s,n),h=0,l=(c=t.slice(e)).length;h<l;h++)a=c[h],r(s,a,n);return s.sort(n).reverse()},p=function(t,e,n){var s,r,h,u,p,f,d,y,g;if(null==n&&(n=i),10*e<=t.length){if(!(h=t.slice(0,e).sort(n)).length)return h;for(r=h[h.length-1],u=0,f=(d=t.slice(e)).length;u<f;u++)n(s=d[u],r)<0&&(l(h,s,0,null,n),h.pop(),r=h[h.length-1]);return h}for(o(t,n),g=[],p=0,y=c(e,t.length);0<=y?p<y:p>y;0<=y?++p:--p)g.push(a(t,n));return g},d=function(t,e,n,o){var a,s,r;for(null==o&&(o=i),a=t[n];n>e&&o(a,s=t[r=n-1>>1])<0;)t[n]=s,n=r;return t[n]=a},y=function(t,e,n){var o,a,s,r,h;for(null==n&&(n=i),a=t.length,h=e,s=t[e],o=2*e+1;o<a;)(r=o+1)<a&&!(n(t[o],t[r])<0)&&(o=r),t[e]=t[o],o=2*(e=o)+1;return t[e]=s,d(t,h,e,n)},e=function(){function t(t){this.cmp=null!=t?t:i,this.nodes=[]}return t.push=s,t.pop=a,t.replace=h,t.pushpop=r,t.heapify=o,t.updateItem=f,t.nlargest=u,t.nsmallest=p,t.prototype.push=function(t){return s(this.nodes,t,this.cmp)},t.prototype.pop=function(){return a(this.nodes,this.cmp)},t.prototype.peek=function(){return this.nodes[0]},t.prototype.contains=function(t){return-1!==this.nodes.indexOf(t)},t.prototype.replace=function(t){return h(this.nodes,t,this.cmp)},t.prototype.pushpop=function(t){return r(this.nodes,t,this.cmp)},t.prototype.heapify=function(){return o(this.nodes,this.cmp)},t.prototype.updateItem=function(t){return f(this.nodes,t,this.cmp)},t.prototype.clear=function(){return this.nodes=[]},t.prototype.empty=function(){return 0===this.nodes.length},t.prototype.size=function(){return this.nodes.length},t.prototype.clone=function(){var e;return(e=new t).nodes=this.nodes.slice(0),e},t.prototype.toArray=function(){return this.nodes.slice(0)},t.prototype.insert=t.prototype.push,t.prototype.top=t.prototype.peek,t.prototype.front=t.prototype.peek,t.prototype.has=t.prototype.contains,t.prototype.copy=t.prototype.clone,t}(),(null!==t?t.exports:void 0)?t.exports=e:window.Heap=e}.call(this)},9657:(t,e,i)=>{t.exports=i(9558)},9558:(t,e,i)=>{t.exports={Heap:i(4485),Node:i(1289),Grid:i(8809),Util:i(8408),DiagonalMovement:i(3506),Heuristic:i(9430),AStarFinder:i(2131),BestFirstFinder:i(3644),BreadthFirstFinder:i(7904),DijkstraFinder:i(3607),BiAStarFinder:i(713),BiBestFirstFinder:i(6325),BiBreadthFirstFinder:i(2513),BiDijkstraFinder:i(6511),IDAStarFinder:i(944),JumpPointFinder:i(8717)}},3506:t=>{t.exports={Always:1,Never:2,IfAtMostOneObstacle:3,OnlyWhenNoObstacles:4}},8809:(t,e,i)=>{var n=i(1289),o=i(3506);function a(t,e,i){var n;"object"!=typeof t?n=t:(e=t.length,n=t[0].length,i=t),this.width=n,this.height=e,this.nodes=this._buildNodes(n,e,i)}a.prototype._buildNodes=function(t,e,i){var o,a,s=new Array(e);for(o=0;o<e;++o)for(s[o]=new Array(t),a=0;a<t;++a)s[o][a]=new n(a,o);if(void 0===i)return s;if(i.length!==e||i[0].length!==t)throw new Error("Matrix size does not fit");for(o=0;o<e;++o)for(a=0;a<t;++a)i[o][a]&&(s[o][a].walkable=!1);return s},a.prototype.getNodeAt=function(t,e){return this.nodes[e][t]},a.prototype.isWalkableAt=function(t,e){return this.isInside(t,e)&&this.nodes[e][t].walkable},a.prototype.isInside=function(t,e){return t>=0&&t<this.width&&e>=0&&e<this.height},a.prototype.setWalkableAt=function(t,e,i){this.nodes[e][t].walkable=i},a.prototype.getNeighbors=function(t,e){var i=t.x,n=t.y,a=[],s=!1,r=!1,h=!1,l=!1,c=!1,u=!1,p=!1,f=!1,d=this.nodes;if(this.isWalkableAt(i,n-1)&&(a.push(d[n-1][i]),s=!0),this.isWalkableAt(i+1,n)&&(a.push(d[n][i+1]),h=!0),this.isWalkableAt(i,n+1)&&(a.push(d[n+1][i]),c=!0),this.isWalkableAt(i-1,n)&&(a.push(d[n][i-1]),p=!0),e===o.Never)return a;if(e===o.OnlyWhenNoObstacles)r=p&&s,l=s&&h,u=h&&c,f=c&&p;else if(e===o.IfAtMostOneObstacle)r=p||s,l=s||h,u=h||c,f=c||p;else{if(e!==o.Always)throw new Error("Incorrect value of diagonalMovement");r=!0,l=!0,u=!0,f=!0}return r&&this.isWalkableAt(i-1,n-1)&&a.push(d[n-1][i-1]),l&&this.isWalkableAt(i+1,n-1)&&a.push(d[n-1][i+1]),u&&this.isWalkableAt(i+1,n+1)&&a.push(d[n+1][i+1]),f&&this.isWalkableAt(i-1,n+1)&&a.push(d[n+1][i-1]),a},a.prototype.clone=function(){var t,e,i=this.width,o=this.height,s=this.nodes,r=new a(i,o),h=new Array(o);for(t=0;t<o;++t)for(h[t]=new Array(i),e=0;e<i;++e)h[t][e]=new n(e,t,s[t][e].walkable);return r.nodes=h,r},t.exports=a},9430:t=>{t.exports={manhattan:function(t,e){return t+e},euclidean:function(t,e){return Math.sqrt(t*t+e*e)},octile:function(t,e){var i=Math.SQRT2-1;return t<e?i*t+e:i*e+t},chebyshev:function(t,e){return Math.max(t,e)}}},1289:t=>{t.exports=function(t,e,i){this.x=t,this.y=e,this.walkable=void 0===i||i}},8408:(t,e)=>{function i(t){for(var e=[[t.x,t.y]];t.parent;)t=t.parent,e.push([t.x,t.y]);return e.reverse()}function n(t,e,i,n){var o,a,s,r,h,l,c=Math.abs,u=[];for(o=t<i?1:-1,a=e<n?1:-1,h=(s=c(i-t))-(r=c(n-e));u.push([t,e]),t!==i||e!==n;)(l=2*h)>-r&&(h-=r,t+=o),l<s&&(h+=s,e+=a);return u}e.backtrace=i,e.biBacktrace=function(t,e){var n=i(t),o=i(e);return n.concat(o.reverse())},e.pathLength=function(t){var e,i,n,o,a,s=0;for(e=1;e<t.length;++e)i=t[e-1],n=t[e],o=i[0]-n[0],a=i[1]-n[1],s+=Math.sqrt(o*o+a*a);return s},e.interpolate=n,e.expandPath=function(t){var e,i,o,a,s,r,h=[],l=t.length;if(l<2)return h;for(s=0;s<l-1;++s)for(e=t[s],i=t[s+1],a=(o=n(e[0],e[1],i[0],i[1])).length,r=0;r<a-1;++r)h.push(o[r]);return h.push(t[l-1]),h},e.smoothenPath=function(t,e){var i,o,a,s,r,h,l,c,u,p=e.length,f=e[0][0],d=e[0][1],y=e[p-1][0],g=e[p-1][1];for(a=[[i=f,o=d]],s=2;s<p;++s){for(l=n(i,o,(h=e[s])[0],h[1]),u=!1,r=1;r<l.length;++r)if(c=l[r],!t.isWalkableAt(c[0],c[1])){u=!0;break}u&&(lastValidCoord=e[s-1],a.push(lastValidCoord),i=lastValidCoord[0],o=lastValidCoord[1])}return a.push([y,g]),a},e.compressPath=function(t){if(t.length<3)return t;var e,i,n,o,a,s,r=[],h=t[0][0],l=t[0][1],c=t[1][0],u=t[1][1],p=c-h,f=u-l;for(p/=a=Math.sqrt(p*p+f*f),f/=a,r.push([h,l]),s=2;s<t.length;s++)e=c,i=u,n=p,o=f,p=(c=t[s][0])-e,f=(u=t[s][1])-i,f/=a=Math.sqrt(p*p+f*f),(p/=a)===n&&f===o||r.push([e,i]);return r.push([c,u]),r}},2131:(t,e,i)=>{var n=i(4485),o=i(8408),a=i(9430),s=i(3506);function r(t){t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.heuristic=t.heuristic||a.manhattan,this.weight=t.weight||1,this.diagonalMovement=t.diagonalMovement,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=s.OnlyWhenNoObstacles:this.diagonalMovement=s.IfAtMostOneObstacle:this.diagonalMovement=s.Never),this.diagonalMovement===s.Never?this.heuristic=t.heuristic||a.manhattan:this.heuristic=t.heuristic||a.octile}r.prototype.findPath=function(t,e,i,a,s){var r,h,l,c,u,p,f,d,y=new n((function(t,e){return t.f-e.f})),g=s.getNodeAt(t,e),m=s.getNodeAt(i,a),b=this.heuristic,x=this.diagonalMovement,v=this.weight,w=Math.abs,A=Math.SQRT2;for(g.g=0,g.f=0,y.push(g),g.opened=!0;!y.empty();){if((r=y.pop()).closed=!0,r===m)return o.backtrace(m);for(c=0,u=(h=s.getNeighbors(r,x)).length;c<u;++c)(l=h[c]).closed||(p=l.x,f=l.y,d=r.g+(p-r.x==0||f-r.y==0?1:A),(!l.opened||d<l.g)&&(l.g=d,l.h=l.h||v*b(w(p-i),w(f-a)),l.f=l.g+l.h,l.parent=r,l.opened?y.updateItem(l):(y.push(l),l.opened=!0)))}return[]},t.exports=r},3644:(t,e,i)=>{var n=i(2131);function o(t){n.call(this,t);var e=this.heuristic;this.heuristic=function(t,i){return 1e6*e(t,i)}}o.prototype=new n,o.prototype.constructor=o,t.exports=o},713:(t,e,i)=>{var n=i(4485),o=i(8408),a=i(9430),s=i(3506);function r(t){t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.diagonalMovement=t.diagonalMovement,this.heuristic=t.heuristic||a.manhattan,this.weight=t.weight||1,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=s.OnlyWhenNoObstacles:this.diagonalMovement=s.IfAtMostOneObstacle:this.diagonalMovement=s.Never),this.diagonalMovement===s.Never?this.heuristic=t.heuristic||a.manhattan:this.heuristic=t.heuristic||a.octile}r.prototype.findPath=function(t,e,i,a,s){var r,h,l,c,u,p,f,d,y=function(t,e){return t.f-e.f},g=new n(y),m=new n(y),b=s.getNodeAt(t,e),x=s.getNodeAt(i,a),v=this.heuristic,w=this.diagonalMovement,A=this.weight,R=Math.abs,k=Math.SQRT2;for(b.g=0,b.f=0,g.push(b),b.opened=1,x.g=0,x.f=0,m.push(x),x.opened=2;!g.empty()&&!m.empty();){for((r=g.pop()).closed=!0,c=0,u=(h=s.getNeighbors(r,w)).length;c<u;++c)if(!(l=h[c]).closed){if(2===l.opened)return o.biBacktrace(r,l);p=l.x,f=l.y,d=r.g+(p-r.x==0||f-r.y==0?1:k),(!l.opened||d<l.g)&&(l.g=d,l.h=l.h||A*v(R(p-i),R(f-a)),l.f=l.g+l.h,l.parent=r,l.opened?g.updateItem(l):(g.push(l),l.opened=1))}for((r=m.pop()).closed=!0,c=0,u=(h=s.getNeighbors(r,w)).length;c<u;++c)if(!(l=h[c]).closed){if(1===l.opened)return o.biBacktrace(l,r);p=l.x,f=l.y,d=r.g+(p-r.x==0||f-r.y==0?1:k),(!l.opened||d<l.g)&&(l.g=d,l.h=l.h||A*v(R(p-t),R(f-e)),l.f=l.g+l.h,l.parent=r,l.opened?m.updateItem(l):(m.push(l),l.opened=2))}}return[]},t.exports=r},6325:(t,e,i)=>{var n=i(713);function o(t){n.call(this,t);var e=this.heuristic;this.heuristic=function(t,i){return 1e6*e(t,i)}}o.prototype=new n,o.prototype.constructor=o,t.exports=o},2513:(t,e,i)=>{var n=i(8408),o=i(3506);function a(t){t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.diagonalMovement=t.diagonalMovement,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=o.OnlyWhenNoObstacles:this.diagonalMovement=o.IfAtMostOneObstacle:this.diagonalMovement=o.Never)}a.prototype.findPath=function(t,e,i,o,a){var s,r,h,l,c,u=a.getNodeAt(t,e),p=a.getNodeAt(i,o),f=[],d=[],y=this.diagonalMovement;for(f.push(u),u.opened=!0,u.by=0,d.push(p),p.opened=!0,p.by=1;f.length&&d.length;){for((h=f.shift()).closed=!0,l=0,c=(s=a.getNeighbors(h,y)).length;l<c;++l)if(!(r=s[l]).closed)if(r.opened){if(1===r.by)return n.biBacktrace(h,r)}else f.push(r),r.parent=h,r.opened=!0,r.by=0;for((h=d.shift()).closed=!0,l=0,c=(s=a.getNeighbors(h,y)).length;l<c;++l)if(!(r=s[l]).closed)if(r.opened){if(0===r.by)return n.biBacktrace(r,h)}else d.push(r),r.parent=h,r.opened=!0,r.by=1}return[]},t.exports=a},6511:(t,e,i)=>{var n=i(713);function o(t){n.call(this,t),this.heuristic=function(t,e){return 0}}o.prototype=new n,o.prototype.constructor=o,t.exports=o},7904:(t,e,i)=>{var n=i(8408),o=i(3506);function a(t){t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.diagonalMovement=t.diagonalMovement,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=o.OnlyWhenNoObstacles:this.diagonalMovement=o.IfAtMostOneObstacle:this.diagonalMovement=o.Never)}a.prototype.findPath=function(t,e,i,o,a){var s,r,h,l,c,u=[],p=this.diagonalMovement,f=a.getNodeAt(t,e),d=a.getNodeAt(i,o);for(u.push(f),f.opened=!0;u.length;){if((h=u.shift()).closed=!0,h===d)return n.backtrace(d);for(l=0,c=(s=a.getNeighbors(h,p)).length;l<c;++l)(r=s[l]).closed||r.opened||(u.push(r),r.opened=!0,r.parent=h)}return[]},t.exports=a},3607:(t,e,i)=>{var n=i(2131);function o(t){n.call(this,t),this.heuristic=function(t,e){return 0}}o.prototype=new n,o.prototype.constructor=o,t.exports=o},944:(t,e,i)=>{i(8408);var n=i(9430),o=i(1289),a=i(3506);function s(t){t=t||{},this.allowDiagonal=t.allowDiagonal,this.dontCrossCorners=t.dontCrossCorners,this.diagonalMovement=t.diagonalMovement,this.heuristic=t.heuristic||n.manhattan,this.weight=t.weight||1,this.trackRecursion=t.trackRecursion||!1,this.timeLimit=t.timeLimit||1/0,this.diagonalMovement||(this.allowDiagonal?this.dontCrossCorners?this.diagonalMovement=a.OnlyWhenNoObstacles:this.diagonalMovement=a.IfAtMostOneObstacle:this.diagonalMovement=a.Never),this.diagonalMovement===a.Never?this.heuristic=t.heuristic||n.manhattan:this.heuristic=t.heuristic||n.octile}s.prototype.findPath=function(t,e,i,n,a){var s,r,h,l=(new Date).getTime(),c=function(t,e){return this.heuristic(Math.abs(e.x-t.x),Math.abs(e.y-t.y))}.bind(this),u=function(t,e,i,n,s){if(this.timeLimit>0&&(new Date).getTime()-l>1e3*this.timeLimit)return 1/0;var r,h,p,d,y=e+c(t,f)*this.weight;if(y>i)return y;if(t==f)return n[s]=[t.x,t.y],t;var g,m,b=a.getNeighbors(t,this.diagonalMovement);for(p=0,r=1/0;d=b[p];++p){if(this.trackRecursion&&(d.retainCount=d.retainCount+1||1,!0!==d.tested&&(d.tested=!0)),(h=u(d,e+(m=d,(g=t).x===m.x||g.y===m.y?1:Math.SQRT2),i,n,s+1))instanceof o)return n[s]=[t.x,t.y],h;this.trackRecursion&&0==--d.retainCount&&(d.tested=!1),h<r&&(r=h)}return r}.bind(this),p=a.getNodeAt(t,e),f=a.getNodeAt(i,n),d=c(p,f);for(s=0;;++s){if((h=u(p,0,d,r=[],0))===1/0)return[];if(h instanceof o)return r;d=h}return[]},t.exports=s},4524:(t,e,i)=>{var n=i(1010),o=i(3506);function a(t){n.call(this,t)}a.prototype=new n,a.prototype.constructor=a,a.prototype._jump=function(t,e,i,n){var o=this.grid,a=t-i,s=e-n;if(!o.isWalkableAt(t,e))return null;if(!0===this.trackJumpRecursion&&(o.getNodeAt(t,e).tested=!0),o.getNodeAt(t,e)===this.endNode)return[t,e];if(0!==a&&0!==s){if(o.isWalkableAt(t-a,e+s)&&!o.isWalkableAt(t-a,e)||o.isWalkableAt(t+a,e-s)&&!o.isWalkableAt(t,e-s))return[t,e];if(this._jump(t+a,e,t,e)||this._jump(t,e+s,t,e))return[t,e]}else if(0!==a){if(o.isWalkableAt(t+a,e+1)&&!o.isWalkableAt(t,e+1)||o.isWalkableAt(t+a,e-1)&&!o.isWalkableAt(t,e-1))return[t,e]}else if(o.isWalkableAt(t+1,e+s)&&!o.isWalkableAt(t+1,e)||o.isWalkableAt(t-1,e+s)&&!o.isWalkableAt(t-1,e))return[t,e];return this._jump(t+a,e+s,t,e)},a.prototype._findNeighbors=function(t){var e,i,n,a,s,r,h,l,c=t.parent,u=t.x,p=t.y,f=this.grid,d=[];if(c)e=c.x,i=c.y,n=(u-e)/Math.max(Math.abs(u-e),1),a=(p-i)/Math.max(Math.abs(p-i),1),0!==n&&0!==a?(f.isWalkableAt(u,p+a)&&d.push([u,p+a]),f.isWalkableAt(u+n,p)&&d.push([u+n,p]),f.isWalkableAt(u+n,p+a)&&d.push([u+n,p+a]),f.isWalkableAt(u-n,p)||d.push([u-n,p+a]),f.isWalkableAt(u,p-a)||d.push([u+n,p-a])):0===n?(f.isWalkableAt(u,p+a)&&d.push([u,p+a]),f.isWalkableAt(u+1,p)||d.push([u+1,p+a]),f.isWalkableAt(u-1,p)||d.push([u-1,p+a])):(f.isWalkableAt(u+n,p)&&d.push([u+n,p]),f.isWalkableAt(u,p+1)||d.push([u+n,p+1]),f.isWalkableAt(u,p-1)||d.push([u+n,p-1]));else for(h=0,l=(s=f.getNeighbors(t,o.Always)).length;h<l;++h)r=s[h],d.push([r.x,r.y]);return d},t.exports=a},1405:(t,e,i)=>{var n=i(1010),o=i(3506);function a(t){n.call(this,t)}a.prototype=new n,a.prototype.constructor=a,a.prototype._jump=function(t,e,i,n){var o=this.grid,a=t-i,s=e-n;if(!o.isWalkableAt(t,e))return null;if(!0===this.trackJumpRecursion&&(o.getNodeAt(t,e).tested=!0),o.getNodeAt(t,e)===this.endNode)return[t,e];if(0!==a&&0!==s){if(o.isWalkableAt(t-a,e+s)&&!o.isWalkableAt(t-a,e)||o.isWalkableAt(t+a,e-s)&&!o.isWalkableAt(t,e-s))return[t,e];if(this._jump(t+a,e,t,e)||this._jump(t,e+s,t,e))return[t,e]}else if(0!==a){if(o.isWalkableAt(t+a,e+1)&&!o.isWalkableAt(t,e+1)||o.isWalkableAt(t+a,e-1)&&!o.isWalkableAt(t,e-1))return[t,e]}else if(o.isWalkableAt(t+1,e+s)&&!o.isWalkableAt(t+1,e)||o.isWalkableAt(t-1,e+s)&&!o.isWalkableAt(t-1,e))return[t,e];return o.isWalkableAt(t+a,e)||o.isWalkableAt(t,e+s)?this._jump(t+a,e+s,t,e):null},a.prototype._findNeighbors=function(t){var e,i,n,a,s,r,h,l,c=t.parent,u=t.x,p=t.y,f=this.grid,d=[];if(c)e=c.x,i=c.y,n=(u-e)/Math.max(Math.abs(u-e),1),a=(p-i)/Math.max(Math.abs(p-i),1),0!==n&&0!==a?(f.isWalkableAt(u,p+a)&&d.push([u,p+a]),f.isWalkableAt(u+n,p)&&d.push([u+n,p]),(f.isWalkableAt(u,p+a)||f.isWalkableAt(u+n,p))&&d.push([u+n,p+a]),!f.isWalkableAt(u-n,p)&&f.isWalkableAt(u,p+a)&&d.push([u-n,p+a]),!f.isWalkableAt(u,p-a)&&f.isWalkableAt(u+n,p)&&d.push([u+n,p-a])):0===n?f.isWalkableAt(u,p+a)&&(d.push([u,p+a]),f.isWalkableAt(u+1,p)||d.push([u+1,p+a]),f.isWalkableAt(u-1,p)||d.push([u-1,p+a])):f.isWalkableAt(u+n,p)&&(d.push([u+n,p]),f.isWalkableAt(u,p+1)||d.push([u+n,p+1]),f.isWalkableAt(u,p-1)||d.push([u+n,p-1]));else for(h=0,l=(s=f.getNeighbors(t,o.IfAtMostOneObstacle)).length;h<l;++h)r=s[h],d.push([r.x,r.y]);return d},t.exports=a},5368:(t,e,i)=>{var n=i(1010),o=i(3506);function a(t){n.call(this,t)}a.prototype=new n,a.prototype.constructor=a,a.prototype._jump=function(t,e,i,n){var o=this.grid,a=t-i,s=e-n;if(!o.isWalkableAt(t,e))return null;if(!0===this.trackJumpRecursion&&(o.getNodeAt(t,e).tested=!0),o.getNodeAt(t,e)===this.endNode)return[t,e];if(0!==a&&0!==s){if(this._jump(t+a,e,t,e)||this._jump(t,e+s,t,e))return[t,e]}else if(0!==a){if(o.isWalkableAt(t,e-1)&&!o.isWalkableAt(t-a,e-1)||o.isWalkableAt(t,e+1)&&!o.isWalkableAt(t-a,e+1))return[t,e]}else if(0!==s&&(o.isWalkableAt(t-1,e)&&!o.isWalkableAt(t-1,e-s)||o.isWalkableAt(t+1,e)&&!o.isWalkableAt(t+1,e-s)))return[t,e];return o.isWalkableAt(t+a,e)&&o.isWalkableAt(t,e+s)?this._jump(t+a,e+s,t,e):null},a.prototype._findNeighbors=function(t){var e,i,n,a,s,r,h,l,c,u=t.parent,p=t.x,f=t.y,d=this.grid,y=[];if(u){if(e=u.x,i=u.y,n=(p-e)/Math.max(Math.abs(p-e),1),a=(f-i)/Math.max(Math.abs(f-i),1),0!==n&&0!==a)d.isWalkableAt(p,f+a)&&y.push([p,f+a]),d.isWalkableAt(p+n,f)&&y.push([p+n,f]),d.isWalkableAt(p,f+a)&&d.isWalkableAt(p+n,f)&&y.push([p+n,f+a]);else if(0!==n){c=d.isWalkableAt(p+n,f);var g=d.isWalkableAt(p,f+1),m=d.isWalkableAt(p,f-1);c&&(y.push([p+n,f]),g&&y.push([p+n,f+1]),m&&y.push([p+n,f-1])),g&&y.push([p,f+1]),m&&y.push([p,f-1])}else if(0!==a){c=d.isWalkableAt(p,f+a);var b=d.isWalkableAt(p+1,f),x=d.isWalkableAt(p-1,f);c&&(y.push([p,f+a]),b&&y.push([p+1,f+a]),x&&y.push([p-1,f+a])),b&&y.push([p+1,f]),x&&y.push([p-1,f])}}else for(h=0,l=(s=d.getNeighbors(t,o.OnlyWhenNoObstacles)).length;h<l;++h)r=s[h],y.push([r.x,r.y]);return y},t.exports=a},2403:(t,e,i)=>{var n=i(1010),o=i(3506);function a(t){n.call(this,t)}a.prototype=new n,a.prototype.constructor=a,a.prototype._jump=function(t,e,i,n){var o=this.grid,a=t-i,s=e-n;if(!o.isWalkableAt(t,e))return null;if(!0===this.trackJumpRecursion&&(o.getNodeAt(t,e).tested=!0),o.getNodeAt(t,e)===this.endNode)return[t,e];if(0!==a){if(o.isWalkableAt(t,e-1)&&!o.isWalkableAt(t-a,e-1)||o.isWalkableAt(t,e+1)&&!o.isWalkableAt(t-a,e+1))return[t,e]}else{if(0===s)throw new Error("Only horizontal and vertical movements are allowed");if(o.isWalkableAt(t-1,e)&&!o.isWalkableAt(t-1,e-s)||o.isWalkableAt(t+1,e)&&!o.isWalkableAt(t+1,e-s))return[t,e];if(this._jump(t+1,e,t,e)||this._jump(t-1,e,t,e))return[t,e]}return this._jump(t+a,e+s,t,e)},a.prototype._findNeighbors=function(t){var e,i,n,a,s,r,h,l,c=t.parent,u=t.x,p=t.y,f=this.grid,d=[];if(c)e=c.x,i=c.y,n=(u-e)/Math.max(Math.abs(u-e),1),a=(p-i)/Math.max(Math.abs(p-i),1),0!==n?(f.isWalkableAt(u,p-1)&&d.push([u,p-1]),f.isWalkableAt(u,p+1)&&d.push([u,p+1]),f.isWalkableAt(u+n,p)&&d.push([u+n,p])):0!==a&&(f.isWalkableAt(u-1,p)&&d.push([u-1,p]),f.isWalkableAt(u+1,p)&&d.push([u+1,p]),f.isWalkableAt(u,p+a)&&d.push([u,p+a]));else for(h=0,l=(s=f.getNeighbors(t,o.Never)).length;h<l;++h)r=s[h],d.push([r.x,r.y]);return d},t.exports=a},8717:(t,e,i)=>{var n=i(3506),o=i(2403),a=i(4524),s=i(5368),r=i(1405);t.exports=function(t){return(t=t||{}).diagonalMovement===n.Never?new o(t):t.diagonalMovement===n.Always?new a(t):t.diagonalMovement===n.OnlyWhenNoObstacles?new s(t):new r(t)}},1010:(t,e,i)=>{var n=i(4485),o=i(8408),a=i(9430);function s(t){t=t||{},this.heuristic=t.heuristic||a.manhattan,this.trackJumpRecursion=t.trackJumpRecursion||!1}i(3506),s.prototype.findPath=function(t,e,i,a,s){var r,h=this.openList=new n((function(t,e){return t.f-e.f})),l=this.startNode=s.getNodeAt(t,e),c=this.endNode=s.getNodeAt(i,a);for(this.grid=s,l.g=0,l.f=0,h.push(l),l.opened=!0;!h.empty();){if((r=h.pop()).closed=!0,r===c)return o.expandPath(o.backtrace(c));this._identifySuccessors(r)}return[]},s.prototype._identifySuccessors=function(t){var e,i,n,o,s,r,h,l,c,u,p=this.grid,f=this.heuristic,d=this.openList,y=this.endNode.x,g=this.endNode.y,m=t.x,b=t.y,x=Math.abs;for(Math.max,o=0,s=(e=this._findNeighbors(t)).length;o<s;++o)if(i=e[o],n=this._jump(i[0],i[1],m,b)){if(r=n[0],h=n[1],(u=p.getNodeAt(r,h)).closed)continue;l=a.octile(x(r-m),x(h-b)),c=t.g+l,(!u.opened||c<u.g)&&(u.g=c,u.h=u.h||f(x(r-y),x(h-g)),u.f=u.g+u.h,u.parent=t,u.opened?d.updateItem(u):(d.push(u),u.opened=!0))}},t.exports=s},6994:(t,e,i)=>{"use strict";var n,o=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),a=[];function s(t){for(var e=-1,i=0;i<a.length;i++)if(a[i].identifier===t){e=i;break}return e}function r(t,e){for(var i={},n=[],o=0;o<t.length;o++){var r=t[o],h=e.base?r[0]+e.base:r[0],l=i[h]||0,c="".concat(h," ").concat(l);i[h]=l+1;var u=s(c),p={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(a[u].references++,a[u].updater(p)):a.push({identifier:c,updater:y(p,e),references:1}),n.push(c)}return n}function h(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var a=i.nc;a&&(n.nonce=a)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var l,c=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function u(t,e,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=c(e,o);else{var a=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(a,s[e]):t.appendChild(a)}}function p(t,e,i){var n=i.css,o=i.media,a=i.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var f=null,d=0;function y(t,e){var i,n,o;if(e.singleton){var a=d++;i=f||(f=h(e)),n=u.bind(null,i,a,!1),o=u.bind(null,i,a,!0)}else i=h(e),n=p.bind(null,i,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=r(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var o=s(i[n]);a[o].references--}for(var h=r(t,e),l=0;l<i.length;l++){var c=s(i[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}i=h}}}},766:(t,e,i)=>{"use strict";t.exports=i.p+"8de74ffb1253b1b90712.mp3"},5628:(t,e,i)=>{"use strict";t.exports=i.p+"5dddb5cf02bdc2434893.png"},369:(t,e,i)=>{"use strict";t.exports=i.p+"7cd0f09c367e5ecc4811.mp3"},8960:(t,e,i)=>{"use strict";t.exports=i.p+"aee8520788b3fcfc5246.mp3"},2602:(t,e,i)=>{"use strict";t.exports=i.p+"802fb74115d99fc1ed10.png"},8287:(t,e,i)=>{"use strict";t.exports=i.p+"9e27f1b179594bb8e037.png"},2430:(t,e,i)=>{"use strict";t.exports=i.p+"443c7a5040740415a089.png"},3170:(t,e,i)=>{"use strict";t.exports=i.p+"050e32ee36a5be6bae98.png"},3996:(t,e,i)=>{"use strict";t.exports=i.p+"f2063fa6573fee62f424.png"},7847:(t,e,i)=>{"use strict";t.exports=i.p+"cde1d4735480b7f1a5ba.mp3"},5396:(t,e,i)=>{"use strict";t.exports=i.p+"0bed28be9decc13b46e1.png"},5957:(t,e,i)=>{"use strict";t.exports=i.p+"88c805456d0f594bc000.png"},4151:(t,e,i)=>{"use strict";t.exports=i.p+"b91641f1bd76966d6f9f.png"},3207:(t,e,i)=>{"use strict";t.exports=i.p+"1972e977ac291c0134d4.png"},9718:(t,e,i)=>{"use strict";t.exports=i.p+"39566ae7d10c8cda2136.png"},2039:(t,e,i)=>{"use strict";t.exports=i.p+"6ab0f512719f2d61f9b8.png"},9379:(t,e,i)=>{"use strict";t.exports=i.p+"2fa26e80b49499703a49.png"},1511:(t,e,i)=>{"use strict";t.exports=i.p+"2980dc272d10d863d1fa.png"},9647:(t,e,i)=>{"use strict";t.exports=i.p+"bb51d5bc96c8f5b101a8.png"},5034:(t,e,i)=>{"use strict";t.exports=i.p+"8737bafee88fa2f0f8c2.mp3"},8200:(t,e,i)=>{"use strict";t.exports=i.p+"57fb7714a8a9e2c462ac.png"},4716:(t,e,i)=>{"use strict";t.exports=i.p+"19115d48a26a61a1e116.png"},3579:(t,e,i)=>{"use strict";t.exports=i.p+"a4cc137dd5e1355ba341.mp3"},7650:(t,e,i)=>{"use strict";t.exports=i.p+"656a1d80bad801e235fe.mp3"},9524:(t,e,i)=>{"use strict";t.exports=i.p+"038cf5798a185e314a4f.mp3"},8836:(t,e,i)=>{"use strict";t.exports=i.p+"2e5a36bbaa027d2bb23a.mp3"},4226:(t,e,i)=>{"use strict";t.exports=i.p+"fc86847f635d05172527.mp3"},9549:(t,e,i)=>{"use strict";t.exports=i.p+"b9007db0bca504641439.png"},8385:(t,e,i)=>{"use strict";t.exports=i.p+"2958453feb9090305112.mp3"},2448:(t,e,i)=>{"use strict";t.exports=i.p+"9b6a513edb5c98cf7c77.mp3"},7004:(t,e,i)=>{"use strict";t.exports=i.p+"cfc77b3128565e73e387.mp3"},926:(t,e,i)=>{"use strict";t.exports=i.p+"34dde4996ea8e134dc2a.mp3"},1521:(t,e,i)=>{"use strict";t.exports=i.p+"7d76a468395fc5a1a89a.png"},6044:(t,e,i)=>{"use strict";t.exports=i.p+"c2e796660ee7e23e6441.png"},6576:(t,e,i)=>{"use strict";t.exports=i.p+"424f1e14e4b73c53f80c.png"},4353:(t,e,i)=>{"use strict";t.exports=i.p+"4a5a39cc839ef39373a8.png"},7128:(t,e,i)=>{"use strict";t.exports=i.p+"6b393182e2865f4de069.png"},183:(t,e,i)=>{"use strict";t.exports=i.p+"f4881628463387c731e8.png"},3021:(t,e,i)=>{"use strict";t.exports=i.p+"ab247b3d433db7c50fb2.png"},851:(t,e,i)=>{"use strict";t.exports=i.p+"714cad9e27c87d03e02b.png"},8732:(t,e,i)=>{"use strict";t.exports=i.p+"d5df9de1146b34fa7f06.mp3"},4582:(t,e,i)=>{"use strict";t.exports=i.p+"01ec8a7551b047dda936.mp3"},5010:(t,e,i)=>{"use strict";t.exports=i.p+"c9c566db1a3875112b6e.png"},3817:(t,e,i)=>{"use strict";t.exports=i.p+"a236eea4f4280d9bae7c.png"},6440:(t,e,i)=>{"use strict";t.exports=i.p+"c10e68253cf66bb25b4f.mp3"},2530:(t,e,i)=>{"use strict";t.exports=i.p+"0c2de0a9d1cc1375d038.mp3"},3237:(t,e,i)=>{"use strict";t.exports=i.p+"d246a409e2562d60c4f2.mp3"}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(a.exports,a,a.exports,i),a.loaded=!0,a.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{"use strict";var t=i(6994),e=i.n(t),n=i(1566);e()(n.Z,{insert:"head",singleton:!1}),n.Z.locals;var o=function(){function t(){this.enabled=!0,this.soundCache={};var t=window.AudioContext||window.webkitAudioContext;this.audioContext=new t,this.buffer=this.audioContext.createBuffer(1,1*this.audioContext.sampleRate,this.audioContext.sampleRate),this.channelData=this.buffer.getChannelData(0),this.primaryGainControl=this.audioContext.createGain(),this.primaryGainControl.gain.setValueAtTime(.5,0),this.primaryGainControl.connect(this.audioContext.destination)}return t.prototype.initialize=function(){},t.prototype.playNote=function(t,e,i){if(void 0===t&&(t=150),void 0===e&&(e=.2),void 0===i&&(i=""),this.enabled){var n=this.audioContext.createOscillator();i&&(n.type=i),n.frequency.setValueAtTime(t,this.audioContext.currentTime);var o=this.audioContext.createGain();o.gain.setValueAtTime(1,this.audioContext.currentTime),o.gain.linearRampToValueAtTime(.01,this.audioContext.currentTime+e),n.connect(o),o.connect(this.primaryGainControl),n.start(),n.stop(this.audioContext.currentTime+e)}},t.prototype.playCustomSound=function(t,e,i){var n=this;if(void 0===e&&(e=""),this.enabled){var o=this.audioContext.createOscillator();e&&(o.type=e);var a=0;t.forEach((function(t){o.frequency.setValueAtTime(t.f,n.audioContext.currentTime+a+t.t),a+=t.t}));var s=this.audioContext.createGain();return s.gain.setValueAtTime(1,this.audioContext.currentTime),s.gain.linearRampToValueAtTime(.01,this.audioContext.currentTime+a),o.connect(s),s.connect(this.primaryGainControl),i&&(o.onended=i),o.start(),o.stop(this.audioContext.currentTime+a),o}},t.prototype.playCustomSoundNoFall=function(t,e,i){var n=this;if(void 0===e&&(e=""),this.enabled){var o=this.audioContext.createOscillator();e&&(o.type=e);var a=0;t.forEach((function(t){o.frequency.setValueAtTime(t.f,n.audioContext.currentTime+a+t.t),a+=t.t}));var s=this.audioContext.createGain();return s.gain.setValueAtTime(1,this.audioContext.currentTime),o.connect(s),s.connect(this.primaryGainControl),i&&(o.onended=i),o.start(),o.stop(this.audioContext.currentTime+a),o}},t.prototype.loadSound=function(t){return void 0===t&&(t="https://raw.githubusercontent.com/TinaSoltanian/Patatap/master/sounds/bubbles.mp3"),e=this,i=void 0,o=function(){var e,i,n;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(o){switch(o.label){case 0:return e="cache-"+t,this.soundCache[e]?[2,this.soundCache[e]]:[4,fetch(t)];case 1:return[4,o.sent().arrayBuffer()];case 2:return i=o.sent(),[4,this.audioContext.decodeAudioData(i)];case 3:return n=o.sent(),this.soundCache[e]=n,[2,n]}}))},new((n=void 0)||(n=Promise))((function(t,a){function s(t){try{h(o.next(t))}catch(t){a(t)}}function r(t){try{h(o.throw(t))}catch(t){a(t)}}function h(e){var i;e.done?t(e.value):(i=e.value,i instanceof n?i:new n((function(t){t(i)}))).then(s,r)}h((o=o.apply(e,i||[])).next())}));var e,i,n,o},t.prototype.playSound=function(t,e){if(this.enabled){var i=this.audioContext.createBufferSource();i.buffer=t;var n=this.audioContext.createGain();return n.gain.setValueAtTime(1,this.audioContext.currentTime),i.connect(n),n.connect(this.primaryGainControl),e&&(i.onended=e),i.start(),i}},t}();function a(t){return Math.floor(Math.random()*t)}function s(t){return void 0===t&&(t=0),t?Math.abs(t)/t:0}function r(t,e){void 0===e&&(e=0);var i=t.target.getBoundingClientRect();return[t.touches[e].clientX-i.left,t.touches[e].clientY-i.top]}function h(t){for(var e=t.target.getBoundingClientRect(),i=[],n=0;n<t.touches.length;n++)i.push({x:t.touches[n].clientX-e.left,y:t.touches[n].clientY-e.top,id:t.touches[n].identifier});return i}function l(t,e){var i=t.x-e.x,n=t.y-e.y;return Math.sqrt(i*i+n*n)}function c(t,e,i){return void 0===i&&(i=!1),i?180*Math.atan2(e.y-t.y,e.x-t.x)/Math.PI:Math.atan2(e.y-t.y,e.x-t.x)}function u(t,e){return{x:Math.cos(t)*e,y:Math.sin(t)*e}}function p(t){return t*(Math.PI/180)}function f(t,e){var i=t.c,n=t.x,o=t.y,a=t.a;i.save(),i.translate(n,o),i.rotate(a*Math.PI/180),e(),i.restore()}function d(t){var e=t.c,i=(t.sprite,t.sx),n=t.sy,o=t.sWidth,a=t.sHeight,s=t.dx,r=t.dy,h=t.dWidth,l=t.dHeight,c=t.img,u=t.flipX,p=t.flipY;e.scale(u?-1:1,p?-1:1),e.drawImage(c,i,n,o,a,s,r,h,l),e.scale(1,1)}var y={};function g(t){return e=this,i=void 0,o=function(){var e,i;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(n){switch(n.label){case 0:return e="cache-"+t.sprite,y[e]?(t.img=y[e],[3,3]):[3,1];case 1:return[4,new Promise((function(e,i){var n=new Image;n.onload=function(){e(n)},n.onerror=function(t){i(t)},n.src=t.sprite}))];case 2:i=n.sent(),t.img=i,y[e]=i,n.label=3;case 3:return[2,t]}}))},new((n=void 0)||(n=Promise))((function(t,a){function s(t){try{h(o.next(t))}catch(t){a(t)}}function r(t){try{h(o.throw(t))}catch(t){a(t)}}function h(e){var i;e.done?t(e.value):(i=e.value,i instanceof n?i:new n((function(t){t(i)}))).then(s,r)}h((o=o.apply(e,i||[])).next())}));var e,i,n,o}function m(t){var e=t.c,i=t.x,n=t.y,o=t.toX,a=t.toY,s=t.strokeWidth,r=t.strokeColor;e.beginPath(),e.moveTo(i,n),e.lineTo(o,a),e.strokeStyle=r,e.lineWidth=s,e.stroke()}function b(t){var e=t.c,i=t.x,n=t.y,o=t.radius,a=t.startAngle,s=t.endAngle,r=t.fillColor,h=t.strokeWidth,l=t.strokeColor;e.beginPath(),e.arc(i,n,o,a?p(a):0,s?p(s):2*Math.PI),r&&(e.fillStyle=r,e.fill()),h&&l&&(e.strokeStyle=l,e.lineWidth=h,e.stroke())}function x(t){var e=t.c,i=t.x,n=t.y,o=t.radiusX,a=t.radiusY,s=t.startAngle,r=t.endAngle,h=t.fillColor,l=t.strokeWidth,c=t.strokeColor;e.beginPath(),e.ellipse(i,n,o,a,0,s?p(s):0,r?p(r):2*Math.PI),h&&(e.fillStyle=h,e.fill()),l&&c&&(e.strokeStyle=c,e.lineWidth=l,e.stroke())}function v(t){var e=t.c,i=t.x,n=t.y,o=t.width,a=t.height,s=t.fillColor,r=t.strokeWidth,h=t.strokeColor;e.beginPath(),e.rect(i,n,o,a),s&&(e.fillStyle=s,e.fill()),r&&h&&(e.strokeStyle=h,e.lineWidth=r,e.stroke())}function w(t){var e=t.c,i=t.x,n=t.y,o=t.fillColor,a=t.strokeWidth,s=t.strokeColor,r=t.text,h=t.fontFamily,l=t.fontSize,c=t.align,u=t.style,p=t.weight;e.textAlign=c||"center",e.font=(u?u+" ":"")+(p?p+" ":"")+l+"px "+h,a&&s&&(e.strokeStyle=s,e.lineWidth=a,e.strokeText(r,i,n)),o&&(e.fillStyle=o,e.fillText(r,i,n))}var A,R=function(t,e,i,n){return new(i||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}))},k=function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}},C=function(){function t(t){var e=this;this.gameActive=!1,this.cameraPos={x:0,y:0},this.lastUpdate=Date.now(),this.updateDiff=Date.now(),this.updateTick=1e3/60,this.diffMulti=this.updateDiff/this.updateTick,this.keyBoardEnabled=!1,this.pressedKeys={},this.mouseEnabled=!1,this.mouseInfo={x:-100,y:-100,mouseDown:!1},this.touchInfo=[],this.touchMode=!1,this.levels={},this.activeLevel="",this.targetLevel="",this.pendingLevelLoad=!1,this.basedObjectRefs={},this.loadingMessage="Loading Assets",this.currentlyLoading="",this.canvasElement=this.createCanvas(),this.canvasElement.width=t.width?t.width:200,this.gameWidth=this.canvasElement.width,this.canvasElement.height=t.height?t.height:400,this.gameHeight=this.canvasElement.height;var i=t.canvasElementId?document.getElementById(t.canvasElementId):document;i&&i.appendChild(this.canvasElement),this.ctx=this.createContextFromElement(this.canvasElement),this.soundPlayer=new o,window.addEventListener("resize",(function(t){e.resizeCanvas()})),t.levels&&t.levels.forEach((function(t){e.levels[t.key]=new t.level({key:t.key,gameRef:e}),""==e.activeLevel&&(e.activeLevel=t.key)})),this.gameLoop=this.gameLoop.bind(this),this.update=this.update.bind(this),this.tick=this.tick.bind(this),this.draw=this.draw.bind(this)}return t.prototype.createCanvas=function(){return document.createElement("canvas")},t.prototype.resizeCanvas=function(){this.canvasElement.width=window.innerWidth,this.canvasElement.height=window.innerHeight,this.gameWidth=this.canvasElement.width,this.gameHeight=this.canvasElement.height,this.ctx=this.createContextFromElement(this.canvasElement),this.levels[this.activeLevel].onResize&&this.levels[this.activeLevel].onResize()},t.prototype.createContextFromElement=function(t){return t.getContext("2d")},t.prototype.enableMouse=function(){var t=this;this.canvasElement.addEventListener("mousedown",(function(e){t.mouseInfo.mouseDown=!0})),this.canvasElement.addEventListener("mousemove",(function(e){var i;i=function(t){var e=t.target.getBoundingClientRect();return[t.clientX-e.left,t.clientY-e.top]}(e),t.mouseInfo.x=i[0],t.mouseInfo.y=i[1]})),window.addEventListener("mouseup",(function(e){t.mouseInfo.mouseDown=!1})),this.canvasElement.addEventListener("touchstart",(function(e){var i;i=r(e),t.mouseInfo.x=i[0],t.mouseInfo.y=i[1],t.mouseInfo.mouseDown=!0,t.touchMode=!0,t.touchInfo=h(e)})),this.canvasElement.addEventListener("touchmove",(function(e){var i;i=r(e),t.mouseInfo.x=i[0],t.mouseInfo.y=i[1],t.touchInfo=h(e)})),window.addEventListener("touchend",(function(e){t.mouseInfo.mouseDown=!1,t.touchInfo=h(e)}))},t.prototype.enableKeyboard=function(){var t=this;this.keyBoardEnabled||(document.addEventListener("keydown",(function(e){t.pressedKeys[e.code]=!0})),document.addEventListener("keyup",(function(e){t.pressedKeys[e.code]=!1})))},t.prototype.tick=function(){this.updateDiff=Date.now()-this.lastUpdate,this.diffMulti=this.updateDiff/this.updateTick,this.lastUpdate=Date.now()},t.prototype.start=function(){return R(this,void 0,void 0,(function(){return k(this,(function(t){switch(t.label){case 0:return this.drawLoading(),this.soundPlayer.initialize(),this.gameActive=!0,this.targetLevel=this.activeLevel,[4,this.levels[this.activeLevel].preload()];case 1:return t.sent(),this.levels[this.activeLevel].initialize(),this.animFrame=window.requestAnimationFrame(this.gameLoop),[2]}}))}))},t.prototype.update=function(){this.tick(),this.levels[this.activeLevel].update()},t.prototype.draw=function(){this.levels[this.activeLevel].draw()},t.prototype.drawLoading=function(t){this.ctx.beginPath(),this.ctx.rect(0,0,this.gameWidth,this.gameHeight),this.ctx.fillStyle="#eee",this.ctx.fill(),w({c:this.ctx,x:this.gameWidth/2,y:100,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"500",fontFamily:"sans-serif",fontSize:20,text:this.loadingMessage}),w({c:this.ctx,x:this.gameWidth/2,y:150,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"500",fontFamily:"sans-serif",fontSize:20,text:t||this.currentlyLoading})},t.prototype.loadLevel=function(t){this.targetLevel=t,this.pendingLevelLoad=!0},t.prototype.handleLevelLoad=function(){return R(this,void 0,void 0,(function(){return k(this,(function(t){switch(t.label){case 0:return this.loadingMessage="Loading Assets",this.currentlyLoading="",this.drawLoading(),this.levels[this.activeLevel].tearDown(),this.activeLevel=this.targetLevel,[4,this.levels[this.activeLevel].preload()];case 1:return t.sent(),this.levels[this.activeLevel].initialize(),this.pendingLevelLoad=!1,this.animFrame=window.requestAnimationFrame(this.gameLoop),[2]}}))}))},t.prototype.gameLoop=function(){this.gameActive&&(this.activeLevel!==this.targetLevel||this.pendingLevelLoad?this.handleLevelLoad():(this.update(),this.draw(),this.animFrame=window.requestAnimationFrame(this.gameLoop)))},t}(),M=function(){function t(t){this.x=0,this.y=0,this.objectKey=t.key,this.gameRef=t.gameRef,this.initialize=this.initialize.bind(this),this.preload=this.preload.bind(this),this.update=this.update.bind(this),this.draw=this.draw.bind(this),this.tearDown=this.tearDown.bind(this),this.gameRef.basedObjectRefs[this.objectKey]=this}return t.prototype.preload=function(){return t=this,e=void 0,n=function(){return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(t){return[2]}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},t.prototype.initialize=function(){},t.prototype.update=function(){},t.prototype.draw=function(){},t.prototype.tearDown=function(){},t}(),S=(A=function(t,e){return(A=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}A(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),W=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.width=100,e.height=50,e.fillColor="#777",e.hoverColor="#333",e.focusColor="#000",e.strokeWidth=0,e.strokeColor="",e.hovered=!1,e.focused=!1,e.textColor="#fff",e.buttonText="Click Me",e.style="",e.weight="bold",e.fontSize=16,e.fontFamily="sans-serif",e.clickFunction=function(){return null},e.holdFunction=function(){return null},e.lastSwitch=0,e.switchDelay=300,e.touchId="",e}return S(e,t),e.prototype.initialize=function(){},e.prototype.update=function(){this.gameRef.touchMode?this.checkTouch():this.checkMouse()},e.prototype.checkMouse=function(){var t=this.x,e=this.y,i=this.x+this.width,n=this.y+this.height,o=this.gameRef.mouseInfo,a=o.x,s=o.y;this.hovered=a>t&&a<i&&s>e&&s<n,this.hovered&&this.gameRef.mouseInfo.mouseDown?(this.focused=!0,this.holdFunction()):this.hovered&&this.focused&&!this.gameRef.mouseInfo.mouseDown?(this.clickFunction(),this.focused=!1):this.focused=!1},e.prototype.checkTouch=function(){var t=this;this.gameRef.touchInfo.length>0&&this.gameRef.touchInfo.forEach((function(e){var i=t.x,n=t.y,o=t.x+t.width,a=t.y+t.height,s=e.x,r=e.y;s>i&&s<o&&r>n&&r<a&&t.lastSwitch+t.switchDelay<t.gameRef.lastUpdate&&(t.clickFunction(),t.lastSwitch=t.gameRef.lastUpdate)}))},e.prototype.draw=function(){v({c:this.gameRef.ctx,x:this.x,y:this.y,width:this.width,height:this.height,fillColor:this.hovered&&this.focused?this.focusColor:this.hovered?this.hoverColor:this.fillColor}),w({c:this.gameRef.ctx,x:(this.x+this.x+this.width)/2,y:(this.y+this.y+this.height)/2+this.fontSize/3,align:"center",fillColor:this.textColor,style:this.style,weight:this.weight,fontFamily:this.fontFamily,fontSize:this.fontSize,text:this.buttonText})},e}(M),B=function(){function t(t){this.levelKey=t.key,this.gameRef=t.gameRef,this.initialize=this.initialize.bind(this),this.update=this.update.bind(this),this.draw=this.draw.bind(this),this.tearDown=this.tearDown.bind(this)}return t.prototype.preload=function(){return t=this,e=void 0,n=function(){return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(t){return[2]}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},t.prototype.initialize=function(){},t.prototype.update=function(){},t.prototype.draw=function(){},t.prototype.onResize=function(){},t.prototype.tearDown=function(){},t}(),P=i(2530),T=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const O=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.activeSound={playing:!1,soundRef:null},e}return T(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e=this;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(i){switch(i.label){case 0:return this.backButton=new W({key:"back-button",gameRef:this.gameRef}),this.backButton.fillColor="yellow",this.backButton.hoverColor="orange",this.backButton.textColor="brown",this.backButton.x=10,this.backButton.y=10,this.backButton.buttonText="< Go Back",this.backButton.width=150,this.backButton.clickFunction=function(){e.gameRef.loadLevel("start-screen")},this.gameRef.drawLoading("Music"),t=this,[4,this.gameRef.soundPlayer.loadSound(P)];case 1:return t.bgSong=i.sent(),this.activeSound.playing=!1,[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){},e.prototype.update=function(){this.handleSounds(),this.backButton.update()},e.prototype.handleSounds=function(){var t=this;this.gameRef.soundPlayer.enabled&&0==this.activeSound.playing&&(this.activeSound.soundRef=this.gameRef.soundPlayer.playSound(this.bgSong,(function(){t.activeSound.playing=!1})),this.activeSound.playing=!0)},e.prototype.draw=function(){this.gameRef.ctx.beginPath(),this.gameRef.ctx.rect(0,0,this.gameRef.gameWidth,this.gameRef.gameHeight),this.gameRef.ctx.fillStyle="#799b1f",this.gameRef.ctx.fill();var t=this.gameRef.gameHeight/5;w({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:t,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:16,text:"produced by:"}),w({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:t+30,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:24,text:"SHYNES GAMING"}),w({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:2*t,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:16,text:"lead programmer:"}),w({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:2*t+30,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:24,text:"Chewdawg"}),w({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:3*t,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:16,text:"lead artist:"}),w({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:3*t+30,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:24,text:"Namio_Moia"}),w({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:4*t,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:16,text:"sound engineer:"}),w({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:4*t+30,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:24,text:"Kevin McKFly"}),this.backButton.draw()},e.prototype.onResize=function(){},e.prototype.tearDown=function(){this.backButton.tearDown(),this.activeSound.playing&&this.activeSound.soundRef&&this.activeSound.soundRef.stop()},e}(B);var _=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),j=function(){return(j=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},z=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.width=200,e.height=200,e.radius=40,e.knobActive=!1,e.knobCoord={x:0,y:0},e.knobCenter={x:0,y:0},e.knobRadius=30,e.maxOffset=30,e.touchId="",e.touchColor="rgba(255,0,0,.2)",e}return _(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(t){return[2]}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){},e.prototype.update=function(){this.gameRef.touchMode?this.checkTouch():this.checkMouse()},e.prototype.checkMouse=function(){var t=this.x,e=this.y,i=this.x+this.width,n=this.y+this.height,o=this.gameRef.mouseInfo,a=o.x,s=o.y,r=a>t&&a<i&&s>e&&s<n;if(this.knobActive)if(this.gameRef.mouseInfo.mouseDown){var h=l(this.knobCenter,this.gameRef.mouseInfo),p=c(this.knobCenter,this.gameRef.mouseInfo);this.knobCoord=u(p,h<=this.maxOffset?h:this.maxOffset)}else this.knobActive=!1,this.touchId="";else this.gameRef.mouseInfo.mouseDown&&r&&(this.knobActive=!0,this.knobCoord={x:0,y:0},this.knobCenter={x:this.gameRef.mouseInfo.x,y:this.gameRef.mouseInfo.y})},e.prototype.checkTouch=function(){var t=this;if(this.knobActive){var e=this.gameRef.touchInfo.filter((function(e){return e.id===t.touchId}));if(e.length>0){var i=l(this.knobCenter,e[0]),n=c(this.knobCenter,e[0]);this.knobCoord=u(n,i<=this.maxOffset?i:this.maxOffset)}else this.knobActive=!1,this.touchId="",this.findTouch()}else this.gameRef.touchInfo.length>0&&this.findTouch()},e.prototype.findTouch=function(){var t=this,e={};this.gameRef.touchInfo.forEach((function(i){var n=t.x,o=t.y,a=t.x+t.width,s=t.y+t.height,r=i.x,h=i.y;r>n&&r<a&&h>o&&h<s&&(e=j({},i),t.knobActive=!0,t.touchId=i.id)})),this.knobActive&&e.x&&e.y&&(this.knobCoord={x:0,y:0},this.knobCenter=e)},e.prototype.centerCoordinates=function(){return{x:this.x+this.width/2,y:this.y+this.height/2}},e.prototype.draw=function(){this.knobActive?(b(j(j({c:this.gameRef.ctx},this.knobCenter),{radius:this.radius,fillColor:"rgba(255,255,255,.5)"})),b({c:this.gameRef.ctx,x:this.knobCoord.x+this.knobCenter.x,y:this.knobCoord.y+this.knobCenter.y,radius:this.knobRadius,fillColor:"rgba(0,0,0,.5)"})):(b({c:this.gameRef.ctx,x:this.x+this.width/2,y:this.y+this.height/2,radius:this.radius,fillColor:"rgba(255,255,255,.5)"}),b({c:this.gameRef.ctx,x:this.x+this.width/2,y:this.y+this.height/2,radius:this.knobRadius,fillColor:"rgba(0,0,0,.5)"}))},e}(M),L=i(9657),H=i.n(L),D=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),E=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.width=100,e.height=5,e.yOffset=-8,e.xOffset=0,e.x=0,e.y=0,e.current=0,e.max=100,e.lastTick=0,e.tickSize=100,e}return D(e,t),e.prototype.tick=function(t,e){return void 0===e&&(e=!1),!!(e||this.gameRef.lastUpdate>this.lastTick+this.tickSize)&&(this.current+=t,this.current<0&&(this.current=0),this.current>this.max&&(this.current=this.max),this.lastTick=this.gameRef.lastUpdate,!0)},e.prototype.draw=function(){if(v({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.x-this.width/2+this.xOffset,y:this.gameRef.cameraPos.y+this.y-this.height+this.yOffset,width:this.width,height:this.height,fillColor:"white"}),this.current>0){var t=this.current/this.max;v({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.x-this.width/2+this.xOffset,y:this.gameRef.cameraPos.y+this.y-this.height+this.yOffset,width:this.width*this.current/this.max,height:this.height,fillColor:t<.5?"red":t<.8?"orange":"green"})}},e}(M),N=i(6044),I=i(6576),U=i(4353),K=i(7128),F=i(183),G=i(3021),q=i(5010),X=i(2448),Y=i(7004),V=i(926),J=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Q=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.speed=2,e.radius=16,e.color="pink",e.chasing=!1,e.entityTag="baddie",e.spawnRoom="",e.pathList=[],e.lastRoomCheck=0,e.lastRoomCheckAmount=500,e.target={x:0,y:0},e.activeTarget={x:0,y:0},e.velocity={x:0,y:0},e.health=100,e.spritePool=[q,q,q,N,N,N,I,U,K,F,G],e.noises=[],e.noisePool=[X,Y,V],e}return J(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e,i;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(n){switch(n.label){case 0:return t=this,[4,g({c:this.gameRef.ctx,sprite:this.spritePool[a(this.spritePool.length)],sx:0,sy:0,sWidth:32,sHeight:32,dx:0,dy:0,dWidth:32,dHeight:32,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 1:t.sprite=n.sent(),this.noises=[],e=0,n.label=2;case 2:return e<3?[4,this.gameRef.soundPlayer.loadSound(this.noisePool[e])]:[3,5];case 3:i=n.sent(),this.noises.push(i),n.label=4;case 4:return e++,[3,2];case 5:return[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){this.baddieDefaultInitialize()},e.prototype.baddieDefaultInitialize=function(){this.healthBar=new E({key:"baddie-health-"+this.objectKey,gameRef:this.gameRef}),this.healthBar.width=2*this.radius,this.healthBar.yOffset=-this.radius/2-20,this.healthBar.current=this.health,this.healthBar.max=this.health,this.healthBar.x=this.x,this.healthBar.y=this.y,this.finder=new(H().AStarFinder)({})},e.prototype.update=function(){this.updateSprite(),(this.tileMap.visitedRooms[this.spawnRoom]||this.healthBar.current!==this.healthBar.max)&&(this.chaseTarget(),this.healthBar.x=this.x,this.healthBar.y=this.y)},e.prototype.chaseTarget=function(){var t=this,e=l(this,this.target),i=this.cleanDistanceToTarget();if(this.pathList.length<=0&&!this.chasing||(e>300||!i)&&!0===this.chasing){this.chasing=!1;var n=this.tileMap.pfGrid.clone(),o=this.tileMap.getMapCoord(this),a=o.x,s=o.y,r=this.tileMap.getMapCoord(this.target),h=r.x,c=r.y;this.pathList=this.finder.findPath(a,s,h,c,n),0===this.pathList.length&&(this.pathList=[[h,c]]),this.getNextActiveTarget()}else e<=300&&i&&(this.activeTarget=this.target,!1===this.chasing&&(this.chasing=!0,this.pathList=[]));this.checkRoom(),this.moveTo({x:this.activeTarget.x,y:this.activeTarget.y},(function(){t.onTargetCallBack()}))},e.prototype.cleanDistanceToTarget=function(){var t=u(c(this,this.target),this.radius+5);return this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord({x:(this.x+this.target.x)/2,y:(this.y+this.target.y)/2})).walkable&&this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord({x:this.x+t.x,y:this.y+t.y})).walkable},e.prototype.checkRoom=function(){var t=this;if(this.lastRoomCheck<this.gameRef.lastUpdate+this.lastRoomCheckAmount){var e=this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord(this));if(Object.keys(e.occupants).find((function(i){return e.occupants[i].entityTag===t.entityTag&&e.occupants[i].objectKey!==t.objectKey&&e.occupants[i].activeTarget.x===t.activeTarget.x&&e.occupants[i].activeTarget.y===t.activeTarget.y}))){this.chasing=!1;var i=this.tileMap.pfGrid.clone(),n=this.tileMap.getMapCoord(this.tileMap.getMapCoord(this.activeTarget));i.setWalkableAt(n.x,n.y,!1);var o=this.tileMap.getMapCoord(this.tileMap.getMapCoord(this)),s=o.x,r=o.y,h=this.tileMap.getMapCoord(this.tileMap.getMapCoord(this.target)),l=h.x,c=h.y;this.pathList=this.finder.findPath(s,r,l,c,i),this.getNextActiveTarget()}this.lastRoomCheck=this.gameRef.lastUpdate+a(300)}},e.prototype.damage=function(t,e,i){var n=this;if(this.healthBar.tick(t)){var o=u(c(e,this),i);return this.moveTo({x:this.x+o.x,y:this.y+o.y,distance:i},(function(){return n.onTargetCallBack()})),this.gameRef.soundPlayer.playSound(this.noises[a(3)]),!0}return!1},e.prototype.onTargetCallBack=function(){this.getNextActiveTarget()},e.prototype.moveTo=function(t,e){void 0===e&&(e=function(){});var i=l(this,t);if(i>this.radius/2){var n=t.distance?t.distance:(t.speed?t.speed:this.speed)*this.gameRef.diffMulti;this.velocity={x:n/i*(t.x-this.x),y:n/i*(t.y-this.y)},this.x+=this.velocity.x;var o=s(this.velocity.x)*this.radius;!this.tileMap||this.tileMap.onMap({x:this.x+o,y:this.y})&&this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord({x:this.x+o,y:this.y})).walkable||(this.x-=this.velocity.x),this.y+=this.velocity.y;var a=s(this.velocity.y)*this.radius;!this.tileMap||this.tileMap.onMap({x:this.x,y:this.y+a})&&this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord({x:this.x,y:this.y+a})).walkable||(this.y-=this.velocity.y)}else this.velocity={x:0,y:0},e()},e.prototype.getNextActiveTarget=function(){if(this.pathList&&this.pathList.length>0){var t=this.pathList.shift(),e=t[0],i=t[1];this.activeTarget={x:e*this.tileMap.tileSize+Math.floor(this.tileMap.tileSize/2),y:i*this.tileMap.tileSize+Math.floor(this.tileMap.tileSize/2)}}},e.prototype.updateSprite=function(){this.sprite.lastUpdate+this.sprite.updateDiff<this.gameRef.lastUpdate&&(this.sprite.frame++,this.sprite.frame>3&&(this.sprite.frame=0),this.sprite.lastUpdate=this.gameRef.lastUpdate,Math.abs(this.velocity.x)>Math.abs(this.velocity.y)?(this.sprite.sy=2*this.sprite.dHeight,this.sprite.flipX=this.velocity.x<0):Math.abs(this.velocity.y)&&(this.sprite.flipX=!1,this.velocity.y>0?this.sprite.sy=0:this.sprite.sy=this.sprite.dHeight),this.sprite.sx=this.sprite.frame*this.sprite.dWidth)},e.prototype.draw=function(){var t=this;f({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.x+(this.sprite.flipX?this.radius:-this.radius),y:this.gameRef.cameraPos.y+this.y-this.radius,a:0},(function(){d(t.sprite)})),this.healthBar.current<this.health&&this.healthBar.draw()},e.prototype.tearDown=function(){},e}(M);var Z=i(3207),$=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const tt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.radius=32,e.color="yellow",e.message="Bring Bananas!",e}return $(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,g({c:this.gameRef.ctx,sprite:Z,sx:0,sy:0,sWidth:72,sHeight:72,dx:0,dy:0,dWidth:72,dHeight:72,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 1:return t.sprite=e.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){},e.prototype.update=function(){this.updateSprite()},e.prototype.updateSprite=function(){this.sprite.lastUpdate+this.sprite.updateDiff<this.gameRef.lastUpdate&&(this.sprite.frame++,this.sprite.frame>1&&(this.sprite.frame=0),this.sprite.lastUpdate=this.gameRef.lastUpdate,this.sprite.sx=this.sprite.frame*this.sprite.dWidth)},e.prototype.draw=function(){var t=this;f({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.x+(this.sprite.flipX?this.sprite.dWidth/2:-this.sprite.dWidth/2),y:this.gameRef.cameraPos.y+this.y-this.sprite.dHeight/2,a:0},(function(){d(t.sprite)})),this.message&&w({c:this.gameRef.ctx,x:this.x+this.gameRef.cameraPos.x,y:this.y+this.gameRef.cameraPos.y-this.sprite.dHeight/2-16,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:16,text:this.message})},e.prototype.tearDown=function(){},e}(M);var et=i(851),it=i(9647),nt=i(8960),ot=i(3237),at=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),st=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.yOffset=0,e.xOffset=0,e.radius=26,e.weaponLength=30,e.angle=0,e.rotateSpeed=10,e.currentSpeed=0,e.target={x:0,y:0},e.hitBox={x:0,y:0},e.hitBoxRadius=10,e.handPos={x:0,y:0},e.handColor="#d89b6d",e.onTarget=!1,e.entityTag="meleeWeapon",e.lastSound=0,e.soundTimeDiff=150,e.trails=[],e.lastTrail=0,e.trailDiff=10,e.trailTime=100,e.trailLimit=10,e}return at(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e,i;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(n){switch(n.label){case 0:return t=this,[4,g({c:this.gameRef.ctx,sprite:it,sx:0,sy:0,sWidth:40,sHeight:20,dx:0,dy:0,dWidth:40,dHeight:20,frame:0})];case 1:return t.sprite=n.sent(),this.sprite.dx=0,this.sprite.dy=-10,this.sprite.flipX=!1,this.sprite.flipY=!1,e=this,[4,this.gameRef.soundPlayer.loadSound(nt)];case 2:return e.swingSound=n.sent(),i=this,[4,this.gameRef.soundPlayer.loadSound(ot)];case 3:return i.impactSound=n.sent(),this.trails=[],[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.playImpactNoise=function(){this.gameRef.soundPlayer.playSound(this.impactSound)},e.prototype.handleSlashSound=function(){this.onTarget&&this.lastSound+this.soundTimeDiff<this.gameRef.lastUpdate&&(this.gameRef.soundPlayer.playSound(this.swingSound),this.lastSound=this.gameRef.lastUpdate)},e.prototype.handleTrails=function(){this.lastTrail+this.trailDiff<this.gameRef.lastUpdate&&(this.trails.unshift({x:this.x,y:this.y,mx:this.hitBox.x,my:this.hitBox.y,hx:this.handPos.x,hy:this.handPos.y,angle:this.angle,time:this.gameRef.lastUpdate+this.trailTime}),this.lastTrail=this.gameRef.lastUpdate),this.trails.length>this.trailLimit&&(this.trails=this.trails.slice(0,this.trailLimit-1))},e.prototype.update=function(){var t=this.rotateSpeed*this.gameRef.diffMulti,e=c(this,this.target,!0),i=(e-this.angle+540)%360-180;Math.abs(i)>5?(this.handleTrails(),this.angle=i>0?this.angle%360+(i>t?t:i):this.angle%360-(i<t?t:-i),this.handleSlashSound()):this.angle=e,this.angle<0&&(this.angle+=360),this.handPos=u(p(this.angle),this.radius),this.hitBox=u(p(this.angle),this.radius+this.weaponLength),this.currentSpeed=Math.abs(i);var n=l(u(c(this,this.target),this.weaponLength),u(p(this.angle),this.weaponLength));this.onTarget=Math.abs(n)<=1},e.prototype.moveTo=function(t){this.x=t.x+this.xOffset,this.y=t.y+this.yOffset},e.prototype.setTarget=function(t){this.target=t},e.prototype.draw=function(){var t=this;b({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.handPos.x+this.x,y:this.gameRef.cameraPos.y+this.handPos.y+this.y,radius:5,fillColor:this.handColor}),this.trails.forEach((function(e){e.time>t.gameRef.lastUpdate&&(t.gameRef.ctx.globalAlpha=(e.time-t.gameRef.lastUpdate)/(2*t.trailTime),m({c:t.gameRef.ctx,x:t.gameRef.cameraPos.x+e.x+e.mx,y:t.gameRef.cameraPos.y+e.y+e.my,toX:t.gameRef.cameraPos.x+e.x+e.hx,toY:t.gameRef.cameraPos.y+e.y+e.hy,strokeWidth:10,strokeColor:"rgba(255,255,255)"}),t.gameRef.ctx.globalAlpha=1)})),f({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.handPos.x+this.x,y:this.gameRef.cameraPos.y+this.handPos.y+this.y,a:this.angle},(function(){d(t.sprite)}))},e}(M),rt=i(3817),ht=i(766),lt=i(369),ct=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),ut=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.active=!1,e.target={x:0,y:0},e.speed=15,e.radius=6,e.velocity={x:0,y:0},e.maxDistance=400,e.traveled=0,e.lastShot=0,e.shotDelay=200,e.entityTag="bullet",e.angle=0,e.trails=[],e.lastTrail=0,e.trailDiff=10,e.trailTime=200,e.trailLimit=10,e}return ct(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e,i;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(n){switch(n.label){case 0:return t=this,[4,g({c:this.gameRef.ctx,sprite:rt,sx:12,sy:0,sWidth:12,sHeight:12,dx:-this.radius,dy:-this.radius,dWidth:12,dHeight:12,frame:0})];case 1:return t.sprite=n.sent(),e=this,[4,this.gameRef.soundPlayer.loadSound(ht)];case 2:return e.fireNoise=n.sent(),i=this,[4,this.gameRef.soundPlayer.loadSound(lt)];case 3:return i.contactNoise=n.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){},e.prototype.hit=function(){this.active=!1,this.gameRef.soundPlayer.playSound(this.contactNoise)},e.prototype.update=function(){var t=this;this.active&&this.traveled<this.maxDistance?(this.handleTrails(),this.x+=this.velocity.x,this.y+=this.velocity.y,this.trails.forEach((function(e){e.x+=t.velocity.x/5,e.y+=t.velocity.y/5})),this.traveled+=Math.abs(this.velocity.x)+Math.abs(this.velocity.y)):(this.velocity={x:0,y:0},this.active=!1,this.traveled=0)},e.prototype.handleTrails=function(){this.lastTrail+this.trailDiff<this.gameRef.lastUpdate&&(this.trails.unshift({x:this.x,y:this.y,time:this.gameRef.lastUpdate+this.trailTime}),this.lastTrail=this.gameRef.lastUpdate),this.trails.length>this.trailLimit&&(this.trails=this.trails.slice(0,this.trailLimit-1))},e.prototype.setVelocityToTarget=function(){var t=this.gameRef.diffMulti,e=l(this,this.target),i=this.speed*t;this.velocity={x:i/e*(this.target.x-this.x),y:i/e*(this.target.y-this.y)}},e.prototype.fire=function(t,e){return!!this.canFire()&&(this.x=t.x,this.y=t.y,this.target=e,this.setVelocityToTarget(),this.angle=c(t,e,!0),this.active=!0,this.traveled=0,this.lastShot=this.gameRef.lastUpdate,this.gameRef.soundPlayer.playSound(this.fireNoise),!0)},e.prototype.canFire=function(){return!this.active&&this.gameRef.lastUpdate-this.lastShot>=this.shotDelay},e.prototype.draw=function(){var t=this;this.trails.forEach((function(e){e.time>t.gameRef.lastUpdate&&(t.gameRef.ctx.globalAlpha=(e.time-t.gameRef.lastUpdate)/(2*t.trailTime),b({c:t.gameRef.ctx,x:t.gameRef.cameraPos.x+e.x,y:t.gameRef.cameraPos.y+e.y,fillColor:"black",radius:t.radius*(e.time-t.gameRef.lastUpdate)/t.trailTime/2}),t.gameRef.ctx.globalAlpha=1)})),this.active&&f({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.x,y:this.gameRef.cameraPos.y+this.y,a:this.angle},(function(){d(t.sprite)}))},e}(M),pt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),ft=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.yOffset=0,e.xOffset=0,e.angle=0,e.rotateSpeed=5,e.radius=20,e.weaponLength=30,e.handColor="#d89b6d",e.handPos={x:0,y:0},e.target={x:0,y:0},e.gunTip={x:0,y:0},e.onTarget=!1,e.trails=[],e.lastTrail=0,e.trailDiff=10,e.trailTime=100,e.trailLimit=10,e}return pt(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,g({c:this.gameRef.ctx,sprite:rt,sx:0,sy:0,sWidth:12,sHeight:12,dx:0,dy:-6,dWidth:12,dHeight:12,frame:0})];case 1:return t.sprite=e.sent(),this.projectile=new ut({key:"projectile",gameRef:this.gameRef}),[4,this.projectile.preload()];case 2:return e.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){},e.prototype.handleTrails=function(){this.lastTrail+this.trailDiff<this.gameRef.lastUpdate&&(this.trails.unshift({x:this.x,y:this.y,sx:this.gunTip.x,sy:this.gunTip.y,hx:this.handPos.x,hy:this.handPos.y,angle:this.angle,time:this.gameRef.lastUpdate+this.trailTime}),this.lastTrail=this.gameRef.lastUpdate),this.trails.length>this.trailLimit&&(this.trails=this.trails.slice(0,this.trailLimit-1))},e.prototype.update=function(){var t=5*this.gameRef.diffMulti,e=(c(this,this.target,!0)-this.angle+540)%360-180;0!==e&&(Math.abs(e)>5&&this.handleTrails(),this.angle=e>0?this.angle%360+(e>t?t:e):this.angle%360-(e<t?t:-e)),this.angle<0&&(this.angle+=360),this.gunTip=u(p(this.angle),this.weaponLength),this.handPos=u(p(this.angle),this.radius);var i=l(u(c(this,this.target),this.weaponLength),u(p(this.angle),this.weaponLength));this.onTarget=Math.abs(i)<=1,this.projectile.update()},e.prototype.fire=function(){return this.projectile.fire({x:this.x+this.gunTip.x,y:this.y+this.gunTip.y},this.target)},e.prototype.moveTo=function(t){this.x=t.x+this.xOffset,this.y=t.y+this.yOffset},e.prototype.setTarget=function(t){this.target=t},e.prototype.draw=function(){var t=this;this.trails.forEach((function(e){e.time>t.gameRef.lastUpdate&&(t.gameRef.ctx.globalAlpha=(e.time-t.gameRef.lastUpdate)/(2*t.trailTime),m({c:t.gameRef.ctx,x:t.gameRef.cameraPos.x+e.x+e.hx,y:t.gameRef.cameraPos.y+e.y+e.hy,toX:t.gameRef.cameraPos.x+e.x+e.sx,toY:t.gameRef.cameraPos.y+e.y+e.sy,strokeWidth:2,strokeColor:"rgba(255,255,255)"}),t.gameRef.ctx.globalAlpha=1)})),b({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.x+this.handPos.x,y:this.gameRef.cameraPos.y+this.y+this.handPos.y,radius:5,fillColor:this.handColor}),this.projectile.draw(),this.projectile.canFire()&&f({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.handPos.x+this.x,y:this.gameRef.cameraPos.y+this.handPos.y+this.y,a:this.angle},(function(){d(t.sprite)}))},e}(M),dt=i(3579),yt=i(7650),gt=i(9524),mt=i(8836),bt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const xt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.radius=28,e.speed=6,e.baseSpeed=6,e.pushSpeed=3,e.color="#ce192b",e.objectKey="player",e.entityTag="player",e.target={x:0,y:0},e.velocity={x:0,y:0},e.health=100,e.mode="shoot",e.prevMode="shoot",e.lastSwitch=0,e.switchDelay=300,e.direction="up",e.attacking=!1,e.noises=[],e.lastSound=0,e.soundDelay=300,e}return bt(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e,i,n;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(o){switch(o.label){case 0:return t=this,[4,g({c:this.gameRef.ctx,sprite:et,sx:0,sy:0,sWidth:56,sHeight:56,dx:0,dy:0,dWidth:56,dHeight:56,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 1:return t.sprite=o.sent(),this.meleeWeapon=new st({key:"melee-weapon",gameRef:this.gameRef}),[4,this.meleeWeapon.preload()];case 2:return o.sent(),this.projectileWeapon=new ft({key:"projectile-weapon",gameRef:this.gameRef}),[4,this.projectileWeapon.preload()];case 3:o.sent(),this.noises=[],e=[dt,yt,gt,mt],i=0,o.label=4;case 4:return i<4?[4,this.gameRef.soundPlayer.loadSound(e[i])]:[3,7];case 5:n=o.sent(),this.noises.push(n),o.label=6;case 6:return i++,[3,4];case 7:return[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){this.healthBar=new E({key:"player-health",gameRef:this.gameRef}),this.healthBar.width=2*this.radius,this.healthBar.yOffset=-this.radius/2-20,this.healthBar.current=this.health,this.poopHealthBar=new E({key:"poop-health",gameRef:this.gameRef}),this.poopHealthBar.width=2*this.radius,this.poopHealthBar.yOffset=this.radius/2+30,this.poopHealthBar.current=this.health,this.meleeWeapon.initialize(),this.meleeWeapon.yOffset=10,this.projectileWeapon.initialize(),this.projectileWeapon.yOffset=10},e.prototype.switchMode=function(t){this.lastSwitch+this.switchDelay<this.gameRef.lastUpdate&&(this.mode=t,this.prevMode=t,this.projectileWeapon.projectile.lastShot=this.gameRef.lastUpdate,this.projectileWeapon.projectile.active=!1,this.lastSwitch=this.gameRef.lastUpdate)},e.prototype.update=function(){var t=this;this.mode=this.speed===this.pushSpeed?"push":this.prevMode,this.speed=this.baseSpeed,this.color="#ce192b",this.meleeWeapon.target=this.target,"melee"===this.mode&&this.meleeWeapon.update(),this.projectileWeapon.target=this.target,"shoot"===this.mode&&(this.projectileWeapon.update(),this.poopHealthBar.current>0?this.attacking&&this.projectileWeapon.onTarget&&this.projectileWeapon.fire()&&this.poopHealthBar.tick(-5):this.switchMode("melee"));for(var e=this.tileMap.getMapCoord(this),i=this.tileMap.getMapCoord(this.projectileWeapon.projectile),n=-1;n<2;n++)for(var o=function(o){if("shoot"===a.mode&&a.projectileWeapon.projectile.active&&a.tileMap.onMap({x:(i.x+n)*a.tileMap.tileSize,y:(i.y+o)*a.tileMap.tileSize})){var s=a.tileMap.getRoomFromCoord({x:i.x+n,y:i.y+o}).occupants;Object.keys(s).map((function(e){"baddie"===s[e].entityTag&&s[e].healthBar.current>0&&l(t.projectileWeapon.projectile,s[e])<t.projectileWeapon.projectile.radius+s[e].radius&&(s[e].damage(-10,t.projectileWeapon.projectile,16),t.projectileWeapon.projectile.hit())}))}if(a.tileMap.onMap({x:(e.x+n)*a.tileMap.tileSize,y:(e.y+o)*a.tileMap.tileSize})){var r=a.tileMap.getRoomFromCoord({x:e.x+n,y:e.y+o}),h=r.occupants,c=r.roomKey;0!==n||0!==o||a.tileMap.visitedRooms[c]||(a.tileMap.visitedRooms[c]=!0),Object.keys(h).map((function(e){if(h[e].objectKey!==t.objectKey&&("box"===h[e].objectKey&&l(t,h[e])<t.radius+h[e].radius&&(t.speed=t.pushSpeed,h[e].moveTo({x:h[e].x+t.velocity.x,y:h[e].y+t.velocity.y})),"pickup"===h[e].entityTag&&h[e].active&&l(t,h[e])<t.radius+h[e].radius&&h[e].onPickup(),"baddieWeapon"===h[e].entityTag&&h[e].active&&l(t,h[e])<t.radius+h[e].radius&&t.damage(-15,h[e],32),"baddie"===h[e].entityTag&&h[e].healthBar.current>0)){l(t,h[e])<t.radius+h[e].radius&&t.damage(-4,h[e],16);var i={x:t.meleeWeapon.x+t.meleeWeapon.hitBox.x,y:t.meleeWeapon.y+t.meleeWeapon.hitBox.y};"melee"===t.mode&&l(i,h[e])<t.meleeWeapon.hitBoxRadius+h[e].radius&&h[e].damage(t.meleeWeapon.currentSpeed>5?-30:-5,i,16)&&t.meleeWeapon.playImpactNoise()}}))}},a=this,s=-1;s<2;s++)o(s);this.healthBar.x=this.x,this.healthBar.y=this.y,this.poopHealthBar.x=this.x,this.poopHealthBar.y=this.y,this.updateSprite()},e.prototype.damage=function(t,e,i){if(this.healthBar.tick(t)){var n=u(c(e,this),i);this.moveTo({x:this.x+n.x,y:this.y+n.y,distance:i}),this.lastSound+this.soundDelay<this.gameRef.lastUpdate&&(this.gameRef.soundPlayer.playSound(this.noises[a(4)]),this.lastSound=this.gameRef.lastUpdate)}},e.prototype.moveTo=function(t,e){void 0===e&&(e=function(){});var i=l(this,t);if(i>0){var n=t.distance?t.distance:(t.speed?t.speed:this.speed)*this.gameRef.diffMulti;this.velocity={x:n/i*(t.x-this.x),y:n/i*(t.y-this.y)},this.x+=this.velocity.x;var o=s(this.velocity.x)*this.radius;!this.tileMap||this.tileMap.onMap({x:this.x+o,y:this.y})&&this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord({x:this.x+o,y:this.y})).walkable||(this.x-=this.velocity.x),this.y+=this.velocity.y;var a=s(this.velocity.y)*this.radius;!this.tileMap||this.tileMap.onMap({x:this.x,y:this.y+a})&&this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord({x:this.x,y:this.y+a})).walkable||(this.y-=this.velocity.y)}else this.velocity={x:0,y:0},e();this.meleeWeapon.moveTo(this),this.projectileWeapon.moveTo(this)},e.prototype.setTarget=function(t){this.target=t},e.prototype.updateSprite=function(){if(this.sprite.lastUpdate+this.sprite.updateDiff<this.gameRef.lastUpdate){if(this.sprite.frame++,this.sprite.frame>2&&(this.sprite.frame=0),this.sprite.lastUpdate=this.gameRef.lastUpdate,"melee"===this.mode){var t={x:this.meleeWeapon.x+this.meleeWeapon.hitBox.x-this.x,y:this.meleeWeapon.y+this.meleeWeapon.hitBox.y-this.y};Math.abs(t.x)>Math.abs(t.y)?(this.sprite.sy=2*this.sprite.dHeight,this.sprite.flipX=t.x<0,this.direction=t.x<0?"left":"right"):Math.abs(t.y)&&(this.sprite.flipX=!1,t.y>0?(this.sprite.sy=0,this.direction="down"):(this.sprite.sy=this.sprite.dHeight,this.direction="up"))}else Math.abs(this.velocity.x)>Math.abs(this.velocity.y)?(this.sprite.sy=2*this.sprite.dHeight,this.sprite.flipX=this.velocity.x<0,this.direction=this.velocity.x<0?"left":"right"):Math.abs(this.velocity.y)&&(this.sprite.flipX=!1,this.velocity.y>0?(this.sprite.sy=0,this.direction="down"):(this.sprite.sy=this.sprite.dHeight,this.direction="up"));this.sprite.sx=this.sprite.frame*this.sprite.dWidth}},e.prototype.draw=function(){var t=this;"up"===this.direction&&"melee"===this.mode&&this.meleeWeapon.draw(),"up"===this.direction&&"shoot"===this.mode&&this.projectileWeapon.draw(),f({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.x+(this.sprite.flipX?this.radius:-this.radius),y:this.gameRef.cameraPos.y+this.y-this.radius,a:0},(function(){d(t.sprite)})),"up"!==this.direction&&"melee"===this.mode&&this.meleeWeapon.draw(),"up"!==this.direction&&"shoot"===this.mode&&this.projectileWeapon.draw()},e.prototype.tearDown=function(){},e}(M);var vt=i(4716),wt=i(4226),At=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Rt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.radius=32,e.speed=3,e.width=64,e.height=64,e.objectKey="box",e.color="orange",e.velocity={x:0,y:0},e.lastSound=0,e.soundTimeDiff=500,e}return At(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(i){switch(i.label){case 0:return t=this,[4,g({c:this.gameRef.ctx,sprite:vt,sx:0,sy:0,sWidth:this.width,sHeight:this.height,dx:0,dy:0,dWidth:this.width,dHeight:this.height,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 1:return t.sprite=i.sent(),e=this,[4,this.gameRef.soundPlayer.loadSound(wt)];case 2:return e.dragSound=i.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){},e.prototype.update=function(){},e.prototype.handleDragNoise=function(){this.lastSound+this.soundTimeDiff<this.gameRef.lastUpdate&&(this.gameRef.soundPlayer.playSound(this.dragSound),this.lastSound=this.gameRef.lastUpdate)},e.prototype.moveTo=function(t,e){void 0===e&&(e=function(){});var i=l(this,t);if(i>0){var n=this.speed*this.gameRef.diffMulti;this.velocity={x:n/i*(t.x-this.x),y:n/i*(t.y-this.y)},this.x+=this.velocity.x;var o=s(this.velocity.x)*this.radius;!this.tileMap||this.tileMap.onMap({x:this.x+o,y:this.y})&&this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord({x:this.x+o,y:this.y})).walkable||(this.x-=this.velocity.x),this.y+=this.velocity.y;var a=s(this.velocity.y)*this.radius;!this.tileMap||this.tileMap.onMap({x:this.x,y:this.y+a})&&this.tileMap.getRoomFromCoord(this.tileMap.getMapCoord({x:this.x,y:this.y+a})).walkable||(this.y-=this.velocity.y),this.handleDragNoise()}else this.velocity={x:0,y:0},e()},e.prototype.draw=function(){var t=this;v({c:this.gameRef.ctx,x:this.x-this.width/2+this.gameRef.cameraPos.x,y:this.y-this.height/2+this.gameRef.cameraPos.y,width:this.width,height:this.height,fillColor:this.color}),f({c:this.gameRef.ctx,x:this.x-this.width/2+this.gameRef.cameraPos.x,y:this.y-this.height/2+this.gameRef.cameraPos.y,a:0},(function(){d(t.sprite)}))},e.prototype.tearDown=function(){},e}(M);var kt=i(5628),Ct=i(2602),Mt=i(9549),St=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),Wt=function(){return(Wt=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},Bt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.width=3200,e.height=3200,e.tileSize=64,e.tileMap=[],e.occupantRef={},e.visitedRooms={},e.generateRoomCount=6,e}return St(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e,i;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(n){switch(n.label){case 0:return t=this,[4,g({c:this.gameRef.ctx,sprite:kt,sx:0,sy:0,sWidth:this.tileSize,sHeight:this.tileSize,dx:0,dy:0,dWidth:this.tileSize,dHeight:this.tileSize,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 1:return t.floorSprite=n.sent(),e=this,[4,g({c:this.gameRef.ctx,sprite:Ct,sx:0,sy:0,sWidth:this.tileSize,sHeight:this.tileSize,dx:0,dy:0,dWidth:this.tileSize,dHeight:this.tileSize,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 2:return e.wallSprite=n.sent(),i=this,[4,g({c:this.gameRef.ctx,sprite:Mt,sx:0,sy:0,sWidth:this.tileSize,sHeight:this.tileSize,dx:0,dy:0,dWidth:this.tileSize,dHeight:this.tileSize,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 3:return i.grassSprite=n.sent(),this.occupantRef={},this.visitedRooms={},this.generateMap(),[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){},e.prototype.update=function(){},e.prototype.draw=function(){for(var t=this,e=Math.floor(-this.gameRef.cameraPos.y/this.tileSize)>0?Math.floor(-this.gameRef.cameraPos.y/this.tileSize):0,i=this.tileMap.length<Math.ceil((-this.gameRef.cameraPos.y+this.gameRef.gameHeight)/this.tileSize)?this.tileMap.length:Math.ceil((-this.gameRef.cameraPos.y+this.gameRef.gameHeight)/this.tileSize),n=Math.floor(-this.gameRef.cameraPos.x/this.tileSize)>0?Math.floor(-this.gameRef.cameraPos.x/this.tileSize):0,o=this.tileMap[0].length<Math.ceil((-this.gameRef.cameraPos.x+this.gameRef.gameWidth)/this.tileSize)?this.tileMap[0].length:Math.ceil((-this.gameRef.cameraPos.x+this.gameRef.gameWidth)/this.tileSize),a=function(e){for(var i=function(i){f({c:s.gameRef.ctx,x:Math.round(s.tileSize*i+s.gameRef.cameraPos.x),y:Math.round(s.tileSize*e+s.gameRef.cameraPos.y),a:0},(function(){t.grassSprite.sx=t.tileMap[e][i].sx*t.tileSize,t.grassSprite.sy=t.tileMap[e][i].sy*t.tileSize,d(t.grassSprite)}))},a=n;a<o;a++)i(a)},s=this,r=e;r<i;r++)a(r)},e.prototype.tearDown=function(){},e.prototype.getMapCoord=function(t){return{x:Math.floor(t.x/this.tileSize),y:Math.floor(t.y/this.tileSize)}},e.prototype.getRoomFromCoord=function(t){return this.tileMap[t.y][t.x]},e.prototype.onMap=function(t){var e=t.x,i=t.y;return e>=0&&e<this.width&&i>=0&&i<this.height},e.prototype.removeOccupant=function(t){if(this.onMap(t)){var e=this.getMapCoord(t),i=e.x,n=e.y;if(this.occupantRef[t.objectKey]){var o=this.getMapCoord(this.occupantRef[t.objectKey]),a=o.x,s=o.y;delete this.tileMap[s][a].occupants[t.objectKey]}delete this.tileMap[n][i].occupants[t.objectKey],Object.keys(this.tileMap[n][i].occupants)&&1==this.tileMap[n][i].color&&this.pfGrid.setWalkableAt(i,n,!0)}},e.prototype.addOccupant=function(t,e){if(void 0===e&&(e={}),this.onMap(t)){var i=this.getMapCoord(t),n=i.x,o=i.y;this.occupantRef[t.objectKey]=t,this.tileMap[o][n].occupants[t.objectKey]=t,1==this.tileMap[o][n].color&&e.blockSpot&&this.pfGrid.setWalkableAt(n,o,!1)}},e.prototype.generateMap=function(){for(var t=this,e=[{x:0,y:0,w:8,h:8,key:"room-1"}],i=0,n=0,o=8,s=0,r=8,h=function(){i++;for(var t={x:e[e.length-1].x,y:e[e.length-1].y,w:8+a(5),h:8+a(5),key:"room-"+(e.length+1)},h=a(2)>0?"x":"y",l=a(2)>0?1:-1;e.find((function(e){return i=t,n={x:e.x-1,y:e.y-1,w:e.w+1,h:e.h+1},!(i.y+i.h<n.y||i.y>n.y+n.h||i.x+i.w<n.x||i.x>n.x+n.w);var i,n}));)t[h]+=l;s=t.y<s?t.y:s,n=t.x<n?t.x:n,o=t.x+t.w>o?t.x+t.w:o,r=t.y+t.h>r?t.y+t.h:r,e.push(t)};e.length<this.generateRoomCount&&i<100;)h();this.roomList=e.map((function(t){return Wt(Wt({},t),{x:t.x-n+3,y:t.y-s+3})})),this.width=this.tileSize*(Math.abs(n)+o+6),this.height=this.tileSize*(Math.abs(s)+r+6);for(var l=this.width/this.tileSize,c=this.height/this.tileSize,u=[],p=[[1,3],[2,3],[0,4],[1,4],[2,4],[0,5],[1,5],[2,5]],f=0;f<c;f++){for(var d=[],y=0;y<l;y++){var g=p[a(8)],m=g[0],b=g[1];d.push({color:0,walkable:!1,occupants:{},roomKey:"",sx:m,sy:b})}u.push(d)}this.tileMap=u,this.roomList.map((function(e,i){for(var n=0,o=e.w-1,s=e.h-1,r=e.y;r<e.y+e.h;r++){for(var h=0,l=e.x;l<e.x+e.w;l++)t.tileMap[r][l].color=1,t.tileMap[r][l].walkable=!0,t.tileMap[r][l].roomKey=e.key,t.tileMap[r][l].sx=0,t.tileMap[r][l].sy=3,0===h&&0===n?(t.tileMap[r][l].sx=0,t.tileMap[r][l].sy=0):0===n&&h!==o?(t.tileMap[r][l].sx=1,t.tileMap[r][l].sy=0):0===n&&h===o?(t.tileMap[r][l].sx=2,t.tileMap[r][l].sy=0):0===h&&n!==s?(t.tileMap[r][l].sx=0,t.tileMap[r][l].sy=1):h===o&&n!==s?(t.tileMap[r][l].sx=2,t.tileMap[r][l].sy=1):0===h&&n===s?(t.tileMap[r][l].sx=0,t.tileMap[r][l].sy=2):h!==o&&n===s?(t.tileMap[r][l].sx=1,t.tileMap[r][l].sy=2):h===o&&n===s?(t.tileMap[r][l].sx=2,t.tileMap[r][l].sy=2):a(80)>75?(t.tileMap[r][l].sx=1,t.tileMap[r][l].sy=1):a(80)>75&&(t.tileMap[r][l].sx=a(3),t.tileMap[r][l].sy=6,t.tileMap[r][l].walkable=!1),h++;n++}if(i>0)for(var c=t.roomList[i-1],u={x:Math.floor((2*e.x+e.w)/2),y:Math.floor((2*e.y+e.h)/2)},p={x:Math.floor((2*c.x+c.w)/2),y:Math.floor((2*c.y+c.h)/2)};u.x!==p.x||u.y!==p.y;){var f=p.x-u.x!=0?(p.x-u.x)/Math.abs(p.x-u.x):0,d=p.y-u.y!=0?(p.y-u.y)/Math.abs(p.y-u.y):0;0!==f&&0!==d?a(2)>0?u.x+=f:u.y+=d:(u.x+=f,u.y+=d),t.tileMap[u.y][u.x].color=1,t.tileMap[u.y][u.x].walkable=!0,t.tileMap[u.y][u.x].sx=0,t.tileMap[u.y][u.x].sy=3}})),this.pfGrid=new(H().Grid)(Math.ceil(l),Math.ceil(c)),this.tileMap.forEach((function(e,i){e.forEach((function(e,n){t.pfGrid.setWalkableAt(n,i,e.walkable)}))}))},e}(M),Pt=i(5034),Tt=i(7847),Ot=i(8732),_t=i(4582),jt=i(5396),zt=i(9379),Lt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),Ht=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.radius=12,e.entityTag="pickup",e.active=!1,e.pickupColor="red",e.onPickup=function(){return null},e.pickupNoises=[],e.sprites=[jt,zt],e.spriteChoice=0,e}return Lt(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e,i,n;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(o){switch(o.label){case 0:this.pickupNoises=[],t=[Ot,_t],e=0,o.label=1;case 1:return e<2?[4,this.gameRef.soundPlayer.loadSound(t[e])]:[3,4];case 2:i=o.sent(),this.pickupNoises.push(i),o.label=3;case 3:return e++,[3,1];case 4:return n=this,[4,g({c:this.gameRef.ctx,sprite:this.sprites[this.spriteChoice],sx:0,sy:0,sWidth:12,sHeight:12,dx:0,dy:0,dWidth:24,dHeight:24,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 5:return n.sprite=o.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){},e.prototype.setOnPickup=function(t){this.onPickup=t},e.prototype.playPickupNoise=function(){this.gameRef.soundPlayer.playSound(this.pickupNoises[a(2)])},e.prototype.update=function(){},e.prototype.draw=function(){var t=this;this.active&&f({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.x+(this.sprite.flipX?this.radius:-this.radius),y:this.gameRef.cameraPos.y+this.y-this.radius,a:0},(function(){d(t.sprite)}))},e.prototype.tearDown=function(){},e}(M),Dt=i(4151),Et=i(8385),Nt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const It=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.radius=32,e.speed=3,e.health=200,e.dead=!1,e.deathTime=0,e.deathTimer=4e3,e.swingCoolDown=1e3,e.lastSwing=0,e}return Nt(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e,i,n,o;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(a){switch(a.label){case 0:return this.deathTimer=4e3,this.speed=3,this.dead=!1,t=this,[4,g({c:this.gameRef.ctx,sprite:Dt,sx:0,sy:0,sWidth:72,sHeight:72,dx:0,dy:0,dWidth:72,dHeight:72,frame:0,lastUpdate:0,updateDiff:1e3/60*10})];case 1:return t.sprite=a.sent(),this.meleeWeapon=new st({key:"melee-weapon-boss",gameRef:this.gameRef}),this.meleeWeapon.radius=36,[4,this.meleeWeapon.preload()];case 2:a.sent(),this.noises=[],e=[X,Y,V],i=0,a.label=3;case 3:return i<3?[4,this.gameRef.soundPlayer.loadSound(e[i])]:[3,6];case 4:n=a.sent(),this.noises.push(n),a.label=5;case 5:return i++,[3,3];case 6:return o=this,[4,this.gameRef.soundPlayer.loadSound(Et)];case 7:return o.ressurectionYell=a.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){this.baddieDefaultInitialize(),this.meleeWeapon.initialize(),this.meleeWeapon.yOffset=-10,this.meleeWeapon.moveTo(this)},e.prototype.handleRessurection=function(){this.gameRef.lastUpdate>this.deathTime+this.deathTimer&&(this.healthBar.tick(this.health),this.dead=!1,this.gameRef.soundPlayer.playSound(this.ressurectionYell),this.speed+=.1,this.deathTimer+=1e3)},e.prototype.weaponHitBox=function(){return{x:this.meleeWeapon.hitBox.x+this.meleeWeapon.x,y:this.meleeWeapon.hitBox.y+this.meleeWeapon.y,entityTag:"baddieWeapon",objectKey:this.objectKey+"-weapon",radius:this.meleeWeapon.hitBoxRadius,active:!this.dead}},e.prototype.handleSwing=function(){this.gameRef.lastUpdate>this.lastSwing+this.swingCoolDown&&(this.meleeWeapon.target={x:this.x+(a(2)>0?-300:300),y:this.y+(a(2)>0?-300:300)},this.lastSwing=this.gameRef.lastUpdate)},e.prototype.updateSprite=function(){this.sprite.lastUpdate+this.sprite.updateDiff<this.gameRef.lastUpdate&&(this.sprite.frame++,this.sprite.frame>1&&(this.sprite.frame=0),this.sprite.lastUpdate=this.gameRef.lastUpdate,Math.abs(this.velocity.x)>0||Math.abs(this.velocity.y)>0?this.sprite.sy=this.sprite.dHeight:this.sprite.sy=this.sprite.frame*this.sprite.dHeight,this.sprite.sx=this.sprite.frame*this.sprite.dWidth)},e.prototype.drawArm=function(t){void 0===t&&(t={x:0,y:0});var e=this.gameRef.ctx,i=this.gameRef.cameraPos,n={x:this.meleeWeapon.x+this.meleeWeapon.handPos.x,y:this.meleeWeapon.y+this.meleeWeapon.handPos.y},o={x:this.x+t.x,y:this.y+t.y};e.beginPath(),e.moveTo(i.x+o.x,i.y+o.y),e.quadraticCurveTo(i.x+(n.x+o.x)/2,i.y+(n.y+o.y)/2+Math.min(20,l(n,o)),i.x+n.x,i.y+n.y),e.strokeStyle="#703429",e.lineWidth=10,e.stroke()},e.prototype.update=function(){if(0===this.healthBar.current)return!1===this.dead&&(this.pathList=[],this.chasing=!1,this.dead=!0,this.deathTime=this.gameRef.lastUpdate),void this.handleRessurection();this.updateSprite(),(this.tileMap.visitedRooms[this.spawnRoom]||this.healthBar.current!==this.healthBar.max)&&(this.meleeWeapon.onTarget&&this.handleSwing(),this.meleeWeapon.update(),this.chaseTarget(),this.meleeWeapon.moveTo(this),this.healthBar.x=this.x,this.healthBar.y=this.y)},e.prototype.draw=function(){var t=this;f({c:this.gameRef.ctx,x:(this.dead?this.sprite.dHeight:0)+this.gameRef.cameraPos.x+this.x+(this.sprite.flipX?this.sprite.dWidth/2:-this.sprite.dWidth/2),y:this.gameRef.cameraPos.y+this.y-this.sprite.dHeight/2,a:this.dead?90:0},(function(){d(t.sprite)})),this.dead||(this.drawArm({x:-22,y:-8}),this.drawArm({x:22,y:-8})),this.meleeWeapon.draw(),this.healthBar.current>0&&this.healthBar.current<this.health&&this.healthBar.draw()},e}(Q);var Ut=i(2039),Kt=i(8200),Ft=i(2430),Gt=i(8287),qt=i(3170),Xt=i(3996),Yt=i(1511),Vt=i(9718),Jt=i(5957),Qt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),Zt=function(){return(Zt=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},$t=function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}},te=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.baddies=[],e.pickups=[],e.levelWidth=3200,e.levelHeight=3200,e.activeSound={playing:!1,soundRef:null},e.bossRoom=!1,e}return Qt(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e,i,n,o,s,r,h,l,c,u,p,f,d,y,m,b,x,v,w,A,R,k,C,M,S,W,B,P=this;return $t(this,(function(T){switch(T.label){case 0:return this.gameRef.drawLoading("Interface"),t=this,[4,g({c:this.gameRef.ctx,sprite:Jt,sx:0,sy:0,sWidth:160,sHeight:72,dx:0,dy:0,dWidth:160,dHeight:72,frame:0})];case 1:return[4,T.sent()];case 2:return t.healthSprite=T.sent(),e=this,[4,g({c:this.gameRef.ctx,sprite:it,sx:0,sy:0,sWidth:40,sHeight:20,dx:0,dy:0,dWidth:80,dHeight:40,frame:0})];case 3:return[4,T.sent()];case 4:return e.swingSprite=T.sent(),i=this,[4,g({c:this.gameRef.ctx,sprite:rt,sx:0,sy:0,sWidth:12,sHeight:12,dx:0,dy:0,dWidth:36,dHeight:36,frame:0})];case 5:return i.flingSprite=T.sent(),n={c:this.gameRef.ctx,sx:0,sy:0,sWidth:94,sHeight:24,dx:0,dy:0,dWidth:96,dHeight:24,frame:0},o=this,[4,g(Zt({sprite:Kt},n))];case 6:return o.wasdSprite=T.sent(),s=this,[4,g(Zt({sprite:Ft},n))];case 7:return s.arrowSprite=T.sent(),r=this,[4,g(Zt({sprite:Ut},n))];case 8:return r.moveSprite=T.sent(),h=this,[4,g(Zt({sprite:Gt},n))];case 9:return h.aimSprite=T.sent(),l=this,[4,g(Zt({sprite:Yt},n))];case 10:return l.swapSprite=T.sent(),c=this,[4,g(Zt({sprite:Xt},n))];case 11:return c.buttonXSprite=T.sent(),u=this,[4,g({c:this.gameRef.ctx,sprite:qt,sx:0,sy:0,sWidth:140,sHeight:24,dx:0,dy:0,dWidth:140,dHeight:24,frame:0})];case 12:return u.attackSprite=T.sent(),p=this,[4,g({c:this.gameRef.ctx,sprite:Vt,sx:0,sy:0,sWidth:24,sHeight:24,dx:0,dy:0,dWidth:24,dHeight:24,frame:0})];case 13:return p.mouseSprite=T.sent(),this.gameRef.drawLoading("Map"),this.tileMap=new Bt({key:"map-1",gameRef:this.gameRef}),this.tileMap.tileSize=64,[4,this.tileMap.preload()];case 14:return T.sent(),this.levelWidth=this.tileMap.width,this.levelHeight=this.tileMap.height,this.bossRoom=!1,f=function(t){for(var e={x:0,y:0},i=!1;!i;)e={x:t.x+a(t.w),y:t.y+a(t.h)},i=P.tileMap.tileMap[e.y][e.x].walkable;return e},this.gameRef.drawLoading("Entities"),this.player=new xt({key:"player",gameRef:this.gameRef}),d=f(this.tileMap.roomList[0]),this.player.x=d.x*this.tileMap.tileSize+this.tileMap.tileSize/2,this.player.y=d.y*this.tileMap.tileSize+this.tileMap.tileSize/2,this.player.tileMap=this.tileMap,[4,this.player.preload()];case 15:return T.sent(),this.box=new Rt({key:"box",gameRef:this.gameRef}),y=f(this.tileMap.roomList[this.tileMap.roomList.length-1]),this.box.x=y.x*this.tileMap.tileSize+this.tileMap.tileSize/2,this.box.y=y.y*this.tileMap.tileSize+this.tileMap.tileSize/2,this.box.tileMap=this.tileMap,[4,this.box.preload()];case 16:return T.sent(),this.leader=new tt({key:"leader",gameRef:this.gameRef}),m=f(this.tileMap.roomList[0]),this.leader.x=m.x*this.tileMap.tileSize+this.tileMap.tileSize/2,this.leader.y=m.y*this.tileMap.tileSize+this.tileMap.tileSize/2,[4,this.leader.preload()];case 17:T.sent(),this.pickups=[],b=1,A=1,T.label=18;case 18:if(!(A<this.tileMap.roomList.length))return[3,23];x=function(t){var e,i;return $t(this,(function(t){switch(t.label){case 0:return e=new Ht({key:"pickup-"+b,gameRef:v.gameRef}),i=f(v.tileMap.roomList[A]),e.x=i.x*v.tileMap.tileSize+v.tileMap.tileSize/2,e.y=i.y*v.tileMap.tileSize+v.tileMap.tileSize/2,e.spawnRoom=v.tileMap.roomList[A].key,a(2)>0?(e.setOnPickup((function(){P.player.healthBar.tick(25,!0),e.active=!1,e.playPickupNoise()})),e.spriteChoice=1,e.pickupColor="yellow"):e.setOnPickup((function(){P.player.poopHealthBar.tick(50,!0),e.active=!1,e.playPickupNoise()})),[4,e.preload()];case 1:return t.sent(),e.active=!0,v.tileMap.addOccupant(e),v.pickups.push(e),b++,[2]}}))},v=this,R=0,T.label=19;case 19:return R<=A/2?[5,x(R)]:[3,22];case 20:T.sent(),T.label=21;case 21:return R++,[3,19];case 22:return A++,[3,18];case 23:this.baddies=[],w=0,A=1,T.label=24;case 24:if(!(A<this.tileMap.roomList.length))return[3,29];R=0,T.label=25;case 25:return R<=A/2?[4,(k=new Q({key:"baddie-"+w,gameRef:this.gameRef})).preload()]:[3,28];case 26:T.sent(),C=f(this.tileMap.roomList[A]),k.x=C.x*this.tileMap.tileSize+this.tileMap.tileSize/2,k.y=C.y*this.tileMap.tileSize+this.tileMap.tileSize/2,k.spawnRoom=this.tileMap.roomList[A].key,this.baddies.push(k),w++,T.label=27;case 27:return R++,[3,25];case 28:return A++,[3,24];case 29:return this.bossBaddie=new It({key:"baddie-"+w,gameRef:this.gameRef}),[4,this.bossBaddie.preload()];case 30:return T.sent(),M=this.tileMap.roomList.length-1,S=f(this.tileMap.roomList[M]),this.bossBaddie.x=S.x*this.tileMap.tileSize+this.tileMap.tileSize/2,this.bossBaddie.y=S.y*this.tileMap.tileSize+this.tileMap.tileSize/2,this.bossBaddie.spawnRoom=this.tileMap.roomList[M].key,this.bossRoomTag=this.tileMap.roomList[this.tileMap.roomList.length-1].key,this.moveKnob=new z({key:"move-knob",gameRef:this.gameRef}),this.aimKnob=new z({key:"aim-knob",gameRef:this.gameRef}),this.positionKnobs(),this.gameRef.drawLoading("Music"),W=this,[4,this.gameRef.soundPlayer.loadSound(Pt)];case 31:return W.bgSong=T.sent(),B=this,[4,this.gameRef.soundPlayer.loadSound(Tt)];case 32:return B.bgSong2=T.sent(),this.activeSound.playing=!1,[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){var t=this;this.player.initialize(),this.baddies.map((function(e){e.tileMap=t.tileMap,e.target=t.player,e.initialize()})),this.bossBaddie.tileMap=this.tileMap,this.bossBaddie.target=this.player,this.bossBaddie.initialize(),this.moveKnob.initialize(),this.aimKnob.initialize(),this.swapWeaponBtn=new W({key:"swap-wpn-button",gameRef:this.gameRef}),this.swapWeaponBtn.fillColor="#ce192b",this.swapWeaponBtn.x=this.gameRef.gameWidth-116,this.swapWeaponBtn.y=0,this.swapWeaponBtn.height=90,this.swapWeaponBtn.buttonText="swap",this.swapWeaponBtn.width=100,this.swapWeaponBtn.clickFunction=function(){t.player.switchMode("melee"===t.player.mode?"shoot":"melee")}},e.prototype.update=function(){var t=this;this.handleSounds(),this.leader.update(),this.movePlayer(),this.swapWeaponBtn.update(),this.player.update(),this.tileMap.removeOccupant(this.box),this.box.update(),this.tileMap.removeOccupant(this.bossBaddie),this.tileMap.removeOccupant(this.bossBaddie.weaponHitBox()),this.baddies.map((function(e){t.tileMap.removeOccupant(e)})),this.bossBaddie.update(),this.bossBaddie.healthBar.current>0&&this.tileMap.addOccupant(this.bossBaddie),this.baddies.map((function(e){e.healthBar.current>0&&(e.update(),t.tileMap.addOccupant(e))})),this.tileMap.addOccupant(this.bossBaddie.weaponHitBox()),this.tileMap.addOccupant(this.box),this.updateCamera(),l(this.leader,this.player)<300?this.leader.message="Bring Bananas!":this.leader.message="",l(this.leader,this.box)<300?this.leader.message="Hurry!":l(this.leader,this.box)<500&&(this.leader.message="Almost Here!"),l(this.leader,this.box)<this.leader.radius+this.box.radius&&this.gameRef.loadLevel("credits-screen"),this.player.healthBar.current<1&&this.gameRef.loadLevel("start-screen")},e.prototype.movePlayer=function(){var t=this.gameRef.pressedKeys,e=this.player.baseSpeed,i=0,n=0;if((t.KeyA||t.ArrowLeft)&&(i-=e),(t.KeyD||t.ArrowRight)&&(i+=e),(t.KeyW||t.ArrowUp)&&(n-=e),(t.KeyS||t.ArrowDown)&&(n+=e),t.KeyX&&this.player.switchMode("melee"===this.player.mode?"shoot":"melee"),this.moveKnob.update(),this.moveKnob.knobActive){var o=this.player.speed*this.gameRef.diffMulti;i+=this.moveKnob.knobCoord.x/this.moveKnob.maxOffset*o,n+=this.moveKnob.knobCoord.y/this.moveKnob.maxOffset*o}if(this.player.moveTo({x:this.player.x+i,y:this.player.y+n}),this.aimKnob.update(),this.aimKnob.knobActive){var a=this.player,s=a.x,r=a.y;this.player.setTarget({x:this.aimKnob.knobCoord.x/this.aimKnob.maxOffset*1e3+s,y:this.aimKnob.knobCoord.y/this.aimKnob.maxOffset*1e3+r}),this.player.attacking=!0}else this.gameRef.touchMode?this.player.attacking=!1:(this.player.attacking=this.gameRef.mouseInfo.mouseDown&&!this.swapWeaponBtn.hovered,this.player.setTarget({x:this.gameRef.mouseInfo.x-this.gameRef.cameraPos.x,y:this.gameRef.mouseInfo.y-this.gameRef.cameraPos.y}))},e.prototype.handleSounds=function(){var t=this;this.gameRef.soundPlayer.enabled&&(!this.bossRoom&&this.tileMap.visitedRooms[this.bossRoomTag]&&(this.bossRoom=!0,this.activeSound.soundRef.stop()),0==this.activeSound.playing&&(this.activeSound.soundRef=this.gameRef.soundPlayer.playSound(this.bossRoom?this.bgSong2:this.bgSong,(function(){t.activeSound.playing=!1})),this.activeSound.playing=!0))},e.prototype.updateCamera=function(){var t=this.player;this.gameRef.cameraPos={x:-(t.x-this.gameRef.gameWidth/2),y:-(t.y-this.gameRef.gameHeight/2)},this.gameRef.gameWidth<this.levelWidth?(this.gameRef.cameraPos.x>0&&(this.gameRef.cameraPos.x=0),this.gameRef.cameraPos.x-this.gameRef.gameWidth<-1*this.levelWidth&&(this.gameRef.cameraPos.x=-(this.levelWidth-this.gameRef.gameWidth))):this.gameRef.cameraPos.x=(this.gameRef.gameWidth-this.levelWidth)/2,this.gameRef.gameHeight<this.levelHeight?(this.gameRef.cameraPos.y>0&&(this.gameRef.cameraPos.y=0),this.gameRef.cameraPos.y-this.gameRef.gameHeight<-1*this.levelHeight&&(this.gameRef.cameraPos.y=-(this.levelHeight-this.gameRef.gameHeight))):this.gameRef.cameraPos.y=(this.gameRef.gameHeight-this.levelHeight)/2},e.prototype.positionKnobs=function(){this.moveKnob.width=this.moveKnob.width>this.gameRef.gameWidth/2?this.gameRef.gameWidth/2-5:this.moveKnob.width,this.moveKnob.x=0,this.moveKnob.y=this.gameRef.gameHeight-this.moveKnob.height,this.aimKnob.width=this.aimKnob.width>this.gameRef.gameWidth/2?this.gameRef.gameWidth/2-5:this.aimKnob.width,this.aimKnob.x=this.gameRef.gameWidth-this.aimKnob.width,this.aimKnob.y=this.gameRef.gameHeight-this.moveKnob.height},e.prototype.onResize=function(){this.positionKnobs(),this.swapWeaponBtn.x=this.gameRef.gameWidth-116},e.prototype.drawInterface=function(){var t=this;if(this.gameRef.touchMode?(this.moveKnob.draw(),this.aimKnob.draw(),f({c:this.gameRef.ctx,x:this.moveKnob.width/2-48,y:this.gameRef.gameHeight-40,a:0},(function(){d(t.moveSprite)})),f({c:this.gameRef.ctx,x:this.aimKnob.x+this.moveKnob.width/2-48,y:this.gameRef.gameHeight-40,a:0},(function(){d(t.aimSprite)}))):(f({c:this.gameRef.ctx,x:60,y:this.gameRef.gameHeight-120,a:0},(function(){d(t.moveSprite)})),f({c:this.gameRef.ctx,x:60,y:this.gameRef.gameHeight-80,a:0},(function(){d(t.wasdSprite)})),f({c:this.gameRef.ctx,x:60,y:this.gameRef.gameHeight-40,a:0},(function(){d(t.arrowSprite)})),f({c:this.gameRef.ctx,x:this.gameRef.gameWidth-178,y:this.gameRef.gameHeight-120,a:0},(function(){d(t.aimSprite)})),f({c:this.gameRef.ctx,x:this.gameRef.gameWidth-200,y:this.gameRef.gameHeight-80,a:0},(function(){d(t.attackSprite)})),f({c:this.gameRef.ctx,x:this.gameRef.gameWidth-142,y:this.gameRef.gameHeight-40,a:0},(function(){d(t.mouseSprite)}))),"shoot"===this.player.mode&&(f({c:this.gameRef.ctx,x:this.gameRef.gameWidth-100,y:40,a:0},(function(){d(t.swingSprite)})),f({c:this.gameRef.ctx,x:this.gameRef.gameWidth-116,y:10,a:0},(function(){d(t.swapSprite)}))),f({c:this.gameRef.ctx,x:10,y:10,a:0},(function(){d(t.healthSprite)})),this.player.healthBar.current>0){var e=this.player.healthBar.current/this.player.healthBar.max;v({c:this.gameRef.ctx,x:90,y:18,width:72*e,height:8,fillColor:e<.5?"red":e<.8?"orange":"yellow"})}this.player.poopHealthBar.current>0&&(e=this.player.poopHealthBar.current/this.player.poopHealthBar.max,v({c:this.gameRef.ctx,x:106,y:42,width:56*e,height:8,fillColor:"#d89b6d"})),"melee"===this.player.mode&&this.player.poopHealthBar.current>0&&(f({c:this.gameRef.ctx,x:this.gameRef.gameWidth-86,y:40,a:0},(function(){t.gameRef.ctx.globalAlpha=t.player.poopHealthBar.current/t.player.poopHealthBar.max,d(t.flingSprite),t.gameRef.ctx.globalAlpha=1})),f({c:this.gameRef.ctx,x:this.gameRef.gameWidth-116,y:10,a:0},(function(){d(t.swapSprite)})))},e.prototype.drawShadows=function(){var t=this;this.gameRef.ctx.globalAlpha=.3,x({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.leader.x,y:this.gameRef.cameraPos.y+this.leader.y+this.leader.sprite.dHeight/2,radiusX:this.leader.radius,radiusY:this.leader.radius/2,fillColor:"black"}),x({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.player.x,y:this.gameRef.cameraPos.y+this.player.y+this.player.radius,radiusX:this.player.radius,radiusY:this.player.radius/3,fillColor:"black"}),this.pickups.map((function(e){e.active&&x({c:t.gameRef.ctx,x:t.gameRef.cameraPos.x+e.x,y:t.gameRef.cameraPos.y+e.y+e.radius,radiusX:e.radius,radiusY:e.radius/3,fillColor:"black"})})),this.baddies.map((function(e){e.healthBar.current>0&&x({c:t.gameRef.ctx,x:t.gameRef.cameraPos.x+e.x,y:t.gameRef.cameraPos.y+e.y+e.radius,radiusX:e.radius,radiusY:e.radius/3,fillColor:"black"})})),x({c:this.gameRef.ctx,x:this.gameRef.cameraPos.x+this.bossBaddie.x,y:this.gameRef.cameraPos.y+this.bossBaddie.y+(this.bossBaddie.dead?0:this.bossBaddie.sprite.dHeight/2),radiusX:this.bossBaddie.radius,radiusY:this.bossBaddie.dead?this.bossBaddie.radius:this.bossBaddie.radius/2,fillColor:"black"}),this.gameRef.ctx.globalAlpha=1},e.prototype.draw=function(){this.gameRef.ctx.beginPath(),this.gameRef.ctx.rect(0,0,this.gameRef.gameWidth,this.gameRef.gameHeight),this.gameRef.ctx.fillStyle="#777",this.gameRef.ctx.fill(),this.tileMap.draw(),this.drawShadows(),this.leader.draw(),this.pickups.map((function(t){t.active&&t.draw()})),this.player.draw(),this.box.draw(),this.baddies.map((function(t){t.healthBar.current>0&&t.draw()})),this.bossBaddie.draw(),this.drawInterface()},e.prototype.tearDown=function(){this.activeSound.playing&&this.activeSound.soundRef&&this.activeSound.soundRef.stop()},e}(B),ee=i(6440),ie=i(1521),ne=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),oe=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.activeSound={playing:!1,soundRef:null},e.levelLoadedTime=0,e.levelLoadedDelay=1e3,e}return ne(e,t),e.prototype.preload=function(){return t=this,e=void 0,n=function(){var t,e;return function(t,e){var i,n,o,a,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(a){return function(r){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,r])}}}(this,(function(i){switch(i.label){case 0:return this.gameRef.drawLoading("Logo"),t=this,[4,g({c:this.gameRef.ctx,sprite:ie,sx:0,sy:0,sWidth:284,sHeight:72,dx:0,dy:0,dWidth:284,dHeight:72,frame:0})];case 1:return[4,i.sent()];case 2:return t.logoSprite=i.sent(),this.gameRef.drawLoading("Music"),e=this,[4,this.gameRef.soundPlayer.loadSound(ee)];case 3:return e.bgSong=i.sent(),this.activeSound.playing=!1,[2]}}))},new((i=void 0)||(i=Promise))((function(o,a){function s(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,r)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n},e.prototype.initialize=function(){var t=this;this.startButton=new W({key:"start-button",gameRef:this.gameRef}),this.startButton.fillColor="yellow",this.startButton.hoverColor="orange",this.startButton.textColor="brown",this.startButton.x=100,this.startButton.y=this.gameRef.gameHeight-200,this.startButton.buttonText="Start Run",this.startButton.width=this.gameRef.gameWidth-200,this.startButton.clickFunction=function(){t.gameRef.loadLevel("level-1")},this.creditsButton=new W({key:"credits-button",gameRef:this.gameRef}),this.creditsButton.fillColor="yellow",this.creditsButton.hoverColor="orange",this.creditsButton.textColor="brown",this.creditsButton.x=100,this.creditsButton.y=this.gameRef.gameHeight-135,this.creditsButton.buttonText="Credits",this.creditsButton.width=this.gameRef.gameWidth-200,this.creditsButton.clickFunction=function(){t.gameRef.loadLevel("credits-screen")},this.soundButton=new W({key:"sound-button",gameRef:this.gameRef}),this.soundButton.fillColor="yellow",this.soundButton.hoverColor="orange",this.soundButton.textColor="brown",this.soundButton.x=100,this.soundButton.y=this.gameRef.gameHeight-70,this.soundButton.buttonText=(this.gameRef.soundPlayer.enabled?"Disable":"Enable")+" Sound",this.soundButton.width=this.gameRef.gameWidth-200,this.soundButton.clickFunction=function(){t.activeSound.playing&&t.activeSound.soundRef&&t.activeSound.soundRef.stop&&t.activeSound.soundRef.stop(),t.gameRef.soundPlayer.enabled=!t.gameRef.soundPlayer.enabled,t.soundButton.buttonText=(t.gameRef.soundPlayer.enabled?"Disable":"Enable")+" Sound",t.activeSound.playing=!1},this.levelLoadedTime=this.gameRef.lastUpdate},e.prototype.handleSounds=function(){var t=this;this.gameRef.soundPlayer.enabled&&0==this.activeSound.playing&&(this.activeSound.soundRef=this.gameRef.soundPlayer.playSound(this.bgSong,(function(){t.activeSound.playing=!1})),this.activeSound.playing=!0)},e.prototype.update=function(){this.updateBg(),this.handleSounds(),this.gameRef.lastUpdate>this.levelLoadedTime+this.levelLoadedDelay&&(this.startButton.update(),this.soundButton.update(),this.creditsButton.update())},e.prototype.updateBg=function(){},e.prototype.onResize=function(){this.startButton.y=this.gameRef.gameHeight-200,this.startButton.width=this.gameRef.gameWidth-200,this.creditsButton.y=this.gameRef.gameHeight-135,this.creditsButton.width=this.gameRef.gameWidth-200,this.soundButton.y=this.gameRef.gameHeight-70,this.soundButton.width=this.gameRef.gameWidth-200},e.prototype.drawBg=function(){},e.prototype.draw=function(){var t=this;this.gameRef.ctx.beginPath(),this.gameRef.ctx.rect(0,0,this.gameRef.gameWidth,this.gameRef.gameHeight),this.gameRef.ctx.fillStyle="#799b1f",this.gameRef.ctx.fill(),this.drawBg(),this.startButton.draw(),this.soundButton.draw(),this.creditsButton.draw(),f({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2-this.logoSprite.dWidth/2,y:this.gameRef.gameHeight/4-this.logoSprite.dHeight/2-20,a:0},(function(){d(t.logoSprite)}))},e.prototype.tearDown=function(){this.startButton.tearDown(),this.soundButton.tearDown(),this.creditsButton.tearDown(),this.activeSound.playing&&this.activeSound.soundRef&&this.activeSound.soundRef.stop()},e}(B),ae=document.getElementById("start-game"),se=document.getElementById("game-description"),re=document.getElementById("audio-b");ae&&re&&re&&ae.addEventListener("click",(function(){var t;se.remove(),re.play(),(t=new C({canvasElementId:"game-container",width:window.innerWidth,height:window.innerHeight,levels:[{key:"start-screen",level:oe},{key:"credits-screen",level:O},{key:"level-1",level:te}]})).enableMouse(),t.enableKeyboard(),t.start(),ae.remove(),setTimeout((function(){re.remove()}),500)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,