(()=>{"use strict";var t={566:(t,e,n)=>{n.d(e,{Z:()=>s});var i=n(15),r=n.n(i),o=n(645),a=n.n(o)()(r());a.push([t.id,"#game-container{position:absolute;top:0;left:0;padding:0;margin:0;width:100vw;height:100vh;display:flex;align-content:center;align-items:center;justify-content:center;overflow-y:hidden}#game-container canvas{-webkit-tap-highlight-color:rgba(0,0,0,0);user-select:none;touch-action:none;-webkit-user-select:none;-moz-user-select:none;margin:0;padding:0}body{overflow-y:hidden}","",{version:3,sources:["webpack://./src/assets/style.scss"],names:[],mappings:"AAAA,gBACI,iBAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,QAAA,CACA,WAAA,CACA,YAAA,CACA,YAAA,CACA,oBAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CAEA,uBAEE,yCAAA,CACA,gBAAA,CACA,iBAAA,CACA,wBAAA,CACA,qBAAA,CACA,QAAA,CACA,SAAA,CAIN,KACE,iBAAA",sourcesContent:["#game-container {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    padding: 0;\r\n    margin: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    align-content: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow-y: hidden;\r\n\r\n    canvas {\r\n      // border: 1px solid;\r\n      -webkit-tap-highlight-color: rgba(0,0,0,0);\r\n      user-select: none;\r\n      touch-action: none;\r\n      -webkit-user-select: none;\r\n      -moz-user-select: none;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n}\r\n\r\nbody {\r\n  overflow-y: hidden;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);i&&r[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,r=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var i,r,o=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);a=!0);}catch(t){s=!0,r=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return o}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],a=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(u," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([c]).join("\n")}return[o].join("\n")}},379:(t,e,n)=>{var i,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function a(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},i=[],r=0;r<t.length;r++){var s=t[r],u=e.base?s[0]+e.base:s[0],c=n[u]||0,l="".concat(u," ").concat(c);n[u]=c+1;var h=a(l),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==h?(o[h].references++,o[h].updater(f)):o.push({identifier:l,updater:y(f,e),references:1}),i.push(l)}return i}function u(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var a=r(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,l=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function h(t,e,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=l(e,r);else{var o=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function f(t,e,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var p=null,d=0;function y(t,e){var n,i,r;if(e.singleton){var o=d++;n=p||(p=u(e)),i=h.bind(null,n,o,!1),r=h.bind(null,n,o,!0)}else n=u(e),i=f.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var r=a(n[i]);o[r].references--}for(var u=s(t,e),c=0;c<n.length;c++){var l=a(n[c]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}n=u}}}},168:(t,e,n)=>{t.exports=n.p+"8cbe9b533510c6e4c6f5.png"},331:(t,e,n)=>{t.exports=n.p+"0df9de3c63368a7717be.png"},560:(t,e,n)=>{t.exports=n.p+"922a7ca319dd52942775.png"}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=function(){function t(){this.enabled=!0;var t=window.AudioContext||window.webkitAudioContext;this.audioContext=new t,this.buffer=this.audioContext.createBuffer(1,1*this.audioContext.sampleRate,this.audioContext.sampleRate),this.channelData=this.buffer.getChannelData(0),this.primaryGainControl=this.audioContext.createGain(),this.primaryGainControl.gain.setValueAtTime(.5,0),this.primaryGainControl.connect(this.audioContext.destination)}return t.prototype.initialize=function(){},t.prototype.playNote=function(t,e,n){if(void 0===t&&(t=150),void 0===e&&(e=.2),void 0===n&&(n=""),this.enabled){var i=this.audioContext.createOscillator();n&&(i.type=n),i.frequency.setValueAtTime(t,this.audioContext.currentTime);var r=this.audioContext.createGain();r.gain.setValueAtTime(1,this.audioContext.currentTime),r.gain.linearRampToValueAtTime(.01,this.audioContext.currentTime+e),i.connect(r),r.connect(this.primaryGainControl),i.start(),i.stop(this.audioContext.currentTime+e)}},t.prototype.playCustomSound=function(t,e,n){var i=this;if(void 0===e&&(e=""),this.enabled){var r=this.audioContext.createOscillator();e&&(r.type=e);var o=0;t.forEach((function(t){r.frequency.setValueAtTime(t.f,i.audioContext.currentTime+o+t.t),o+=t.t}));var a=this.audioContext.createGain();return a.gain.setValueAtTime(1,this.audioContext.currentTime),a.gain.linearRampToValueAtTime(.01,this.audioContext.currentTime+o),r.connect(a),a.connect(this.primaryGainControl),n&&(r.onended=n),r.start(),r.stop(this.audioContext.currentTime+o),r}},t.prototype.loadSound=function(t){return void 0===t&&(t="https://raw.githubusercontent.com/TinaSoltanian/Patatap/master/sounds/bubbles.mp3"),e=this,n=void 0,r=function(){var e,n,i,r;return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(o){switch(o.label){case 0:return this.enabled?[4,fetch(t)]:[2];case 1:return[4,o.sent().arrayBuffer()];case 2:return e=o.sent(),[4,this.audioContext.decodeAudioData(e)];case 3:return n=o.sent(),(i=this.audioContext.createBufferSource()).buffer=n,(r=this.audioContext.createGain()).gain.setValueAtTime(1,this.audioContext.currentTime),i.connect(r),r.connect(this.primaryGainControl),i.start(),[2]}}))},new((i=void 0)||(i=Promise))((function(t,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(a,s)}u((r=r.apply(e,n||[])).next())}));var e,n,i,r},t}();function e(t){var e=t.target.getBoundingClientRect();return[t.touches[0].clientX-e.left,t.touches[0].clientY-e.top]}function i(t,e){var n=t.x-e.x,i=t.y-e.y;return Math.sqrt(n*n+i*i)}function r(t,e,n){return void 0===n&&(n=!1),n?180*Math.atan2(e.y-t.y,e.x-t.x)/Math.PI:Math.atan2(e.y-t.y,e.x-t.x)}function o(t,e){return{x:Math.cos(t)*e,y:Math.sin(t)*e}}function a(t){return t*(Math.PI/180)}var s=function(){function n(e){var n=this;this.gameActive=!1,this.lastUpdate=Date.now(),this.updateDiff=Date.now(),this.updateTick=1e3/60,this.diffMulti=this.updateDiff/this.updateTick,this.keyBoardEnabled=!1,this.pressedKeys={},this.mouseEnabled=!1,this.mouseInfo={x:-100,y:-100,mouseDown:!1},this.gyroEnabled=!1,this.gyroInfo={x:0,y:0,z:0},this.levels={},this.activeLevel="",this.canvasElement=this.createCanvas(),this.canvasElement.width=e.width?e.width:200,this.gameWidth=this.canvasElement.width,this.canvasElement.height=e.height?e.height:400,this.gameHeight=this.canvasElement.height;var i=e.canvasElementId?document.getElementById(e.canvasElementId):document;i&&i.appendChild(this.canvasElement),this.ctx=this.createContextFromElement(this.canvasElement),this.soundPlayer=new t,e.levels&&e.levels.forEach((function(t){n.levels[t.key]=new t.level({key:t.key,gameRef:n}),""==n.activeLevel&&(n.activeLevel=t.key)})),this.gameLoop=this.gameLoop.bind(this),this.update=this.update.bind(this),this.tick=this.tick.bind(this),this.draw=this.draw.bind(this)}return n.prototype.createCanvas=function(){return document.createElement("canvas")},n.prototype.createContextFromElement=function(t){return t.getContext("2d")},n.prototype.enableMouse=function(){var t=this;this.canvasElement.addEventListener("mousedown",(function(e){t.mouseInfo.mouseDown=!0})),this.canvasElement.addEventListener("mousemove",(function(e){var n;n=function(t){var e=t.target.getBoundingClientRect();return[t.clientX-e.left,t.clientY-e.top]}(e),t.mouseInfo.x=n[0],t.mouseInfo.y=n[1]})),window.addEventListener("mouseup",(function(e){t.mouseInfo.mouseDown=!1})),this.canvasElement.addEventListener("touchstart",(function(n){var i;i=e(n),t.mouseInfo.x=i[0],t.mouseInfo.y=i[1],t.mouseInfo.mouseDown=!0})),this.canvasElement.addEventListener("touchmove",(function(n){var i;i=e(n),t.mouseInfo.x=i[0],t.mouseInfo.y=i[1]})),window.addEventListener("touchend",(function(e){t.mouseInfo.mouseDown=!1}))},n.prototype.enableKeyboard=function(){var t=this;this.keyBoardEnabled||(document.addEventListener("keydown",(function(e){t.pressedKeys[e.code]=!0})),document.addEventListener("keyup",(function(e){t.pressedKeys[e.code]=!1})))},n.prototype.enableGyro=function(){var t=this;this.gyroInfo={hey:"there"},window.addEventListener("deviceorientation",(function(e){t.gyroInfo=e}))},n.prototype.tick=function(){this.updateDiff=Date.now()-this.lastUpdate,this.diffMulti=this.updateDiff/this.updateTick,this.lastUpdate=Date.now()},n.prototype.start=function(){return t=this,e=void 0,i=function(){var t,e;return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(n){switch(n.label){case 0:this.soundPlayer.initialize(),this.gameActive=!0,t=0,n.label=1;case 1:return t<Object.keys(this.levels).length?(e=Object.keys(this.levels)[t],this.levels[e].preload?[4,this.levels[e].preload()]:[3,3]):[3,4];case 2:n.sent(),n.label=3;case 3:return t++,[3,1];case 4:return this.levels[this.activeLevel].initialize(),window.requestAnimationFrame(this.gameLoop),[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}));var t,e,n,i},n.prototype.update=function(){this.tick(),this.levels[this.activeLevel].update()},n.prototype.draw=function(){this.levels[this.activeLevel].draw()},n.prototype.loadLevel=function(t){this.levels[this.activeLevel].tearDown(),this.activeLevel=t,this.levels[this.activeLevel].initialize()},n.prototype.gameLoop=function(){this.update(),this.draw(),this.gameActive&&window.requestAnimationFrame(this.gameLoop)},n}(),u=n(379),c=n.n(u),l=n(566);c()(l.Z,{insert:"head",singleton:!1}),l.Z.locals;var h=function(){function t(t){this.x=0,this.y=0,this.objectKey=t.key,this.gameRef=t.gameRef,this.initialize=this.initialize.bind(this),this.preload=this.preload.bind(this),this.update=this.update.bind(this),this.draw=this.draw.bind(this),this.tearDown=this.tearDown.bind(this)}return t.prototype.preload=function(){return t=this,e=void 0,i=function(){return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(t){return[2]}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}));var t,e,n,i},t.prototype.initialize=function(){},t.prototype.update=function(){},t.prototype.draw=function(){},t.prototype.tearDown=function(){},t}();function f(t,e){var n=t.c,i=t.x,r=t.y,o=t.a;n.save(),n.translate(i,r),n.rotate(o*Math.PI/180),e(),n.restore()}function p(t){var e=t.c,n=(t.sprite,t.sx),i=t.sy,r=t.sWidth,o=t.sHeight,a=t.dx,s=t.dy,u=t.dWidth,c=t.dHeight,l=t.img,h=t.flipX,f=t.flipY;e.scale(h?-1:1,f?-1:1),e.drawImage(l,n,i,r,o,a,s,u,c),e.scale(1,1)}function d(t){return e=this,n=void 0,r=function(){var e;return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(n){switch(n.label){case 0:return[4,new Promise((function(e,n){var i=new Image;i.onload=function(){e(i)},i.onerror=function(t){n(t)},i.src=t.sprite}))];case 1:return e=n.sent(),t.img=e,[2,t]}}))},new((i=void 0)||(i=Promise))((function(t,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(a,s)}u((r=r.apply(e,n||[])).next())}));var e,n,i,r}function y(t){var e=t.c,n=t.x,i=t.y,r=t.radius,o=t.startAngle,s=t.endAngle,u=t.fillColor,c=t.strokeWidth,l=t.strokeColor;e.beginPath(),e.arc(n,i,r,o?a(o):0,s?a(s):2*Math.PI),u&&(e.fillStyle=u,e.fill()),c&&l&&(e.strokeStyle=l,e.lineWidth=c,e.stroke())}function v(t){var e=t.c,n=t.x,i=t.y,r=t.fillColor,o=t.strokeWidth,a=t.strokeColor,s=t.text,u=t.fontFamily,c=t.fontSize,l=t.align,h=t.style,f=t.weight;e.textAlign=l||"center",e.font=(h?h+" ":"")+(f?f+" ":"")+c+"px "+u,o&&a&&(e.strokeStyle=a,e.lineWidth=o,e.strokeText(s,n,i)),r&&(e.fillStyle=r,e.fillText(s,n,i))}var g,b=(g=function(t,e){return(g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}g(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),m=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.width=100,e.height=50,e.fillColor="#777",e.hoverColor="#333",e.focusColor="#000",e.strokeWidth=0,e.strokeColor="",e.hovered=!1,e.focused=!1,e.textColor="#fff",e.buttonText="Click Me",e.style="",e.weight="bold",e.fontSize=16,e.fontFamily="sans-serif",e.clickFunction=function(){return null},e.holdFunction=function(){return null},e}return b(e,t),e.prototype.initialize=function(){},e.prototype.update=function(){var t=this.x,e=this.y,n=this.x+this.width,i=this.y+this.height,r=this.gameRef.mouseInfo,o=r.x,a=r.y;this.hovered=o>t&&o<n&&a>e&&a<i,this.hovered&&this.gameRef.mouseInfo.mouseDown?(this.focused=!0,this.holdFunction()):this.hovered&&this.focused&&!this.gameRef.mouseInfo.mouseDown?(this.clickFunction(),this.focused=!1):this.focused=!1},e.prototype.draw=function(){var t,e,n,i,r,o,a,s,u;n=(t={c:this.gameRef.ctx,x:this.x,y:this.y,width:this.width,height:this.height,fillColor:this.hovered&&this.focused?this.focusColor:this.hovered?this.hoverColor:this.fillColor}).x,i=t.y,r=t.width,o=t.height,a=t.fillColor,s=t.strokeWidth,u=t.strokeColor,(e=t.c).beginPath(),e.rect(n,i,r,o),a&&(e.fillStyle=a,e.fill()),s&&u&&(e.strokeStyle=u,e.lineWidth=s,e.stroke()),v({c:this.gameRef.ctx,x:(this.x+this.x+this.width)/2,y:(this.y+this.y+this.height)/2+this.fontSize/3,align:"center",fillColor:this.textColor,style:this.style,weight:this.weight,fontFamily:this.fontFamily,fontSize:16,text:this.buttonText})},e}(h),w=function(){function t(t){this.levelKey=t.key,this.gameRef=t.gameRef,this.initialize=this.initialize.bind(this),this.update=this.update.bind(this),this.draw=this.draw.bind(this),this.tearDown=this.tearDown.bind(this)}return t.prototype.preload=function(){return t=this,e=void 0,i=function(){return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(t){return[2]}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}));var t,e,n,i},t.prototype.initialize=function(){},t.prototype.update=function(){},t.prototype.draw=function(){},t.prototype.tearDown=function(){},t}(),x=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),A=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return x(e,t),e.prototype.preload=function(){return t=this,e=void 0,i=function(){return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(t){return[2]}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}));var t,e,n,i},e.prototype.initialize=function(){var t=this;this.startButton=new m({key:"start-button",gameRef:this.gameRef}),this.startButton.fillColor="#ce192b",this.startButton.x=100,this.startButton.y=this.gameRef.gameHeight-100,this.startButton.buttonText="Start Game",this.startButton.width=this.gameRef.gameWidth-200,this.startButton.clickFunction=function(){t.gameRef.loadLevel("blasty-1")}},e.prototype.handleSounds=function(){},e.prototype.update=function(){this.updateBg(),this.handleSounds(),this.startButton.update()},e.prototype.updateBg=function(){},e.prototype.drawBg=function(){},e.prototype.draw=function(){this.gameRef.ctx.beginPath(),this.gameRef.ctx.rect(0,0,this.gameRef.gameWidth,this.gameRef.gameHeight),this.gameRef.ctx.fillStyle="#eee",this.gameRef.ctx.fill(),this.drawBg(),this.startButton.draw(),v({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:150,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"900",fontFamily:"sans-serif",fontSize:40,text:"BLASTY MAN"})},e.prototype.tearDown=function(){this.startButton.tearDown()},e}(w),C=n(168),k=n(331),T=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),S=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.angle=0,e.rotateSpeed=5,e.target={x:0,y:0},e.gunTip={x:0,y:0},e.onTarget=!1,e}return T(e,t),e.prototype.preload=function(){return t=this,e=void 0,i=function(){var t;return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,d({c:this.gameRef.ctx,sprite:k,sx:0,sy:0,sWidth:32,sHeight:16,dx:-32,dy:-8,dWidth:32,dHeight:16,frame:0})];case 1:return t.sprite=e.sent(),this.sprite.dx=-32,this.sprite.dy=-4,this.sprite.flipX=!0,this.sprite.flipY=!1,[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}));var t,e,n,i},e.prototype.update=function(){var t=5*this.gameRef.diffMulti,e=(r(this,this.target,!0)-this.angle+540)%360-180;e>0?this.angle=this.angle%360+(e>t?t:e):e<0&&(this.angle=this.angle%360-(e<t?t:-e)),this.angle<0&&(this.angle+=360),this.gunTip=o(a(this.angle),32);var n=i(o(r(this,this.target),32),o(a(this.angle),32));this.onTarget=Math.abs(n)<=1},e.prototype.moveTo=function(t){this.x=t.x,this.y=t.y,this.sprite.flipY=this.angle>90&&this.angle<270},e.prototype.setTarget=function(t){this.target=t},e.prototype.draw=function(){var t=this;f({c:this.gameRef.ctx,x:this.x,y:this.y,a:this.angle},(function(){p(t.sprite),y({c:t.gameRef.ctx,x:-6,y:8,radius:5,fillColor:"green"})}))},e}(h),R=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),E=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.active=!1,e.target={x:0,y:0},e.speed=15,e.radius=3,e.velocity={x:0,y:0},e.maxDistance=400,e.traveled=0,e.lastShot=0,e.shotDelay=200,e}return R(e,t),e.prototype.initialize=function(){},e.prototype.update=function(){this.active&&this.traveled<this.maxDistance?(this.x+=this.velocity.x,this.y+=this.velocity.y,this.traveled+=Math.abs(this.velocity.x)+Math.abs(this.velocity.y)):(this.velocity={x:0,y:0},this.active=!1,this.traveled=0)},e.prototype.setVelocityToTarget=function(){var t=this.gameRef.diffMulti,e=i(this,this.target),n=this.speed*t;this.velocity={x:n/e*(this.target.x-this.x),y:n/e*(this.target.y-this.y)}},e.prototype.fire=function(t,e){!this.active&&this.gameRef.lastUpdate-this.lastShot>=this.shotDelay&&(this.x=t.x,this.y=t.y,this.target=e,this.setVelocityToTarget(),this.active=!0,this.traveled=0,this.lastShot=this.gameRef.lastUpdate)},e.prototype.draw=function(t){void 0===t&&(t={x:0,y:0}),this.active&&y({c:this.gameRef.ctx,x:t.x+this.x,y:t.y+this.y,fillColor:"gold",radius:this.radius})},e}(h),B=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),_=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.width=40,e.height=64,e.target={x:0,y:0},e.speed=3,e}return B(e,t),e.prototype.preload=function(){return t=this,e=void 0,i=function(){var t;return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,d({c:this.gameRef.ctx,sprite:C,sx:0,sy:0,sWidth:this.width,sHeight:this.height,dx:this.x,dy:this.y,dWidth:this.width,dHeight:this.height,frame:0})];case 1:return t.sprite=e.sent(),this.gun1=new S({key:"gun1",gameRef:this.gameRef}),this.gun1.x=100,this.gun1.y=100,[4,this.gun1.preload()];case 2:return e.sent(),this.gun2=new S({key:"gun2",gameRef:this.gameRef}),this.gun2.x=130,this.gun2.y=100,[4,this.gun2.preload()];case 3:return e.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}));var t,e,n,i},e.prototype.initialize=function(){this.gun1Bullet=new E({key:"gun1Bullet",gameRef:this.gameRef}),this.gun2Bullet=new E({key:"gun2Bullet",gameRef:this.gameRef})},e.prototype.update=function(){var t=this.gameRef.pressedKeys,e=this.speed*this.gameRef.diffMulti;t.KeyA&&(this.x-=e),t.KeyD&&(this.x+=e),t.KeyW&&(this.y-=e),t.KeyS&&(this.y+=e),this.sprite.dx=this.x,this.sprite.dy=this.y;var n=this.x+this.width/2,i=this.y+this.height/2;this.target={x:this.gameRef.mouseInfo.x,y:this.gameRef.mouseInfo.y},this.gun1.moveTo({x:n-15,y:i+5}),this.gun1.setTarget(this.target),this.gun1.update(),!this.gun1Bullet.active&&this.gun1.onTarget&&this.gun1Bullet.fire({x:this.gun1.gunTip.x+this.gun1.x,y:this.gun1.gunTip.y+this.gun1.y},this.target),this.gun1Bullet.update(),this.gun2.moveTo({x:n+15,y:i+5}),this.gun2.setTarget(this.target),this.gun2.update(),!this.gun2Bullet.active&&this.gun2.onTarget&&this.gun2Bullet.fire({x:this.gun2.gunTip.x+this.gun2.x,y:this.gun2.gunTip.y+this.gun2.y},this.target),this.gun2Bullet.update()},e.prototype.centerCoordinates=function(){return{x:this.x+this.width/2,y:this.y+this.height/2}},e.prototype.draw=function(){p(this.sprite),this.target.x>this.x?(this.gun2.draw(),this.gun1.draw()):(this.gun1.draw(),this.gun2.draw()),this.gun1Bullet.draw(),this.gun2Bullet.draw()},e}(h),O=n(560),M=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),j=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.x=0,e.y=0,e.width=48,e.height=32,e.radius=16,e.speed=1,e.velocity={x:0,y:0},e.target={x:0,y:0},e.angle=0,e}return M(e,t),e.prototype.preload=function(){return t=this,e=void 0,i=function(){var t;return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,d({c:this.gameRef.ctx,sprite:O,sx:0,sy:0,sWidth:this.width,sHeight:this.height,dx:-this.width/2,dy:-this.height/2,dWidth:this.width,dHeight:this.height,frame:0})];case 1:return t.sprite=e.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}));var t,e,n,i},e.prototype.initialize=function(){},e.prototype.update=function(){var t=5*this.gameRef.diffMulti,e=(r(this,this.target,!0)+90-this.angle+540)%360-180;e>0?this.angle=this.angle%360+(e>t?t:e):e<0&&(this.angle=this.angle%360-(e<t?t:-e)),this.angle<0&&(this.angle+=360),this.moveTo(this.target)},e.prototype.moveTo=function(t,e){void 0===e&&(e=function(){});var n=i(this,t);if(n>this.radius){var r=this.speed*this.gameRef.diffMulti;this.velocity={x:r/n*(t.x-this.x),y:r/n*(t.y-this.y)},this.x+=this.velocity.x,this.y+=this.velocity.y}else this.velocity={x:0,y:0},e()},e.prototype.draw=function(){var t=this;f({c:this.gameRef.ctx,x:this.x,y:this.y,a:this.angle},(function(){p(t.sprite)}))},e}(h),I=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),P=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return I(e,t),e.prototype.preload=function(){return t=this,e=void 0,i=function(){return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(t){switch(t.label){case 0:return this.bMan=new _({key:"blast-man",gameRef:this.gameRef}),this.bMan.x=95,this.bMan.y=68,[4,this.bMan.preload()];case 1:return t.sent(),this.spider=new j({key:"blast-spider",gameRef:this.gameRef}),this.spider.x=200,this.spider.y=200,[4,this.spider.preload()];case 2:return t.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}));var t,e,n,i},e.prototype.initialize=function(){this.bMan.initialize(),this.spider.initialize()},e.prototype.handleSounds=function(){},e.prototype.update=function(){this.updateBg(),this.handleSounds(),this.bMan.update(),this.spider.update(),this.spider.target=this.bMan.centerCoordinates()},e.prototype.updateBg=function(){},e.prototype.drawBg=function(){},e.prototype.draw=function(){this.gameRef.ctx.beginPath(),this.gameRef.ctx.rect(0,0,this.gameRef.gameWidth,this.gameRef.gameHeight),this.gameRef.ctx.fillStyle="#777",this.gameRef.ctx.fill(),this.drawBg(),this.bMan.draw(),this.spider.draw(),v({c:this.gameRef.ctx,x:20,y:300,fillColor:"white",text:JSON.stringify(this.gameRef.gyroInfo),fontFamily:"sans-serif",align:"left",fontSize:16})},e.prototype.tearDown=function(){},e}(w),D=document.getElementById("start-game"),L=document.getElementById("motion-access"),z=document.getElementById("audio-b");D&&z&&z&&D.addEventListener("click",(function(){z.play(),function(){var t,e,n,i;t=this,e=void 0,i=function(){var t;return function(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(e){return(t=new s({canvasElementId:"game-container",width:window.innerWidth>400?400:window.innerWidth,height:window.innerHeight>400?400:window.innerHeight,levels:[{key:"start-screen",level:A},{key:"blasty-1",level:P}]})).enableMouse(),t.enableKeyboard(),t.enableGyro(),t.start(),[2]}))},new((n=void 0)||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}))}(),D.remove(),setTimeout((function(){z.remove()}),500)})),DeviceMotionEvent&&DeviceMotionEvent.requestPermission?L.addEventListener("click",(function(){DeviceMotionEvent.requestPermission().then((function(t){"granted"==t&&console.log("accelerometer permission granted")})),L.remove()})):L.remove()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,