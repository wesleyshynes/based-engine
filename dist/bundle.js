/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={566:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(15),o=n.n(i),r=n(645),a=n.n(r)()(o());a.push([e.id,'html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}table{border-collapse:collapse;border-spacing:0}#game-container{position:fixed;top:0;left:0;padding:0;margin:0;width:100%;height:100%;display:flex;align-content:center;align-items:center;justify-content:center;overflow-y:hidden;flex-direction:column;font-family:sans-serif;-webkit-user-select:none;-moz-user-select:none}#game-container #game-description{width:100%;text-align:center;margin-bottom:20px;max-width:300px;color:#fff;-webkit-user-select:none;-moz-user-select:none}#game-container #game-description h1{font-size:2em;font-weight:bold;line-height:2em;-webkit-user-select:none;-moz-user-select:none}#game-container #game-description p{line-height:1.4em;font-size:1em;-webkit-user-select:none;-moz-user-select:none}#game-container #start-game{padding:10px 20px;background:#eee;border:1px solid #333;font-size:1em;-webkit-user-select:none;-moz-user-select:none}#game-container canvas{-webkit-tap-highlight-color:rgba(0,0,0,0);user-select:none;touch-action:none;-webkit-user-select:none;-moz-user-select:none;margin:0;padding:0}body{overflow-y:hidden;background:#333;-webkit-user-select:none;-moz-user-select:none}',"",{version:3,sources:["webpack://./src/assets/reset.scss","webpack://./src/assets/style.scss"],names:[],mappings:"AAKA,2ZAaC,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,uBAAA,CAGD,8EAEC,aAAA,CAED,KACC,aAAA,CAED,MACC,eAAA,CAED,aACC,WAAA,CAED,oDAEC,UAAA,CACA,YAAA,CAED,MACC,wBAAA,CACA,gBAAA,CC5CD,gBACI,cAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,oBAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CACA,qBAAA,CACA,sBAAA,CACA,wBAAA,CACA,qBAAA,CAEA,kCACE,UAAA,CACA,iBAAA,CACA,kBAAA,CACA,eAAA,CACA,UAAA,CACA,wBAAA,CACA,qBAAA,CAEA,qCACE,aAAA,CACA,gBAAA,CACA,eAAA,CACA,wBAAA,CACA,qBAAA,CAGF,oCACE,iBAAA,CACA,aAAA,CACA,wBAAA,CACA,qBAAA,CAKJ,4BACE,iBAAA,CACA,eAAA,CACA,qBAAA,CACA,aAAA,CACA,wBAAA,CACA,qBAAA,CAIF,uBAEE,yCAAA,CACA,gBAAA,CACA,iBAAA,CACA,wBAAA,CACA,qBAAA,CACA,QAAA,CACA,SAAA,CAIN,KACE,iBAAA,CACA,eAAA,CACA,wBAAA,CACA,qBAAA",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/\r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n","@import 'reset.scss';\r\n\r\n#game-container {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    padding: 0;\r\n    margin: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-content: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow-y: hidden;\r\n    flex-direction: column;\r\n    font-family: sans-serif;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n\r\n    #game-description {\r\n      width: 100%;\r\n      text-align: center;\r\n      margin-bottom: 20px;\r\n      max-width: 300px;\r\n      color: white;\r\n      -webkit-user-select: none;\r\n      -moz-user-select: none;\r\n\r\n      h1 {\r\n        font-size: 2em;\r\n        font-weight: bold;\r\n        line-height: 2em;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n\r\n      }\r\n      p {\r\n        line-height: 1.4em;\r\n        font-size: 1em;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n\r\n      }\r\n    }\r\n\r\n    #start-game {\r\n      padding: 10px 20px;\r\n      background: #eee;\r\n      border: 1px solid #333;\r\n      font-size: 1em;\r\n      -webkit-user-select: none;\r\n      -moz-user-select: none;\r\n\r\n    }\r\n\r\n    canvas {\r\n      // border: 1px solid;\r\n      -webkit-tap-highlight-color: rgba(0,0,0,0);\r\n      user-select: none;\r\n      touch-action: none;\r\n      -webkit-user-select: none;\r\n      -moz-user-select: none;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n}\r\n\r\nbody {\r\n  overflow-y: hidden;\r\n  background: #333;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var a=this[r][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);i&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}e.exports=function(e){var n,i,o=(i=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var i,o,r=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(i=n.next()).done)&&(r.push(i.value),!t||r.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return r}}(n,i)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?t(e,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(l," */"),u=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[r].concat(u).concat([c]).join("\n")}return[r].join("\n")}},842:function(e,t,n){var i;i=function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=22)}([function(e,t){var i={};e.exports=i,function(){i._nextId=0,i._seed=0,i._nowStartTime=+new Date,i._warnedOnce={},i._decomp=null,i.extend=function(e,t){var n,o;"boolean"==typeof t?(n=2,o=t):(n=1,o=!0);for(var r=n;r<arguments.length;r++){var a=arguments[r];if(a)for(var s in a)o&&a[s]&&a[s].constructor===Object?e[s]&&e[s].constructor!==Object?e[s]=a[s]:(e[s]=e[s]||{},i.extend(e[s],o,a[s])):e[s]=a[s]}return e},i.clone=function(e,t){return i.extend({},t,e)},i.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},i.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),i=0;i<n.length;i++)t.push(e[n[i]]);return t}for(var o in e)t.push(e[o]);return t},i.get=function(e,t,n,i){t=t.split(".").slice(n,i);for(var o=0;o<t.length;o+=1)e=e[t[o]];return e},i.set=function(e,t,n,o,r){var a=t.split(".").slice(o,r);return i.get(e,t,0,-1)[a[a.length-1]]=n,n},i.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(i.random()*(t+1)),o=e[t];e[t]=e[n],e[n]=o}return e},i.choose=function(e){return e[Math.floor(i.random()*e.length)]},i.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},i.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},i.isFunction=function(e){return"function"==typeof e},i.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},i.isString=function(e){return"[object String]"===toString.call(e)},i.clamp=function(e,t,n){return e<t?t:e>n?n:e},i.sign=function(e){return e<0?-1:1},i.now=function(){if("undefined"!=typeof window&&window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return Date.now?Date.now():new Date-i._nowStartTime},i.random=function(t,n){return n=void 0!==n?n:1,(t=void 0!==t?t:0)+e()*(n-t)};var e=function(){return i._seed=(9301*i._seed+49297)%233280,i._seed/233280};i.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},i.logLevel=1,i.log=function(){console&&i.logLevel>0&&i.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.info=function(){console&&i.logLevel>0&&i.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.warn=function(){console&&i.logLevel>0&&i.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.warnOnce=function(){var e=Array.prototype.slice.call(arguments).join(" ");i._warnedOnce[e]||(i.warn(e),i._warnedOnce[e]=!0)},i.deprecated=function(e,t,n){e[t]=i.chain((function(){i.warnOnce("🔅 deprecated 🔅",n)}),e[t])},i.nextId=function(){return i._nextId++},i.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},i.map=function(e,t){if(e.map)return e.map(t);for(var n=[],i=0;i<e.length;i+=1)n.push(t(e[i]));return n},i.topologicalSort=function(e){var t=[],n=[],o=[];for(var r in e)n[r]||o[r]||i._topologicalSort(r,n,o,e,t);return t},i._topologicalSort=function(e,t,n,o,r){var a=o[e]||[];n[e]=!0;for(var s=0;s<a.length;s+=1){var l=a[s];n[l]||t[l]||i._topologicalSort(l,t,n,o,r)}n[e]=!1,t[e]=!0,r.push(e)},i.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var i=function(){for(var t,n=new Array(arguments.length),i=0,o=arguments.length;i<o;i++)n[i]=arguments[i];for(i=0;i<e.length;i+=1){var r=e[i].apply(t,n);void 0!==r&&(t=r)}return t};return i._chained=e,i},i.chainPathBefore=function(e,t,n){return i.set(e,t,i.chain(n,i.get(e,t)))},i.chainPathAfter=function(e,t,n){return i.set(e,t,i.chain(i.get(e,t),n))},i.setDecomp=function(e){i._decomp=e},i.getDecomp=function(){var e=i._decomp;try{e||"undefined"==typeof window||(e=window.decomp),e||void 0===n.g||(e=n.g.decomp)}catch(t){e=null}return e}}()},function(e,t){var n={};e.exports=n,n.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&n.update(t,e),t},n.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var i=0;i<t.length;i++){var o=t[i];o.x>e.max.x&&(e.max.x=o.x),o.x<e.min.x&&(e.min.x=o.x),o.y>e.max.y&&(e.max.y=o.y),o.y<e.min.y&&(e.min.y=o.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},n.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},n.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},n.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},n.shift=function(e,t){var n=e.max.x-e.min.x,i=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+i}},function(e,t){var n={};e.exports=n,n.create=function(e,t){return{x:e||0,y:t||0}},n.clone=function(e){return{x:e.x,y:e.y}},n.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},n.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},n.rotate=function(e,t,n){var i=Math.cos(t),o=Math.sin(t);n||(n={});var r=e.x*i-e.y*o;return n.y=e.x*o+e.y*i,n.x=r,n},n.rotateAbout=function(e,t,n,i){var o=Math.cos(t),r=Math.sin(t);i||(i={});var a=n.x+((e.x-n.x)*o-(e.y-n.y)*r);return i.y=n.y+((e.x-n.x)*r+(e.y-n.y)*o),i.x=a,i},n.normalise=function(e){var t=n.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},n.dot=function(e,t){return e.x*t.x+e.y*t.y},n.cross=function(e,t){return e.x*t.y-e.y*t.x},n.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},n.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},n.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},n.mult=function(e,t){return{x:e.x*t,y:e.y*t}},n.div=function(e,t){return{x:e.x/t,y:e.y/t}},n.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},n.neg=function(e){return{x:-e.x,y:-e.y}},n.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},n._temp=[n.create(),n.create(),n.create(),n.create(),n.create(),n.create()]},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(0);i.create=function(e,t){for(var n=[],i=0;i<e.length;i++){var o=e[i],r={x:o.x,y:o.y,index:i,body:t,isInternal:!1};n.push(r)}return n},i.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi,(function(e,t,i){n.push({x:parseFloat(t),y:parseFloat(i)})})),i.create(n,t)},i.centre=function(e){for(var t,n,r,a=i.area(e,!0),s={x:0,y:0},l=0;l<e.length;l++)r=(l+1)%e.length,t=o.cross(e[l],e[r]),n=o.mult(o.add(e[l],e[r]),t),s=o.add(s,n);return o.div(s,6*a)},i.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return o.div(t,e.length)},i.area=function(e,t){for(var n=0,i=e.length-1,o=0;o<e.length;o++)n+=(e[i].x-e[o].x)*(e[i].y+e[o].y),i=o;return t?n/2:Math.abs(n)/2},i.inertia=function(e,t){for(var n,i,r=0,a=0,s=e,l=0;l<s.length;l++)i=(l+1)%s.length,r+=(n=Math.abs(o.cross(s[i],s[l])))*(o.dot(s[i],s[i])+o.dot(s[i],s[l])+o.dot(s[l],s[l])),a+=n;return t/6*(r/a)},i.translate=function(e,t,n){var i;if(n)for(i=0;i<e.length;i++)e[i].x+=t.x*n,e[i].y+=t.y*n;else for(i=0;i<e.length;i++)e[i].x+=t.x,e[i].y+=t.y;return e},i.rotate=function(e,t,n){if(0!==t){for(var i=Math.cos(t),o=Math.sin(t),r=0;r<e.length;r++){var a=e[r],s=a.x-n.x,l=a.y-n.y;a.x=n.x+(s*i-l*o),a.y=n.y+(s*o+l*i)}return e}},i.contains=function(e,t){for(var n=0;n<e.length;n++){var i=e[n],o=e[(n+1)%e.length];if((t.x-i.x)*(o.y-i.y)+(t.y-i.y)*(i.x-o.x)>0)return!1}return!0},i.scale=function(e,t,n,r){if(1===t&&1===n)return e;var a,s;r=r||i.centre(e);for(var l=0;l<e.length;l++)a=e[l],s=o.sub(a,r),e[l].x=r.x+s.x*t,e[l].y=r.y+s.y*n;return e},i.chamfer=function(e,t,n,i,a){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,i=i||2,a=a||14;for(var s=[],l=0;l<e.length;l++){var c=e[l-1>=0?l-1:e.length-1],u=e[l],h=e[(l+1)%e.length],d=t[l<t.length?l:t.length-1];if(0!==d){var f=o.normalise({x:u.y-c.y,y:c.x-u.x}),p=o.normalise({x:h.y-u.y,y:u.x-h.x}),y=Math.sqrt(2*Math.pow(d,2)),m=o.mult(r.clone(f),d),v=o.normalise(o.mult(o.add(f,p),.5)),g=o.sub(u,o.mult(v,y)),x=n;-1===n&&(x=1.75*Math.pow(d,.32)),(x=r.clamp(x,i,a))%2==1&&(x+=1);for(var b=Math.acos(o.dot(f,p))/x,w=0;w<x;w++)s.push(o.add(o.rotate(m,b*w),g))}else s.push(u)}return s},i.clockwiseSort=function(e){var t=i.mean(e);return e.sort((function(e,n){return o.angle(t,e)-o.angle(t,n)})),e},i.isConvex=function(e){var t,n,i,o,r=0,a=e.length;if(a<3)return null;for(t=0;t<a;t++)if(i=(t+2)%a,o=(e[n=(t+1)%a].x-e[t].x)*(e[i].y-e[n].y),(o-=(e[n].y-e[t].y)*(e[i].x-e[n].x))<0?r|=1:o>0&&(r|=2),3===r)return!1;return 0!==r||null},i.hull=function(e){var t,n,i=[],r=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];r.length>=2&&o.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];i.length>=2&&o.cross3(i[i.length-2],i[i.length-1],t)<=0;)i.pop();i.push(t)}return i.pop(),r.pop(),i.concat(r)}},function(e,t,n){var i={};e.exports=i;var o=n(0);i.on=function(e,t,n){for(var i,o=t.split(" "),r=0;r<o.length;r++)i=o[r],e.events=e.events||{},e.events[i]=e.events[i]||[],e.events[i].push(n);return n},i.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=o.keys(e.events).join(" "));for(var i=t.split(" "),r=0;r<i.length;r++){var a=e.events[i[r]],s=[];if(n&&a)for(var l=0;l<a.length;l++)a[l]!==n&&s.push(a[l]);e.events[i[r]]=s}}else e.events={}},i.trigger=function(e,t,n){var i,r,a,s,l=e.events;if(l&&o.keys(l).length>0){n||(n={}),i=t.split(" ");for(var c=0;c<i.length;c++)if(a=l[r=i[c]]){(s=o.clone(n,!1)).name=r,s.source=e;for(var u=0;u<a.length;u++)a[u].apply(e,[s])}}}},function(e,t,n){var i={};e.exports=i;var o=n(4),r=n(0),a=n(1),s=n(6);i.create=function(e){return r.extend({id:r.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{}},e)},i.setModified=function(e,t,n,o){if(e.isModified=t,n&&e.parent&&i.setModified(e.parent,t,n,o),o)for(var r=0;r<e.composites.length;r++){var a=e.composites[r];i.setModified(a,t,n,o)}},i.add=function(e,t){var n=[].concat(t);o.trigger(e,"beforeAdd",{object:t});for(var a=0;a<n.length;a++){var s=n[a];switch(s.type){case"body":if(s.parent!==s){r.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}i.addBody(e,s);break;case"constraint":i.addConstraint(e,s);break;case"composite":i.addComposite(e,s);break;case"mouseConstraint":i.addConstraint(e,s.constraint)}}return o.trigger(e,"afterAdd",{object:t}),e},i.remove=function(e,t,n){var r=[].concat(t);o.trigger(e,"beforeRemove",{object:t});for(var a=0;a<r.length;a++){var s=r[a];switch(s.type){case"body":i.removeBody(e,s,n);break;case"constraint":i.removeConstraint(e,s,n);break;case"composite":i.removeComposite(e,s,n);break;case"mouseConstraint":i.removeConstraint(e,s.constraint)}}return o.trigger(e,"afterRemove",{object:t}),e},i.addComposite=function(e,t){return e.composites.push(t),t.parent=e,i.setModified(e,!0,!0,!1),e},i.removeComposite=function(e,t,n){var o=r.indexOf(e.composites,t);if(-1!==o&&(i.removeCompositeAt(e,o),i.setModified(e,!0,!0,!1)),n)for(var a=0;a<e.composites.length;a++)i.removeComposite(e.composites[a],t,!0);return e},i.removeCompositeAt=function(e,t){return e.composites.splice(t,1),i.setModified(e,!0,!0,!1),e},i.addBody=function(e,t){return e.bodies.push(t),i.setModified(e,!0,!0,!1),e},i.removeBody=function(e,t,n){var o=r.indexOf(e.bodies,t);if(-1!==o&&(i.removeBodyAt(e,o),i.setModified(e,!0,!0,!1)),n)for(var a=0;a<e.composites.length;a++)i.removeBody(e.composites[a],t,!0);return e},i.removeBodyAt=function(e,t){return e.bodies.splice(t,1),i.setModified(e,!0,!0,!1),e},i.addConstraint=function(e,t){return e.constraints.push(t),i.setModified(e,!0,!0,!1),e},i.removeConstraint=function(e,t,n){var o=r.indexOf(e.constraints,t);if(-1!==o&&i.removeConstraintAt(e,o),n)for(var a=0;a<e.composites.length;a++)i.removeConstraint(e.composites[a],t,!0);return e},i.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),i.setModified(e,!0,!0,!1),e},i.clear=function(e,t,n){if(n)for(var o=0;o<e.composites.length;o++)i.clear(e.composites[o],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,i.setModified(e,!0,!0,!1),e},i.allBodies=function(e){for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(i.allBodies(e.composites[n]));return t},i.allConstraints=function(e){for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(i.allConstraints(e.composites[n]));return t},i.allComposites=function(e){for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(i.allComposites(e.composites[n]));return t},i.get=function(e,t,n){var o,r;switch(n){case"body":o=i.allBodies(e);break;case"constraint":o=i.allConstraints(e);break;case"composite":o=i.allComposites(e).concat(e)}return o?0===(r=o.filter((function(e){return e.id.toString()===t.toString()}))).length?null:r[0]:null},i.move=function(e,t,n){return i.remove(e,t),i.add(n,t),e},i.rebase=function(e){for(var t=i.allBodies(e).concat(i.allConstraints(e)).concat(i.allComposites(e)),n=0;n<t.length;n++)t[n].id=r.nextId();return i.setModified(e,!0,!0,!1),e},i.translate=function(e,t,n){for(var o=n?i.allBodies(e):e.bodies,r=0;r<o.length;r++)s.translate(o[r],t);return i.setModified(e,!0,!0,!1),e},i.rotate=function(e,t,n,o){for(var r=Math.cos(t),a=Math.sin(t),l=o?i.allBodies(e):e.bodies,c=0;c<l.length;c++){var u=l[c],h=u.position.x-n.x,d=u.position.y-n.y;s.setPosition(u,{x:n.x+(h*r-d*a),y:n.y+(h*a+d*r)}),s.rotate(u,t)}return i.setModified(e,!0,!0,!1),e},i.scale=function(e,t,n,o,r){for(var a=r?i.allBodies(e):e.bodies,l=0;l<a.length;l++){var c=a[l],u=c.position.x-o.x,h=c.position.y-o.y;s.setPosition(c,{x:o.x+u*t,y:o.y+h*n}),s.scale(c,t,n)}return i.setModified(e,!0,!0,!1),e},i.bounds=function(e){for(var t=i.allBodies(e),n=[],o=0;o<t.length;o+=1){var r=t[o];n.push(r.bounds.min,r.bounds.max)}return a.create(n)}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(2),a=n(7),s=(n(16),n(0)),l=n(1),c=n(10);!function(){i._inertiaScale=4,i._nextCollidingGroupId=1,i._nextNonCollidingGroupId=-1,i._nextCategory=1,i.create=function(t){var n={id:s.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:o.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,strokeStyle:null,fillStyle:null,lineWidth:null,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0}},events:null,bounds:null,chamfer:null,circleRadius:0,positionPrev:null,anglePrev:0,parent:null,axes:null,area:0,mass:0,inertia:0,_original:null},i=s.extend(n,t);return e(i,t),i},i.nextGroup=function(e){return e?i._nextNonCollidingGroupId--:i._nextCollidingGroupId++},i.nextCategory=function(){return i._nextCategory=i._nextCategory<<1,i._nextCategory};var e=function(e,t){t=t||{},i.set(e,{bounds:e.bounds||l.create(e.vertices),positionPrev:e.positionPrev||r.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),o.rotate(e.vertices,e.angle,e.position),c.rotate(e.axes,e.angle),l.update(e.bounds,e.vertices,e.velocity),i.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#14151f":s.choose(["#f19648","#f5d259","#f55a3c","#063e7b","#ececd1"]),a=e.isStatic?"#555":"#ccc",u=e.isStatic&&null===e.render.fillStyle?1:0;e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||a,e.render.lineWidth=e.render.lineWidth||u,e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};i.set=function(e,t,n){var o;for(o in"string"==typeof t&&(o=t,(t={})[o]=n),t)if(Object.prototype.hasOwnProperty.call(t,o))switch(n=t[o],o){case"isStatic":i.setStatic(e,n);break;case"isSleeping":a.set(e,n);break;case"mass":i.setMass(e,n);break;case"density":i.setDensity(e,n);break;case"inertia":i.setInertia(e,n);break;case"vertices":i.setVertices(e,n);break;case"position":i.setPosition(e,n);break;case"angle":i.setAngle(e,n);break;case"velocity":i.setVelocity(e,n);break;case"angularVelocity":i.setAngularVelocity(e,n);break;case"parts":i.setParts(e,n);break;case"centre":i.setCentre(e,n);break;default:e[o]=n}},i.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var i=e.parts[n];i.isStatic=t,t?(i._original={restitution:i.restitution,friction:i.friction,mass:i.mass,inertia:i.inertia,density:i.density,inverseMass:i.inverseMass,inverseInertia:i.inverseInertia},i.restitution=0,i.friction=1,i.mass=i.inertia=i.density=1/0,i.inverseMass=i.inverseInertia=0,i.positionPrev.x=i.position.x,i.positionPrev.y=i.position.y,i.anglePrev=i.angle,i.angularVelocity=0,i.speed=0,i.angularSpeed=0,i.motion=0):i._original&&(i.restitution=i._original.restitution,i.friction=i._original.friction,i.mass=i._original.mass,i.inertia=i._original.inertia,i.density=i._original.density,i.inverseMass=i._original.inverseMass,i.inverseInertia=i._original.inverseInertia,i._original=null)}},i.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},i.setDensity=function(e,t){i.setMass(e,t*e.area),e.density=t},i.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},i.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=o.create(t,e),e.axes=c.fromVertices(e.vertices),e.area=o.area(e.vertices),i.setMass(e,e.density*e.area);var n=o.centre(e.vertices);o.translate(e.vertices,n,-1),i.setInertia(e,i._inertiaScale*o.inertia(e.vertices,e.mass)),o.translate(e.vertices,e.position),l.update(e.bounds,e.vertices,e.velocity)},i.setParts=function(e,t,n){var r;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,r=0;r<t.length;r++){var a=t[r];a!==e&&(a.parent=e,e.parts.push(a))}if(1!==e.parts.length){if(n=void 0===n||n){var s=[];for(r=0;r<t.length;r++)s=s.concat(t[r].vertices);o.clockwiseSort(s);var l=o.hull(s),c=o.centre(l);i.setVertices(e,l),o.translate(e.vertices,c)}var u=i._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,i.setMass(e,u.mass),i.setInertia(e,u.inertia),i.setPosition(e,u.centre)}},i.setCentre=function(e,t,n){n?(e.positionPrev.x+=t.x,e.positionPrev.y+=t.y,e.position.x+=t.x,e.position.y+=t.y):(e.positionPrev.x=t.x-(e.position.x-e.positionPrev.x),e.positionPrev.y=t.y-(e.position.y-e.positionPrev.y),e.position.x=t.x,e.position.y=t.y)},i.setPosition=function(e,t){var n=r.sub(t,e.position);e.positionPrev.x+=n.x,e.positionPrev.y+=n.y;for(var i=0;i<e.parts.length;i++){var a=e.parts[i];a.position.x+=n.x,a.position.y+=n.y,o.translate(a.vertices,n),l.update(a.bounds,a.vertices,e.velocity)}},i.setAngle=function(e,t){var n=t-e.angle;e.anglePrev+=n;for(var i=0;i<e.parts.length;i++){var a=e.parts[i];a.angle+=n,o.rotate(a.vertices,n,e.position),c.rotate(a.axes,n),l.update(a.bounds,a.vertices,e.velocity),i>0&&r.rotateAbout(a.position,n,e.position,a.position)}},i.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=r.magnitude(e.velocity)},i.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},i.translate=function(e,t){i.setPosition(e,r.add(e.position,t))},i.rotate=function(e,t,n){if(n){var o=Math.cos(t),r=Math.sin(t),a=e.position.x-n.x,s=e.position.y-n.y;i.setPosition(e,{x:n.x+(a*o-s*r),y:n.y+(a*r+s*o)}),i.setAngle(e,e.angle+t)}else i.setAngle(e,e.angle+t)},i.scale=function(e,t,n,r){var a=0,s=0;r=r||e.position;for(var u=0;u<e.parts.length;u++){var h=e.parts[u];o.scale(h.vertices,t,n,r),h.axes=c.fromVertices(h.vertices),h.area=o.area(h.vertices),i.setMass(h,e.density*h.area),o.translate(h.vertices,{x:-h.position.x,y:-h.position.y}),i.setInertia(h,i._inertiaScale*o.inertia(h.vertices,h.mass)),o.translate(h.vertices,{x:h.position.x,y:h.position.y}),u>0&&(a+=h.area,s+=h.inertia),h.position.x=r.x+(h.position.x-r.x)*t,h.position.y=r.y+(h.position.y-r.y)*n,l.update(h.bounds,h.vertices,e.velocity)}e.parts.length>1&&(e.area=a,e.isStatic||(i.setMass(e,e.density*a),i.setInertia(e,s))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},i.update=function(e,t,n,i){var a=Math.pow(t*n*e.timeScale,2),s=1-e.frictionAir*n*e.timeScale,u=e.position.x-e.positionPrev.x,h=e.position.y-e.positionPrev.y;e.velocity.x=u*s*i+e.force.x/e.mass*a,e.velocity.y=h*s*i+e.force.y/e.mass*a,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*s*i+e.torque/e.inertia*a,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=r.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var d=0;d<e.parts.length;d++){var f=e.parts[d];o.translate(f.vertices,e.velocity),d>0&&(f.position.x+=e.velocity.x,f.position.y+=e.velocity.y),0!==e.angularVelocity&&(o.rotate(f.vertices,e.angularVelocity,e.position),c.rotate(f.axes,e.angularVelocity),d>0&&r.rotateAbout(f.position,e.angularVelocity,e.position,f.position)),l.update(f.bounds,f.vertices,e.velocity)}},i.applyForce=function(e,t,n){e.force.x+=n.x,e.force.y+=n.y;var i=t.x-e.position.x,o=t.y-e.position.y;e.torque+=i*n.y-o*n.x},i._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var i=e.parts[n],o=i.mass!==1/0?i.mass:1;t.mass+=o,t.area+=i.area,t.inertia+=i.inertia,t.centre=r.add(t.centre,r.mult(i.position,o))}return t.centre=r.div(t.centre,t.mass),t}}()},function(e,t,n){var i={};e.exports=i;var o=n(4);i._motionWakeThreshold=.18,i._motionSleepThreshold=.08,i._minBias=.9,i.update=function(e,t){for(var n=t*t*t,o=0;o<e.length;o++){var r=e[o],a=r.speed*r.speed+r.angularSpeed*r.angularSpeed;if(0===r.force.x&&0===r.force.y){var s=Math.min(r.motion,a),l=Math.max(r.motion,a);r.motion=i._minBias*s+(1-i._minBias)*l,r.sleepThreshold>0&&r.motion<i._motionSleepThreshold*n?(r.sleepCounter+=1,r.sleepCounter>=r.sleepThreshold&&i.set(r,!0)):r.sleepCounter>0&&(r.sleepCounter-=1)}else i.set(r,!1)}},i.afterCollisions=function(e,t){for(var n=t*t*t,o=0;o<e.length;o++){var r=e[o];if(r.isActive){var a=r.collision,s=a.bodyA.parent,l=a.bodyB.parent;if(!(s.isSleeping&&l.isSleeping||s.isStatic||l.isStatic)&&(s.isSleeping||l.isSleeping)){var c=s.isSleeping&&!s.isStatic?s:l,u=c===s?l:s;!c.isStatic&&u.motion>i._motionWakeThreshold*n&&i.set(c,!1)}}}},i.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||o.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&o.trigger(e,"sleepEnd"))}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(2),a=n(7),s=n(1),l=n(10),c=n(0);i._warming=.4,i._torqueDampen=1,i._minLength=1e-6,i.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?r.add(t.bodyA.position,t.pointA):t.pointA,i=t.bodyB?r.add(t.bodyB.position,t.pointB):t.pointB,o=r.magnitude(r.sub(n,i));t.length=void 0!==t.length?t.length:o,t.id=t.id||c.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var a={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(a.type="pin",a.anchors=!1):t.stiffness<.9&&(a.type="spring"),t.render=c.extend(a,t.render),t},i.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],i=n.constraintImpulse;n.isStatic||0===i.x&&0===i.y&&0===i.angle||(n.position.x+=i.x,n.position.y+=i.y,n.angle+=i.angle)}},i.solveAll=function(e,t){for(var n=0;n<e.length;n+=1){var o=e[n],r=!o.bodyA||o.bodyA&&o.bodyA.isStatic,a=!o.bodyB||o.bodyB&&o.bodyB.isStatic;(r||a)&&i.solve(e[n],t)}for(n=0;n<e.length;n+=1)r=!(o=e[n]).bodyA||o.bodyA&&o.bodyA.isStatic,a=!o.bodyB||o.bodyB&&o.bodyB.isStatic,r||a||i.solve(e[n],t)},i.solve=function(e,t){var n=e.bodyA,o=e.bodyB,a=e.pointA,s=e.pointB;if(n||o){n&&!n.isStatic&&(r.rotate(a,n.angle-e.angleA,a),e.angleA=n.angle),o&&!o.isStatic&&(r.rotate(s,o.angle-e.angleB,s),e.angleB=o.angle);var l=a,c=s;if(n&&(l=r.add(n.position,a)),o&&(c=r.add(o.position,s)),l&&c){var u=r.sub(l,c),h=r.magnitude(u);h<i._minLength&&(h=i._minLength);var d,f,p,y,m,v=(h-e.length)/h,g=e.stiffness<1?e.stiffness*t:e.stiffness,x=r.mult(u,v*g),b=(n?n.inverseMass:0)+(o?o.inverseMass:0),w=b+((n?n.inverseInertia:0)+(o?o.inverseInertia:0));if(e.damping){var A=r.create();p=r.div(u,h),m=r.sub(o&&r.sub(o.position,o.positionPrev)||A,n&&r.sub(n.position,n.positionPrev)||A),y=r.dot(p,m)}n&&!n.isStatic&&(f=n.inverseMass/b,n.constraintImpulse.x-=x.x*f,n.constraintImpulse.y-=x.y*f,n.position.x-=x.x*f,n.position.y-=x.y*f,e.damping&&(n.positionPrev.x-=e.damping*p.x*y*f,n.positionPrev.y-=e.damping*p.y*y*f),d=r.cross(a,x)/w*i._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=d,n.angle-=d),o&&!o.isStatic&&(f=o.inverseMass/b,o.constraintImpulse.x+=x.x*f,o.constraintImpulse.y+=x.y*f,o.position.x+=x.x*f,o.position.y+=x.y*f,e.damping&&(o.positionPrev.x+=e.damping*p.x*y*f,o.positionPrev.y+=e.damping*p.y*y*f),d=r.cross(s,x)/w*i._torqueDampen*o.inverseInertia*(1-e.angularStiffness),o.constraintImpulse.angle+=d,o.angle+=d)}}},i.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],c=n.constraintImpulse;if(!(n.isStatic||0===c.x&&0===c.y&&0===c.angle)){a.set(n,!1);for(var u=0;u<n.parts.length;u++){var h=n.parts[u];o.translate(h.vertices,c),u>0&&(h.position.x+=c.x,h.position.y+=c.y),0!==c.angle&&(o.rotate(h.vertices,c.angle,n.position),l.rotate(h.axes,c.angle),u>0&&r.rotateAbout(h.position,c.angle,n.position,h.position)),s.update(h.bounds,h.vertices,n.velocity)}c.angle*=i._warming,c.x*=i._warming,c.y*=i._warming}}},i.pointAWorld=function(e){return{x:(e.bodyA?e.bodyA.position.x:0)+e.pointA.x,y:(e.bodyA?e.bodyA.position.y:0)+e.pointA.y}},i.pointBWorld=function(e){return{x:(e.bodyB?e.bodyB.position.x:0)+e.pointB.x,y:(e.bodyB?e.bodyB.position.y:0)+e.pointB.y}}},function(e,t,n){var i={};e.exports=i;var o=n(17);i.create=function(e,t){var n=e.bodyA,o=e.bodyB,r=e.parentA,a=e.parentB,s={id:i.id(n,o),bodyA:n,bodyB:o,contacts:{},activeContacts:[],separation:0,isActive:!0,confirmedActive:!0,isSensor:n.isSensor||o.isSensor,timeCreated:t,timeUpdated:t,inverseMass:r.inverseMass+a.inverseMass,friction:Math.min(r.friction,a.friction),frictionStatic:Math.max(r.frictionStatic,a.frictionStatic),restitution:Math.max(r.restitution,a.restitution),slop:Math.max(r.slop,a.slop)};return i.update(s,e,t),s},i.update=function(e,t,n){var r=e.contacts,a=t.supports,s=e.activeContacts,l=t.parentA,c=t.parentB;if(e.collision=t,e.inverseMass=l.inverseMass+c.inverseMass,e.friction=Math.min(l.friction,c.friction),e.frictionStatic=Math.max(l.frictionStatic,c.frictionStatic),e.restitution=Math.max(l.restitution,c.restitution),e.slop=Math.max(l.slop,c.slop),s.length=0,t.collided){for(var u=0;u<a.length;u++){var h=a[u],d=o.id(h),f=r[d];f?s.push(f):s.push(r[d]=o.create(h))}e.separation=t.depth,i.setActive(e,!0,n)}else!0===e.isActive&&i.setActive(e,!1,n)},i.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},i.id=function(e,t){return e.id<t.id?"A"+e.id+"B"+t.id:"A"+t.id+"B"+e.id}},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(0);i.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var i=(n+1)%e.length,a=o.normalise({x:e[i].y-e[n].y,y:e[n].x-e[i].x}),s=0===a.y?1/0:a.x/a.y;t[s=s.toFixed(3).toString()]=a}return r.values(t)},i.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),i=Math.sin(t),o=0;o<e.length;o++){var r,a=e[o];r=a.x*n-a.y*i,a.y=a.x*i+a.y*n,a.x=r}}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(0),a=n(6),s=n(1),l=n(2);i.rectangle=function(e,t,n,i,s){s=s||{};var l={label:"Rectangle Body",position:{x:e,y:t},vertices:o.fromPath("L 0 0 L "+n+" 0 L "+n+" "+i+" L 0 "+i)};if(s.chamfer){var c=s.chamfer;l.vertices=o.chamfer(l.vertices,c.radius,c.quality,c.qualityMin,c.qualityMax),delete s.chamfer}return a.create(r.extend({},l,s))},i.trapezoid=function(e,t,n,i,s,l){l=l||{};var c,u=n*(s*=.5),h=u+(1-2*s)*n,d=h+u;c=s<.5?"L 0 0 L "+u+" "+-i+" L "+h+" "+-i+" L "+d+" 0":"L 0 0 L "+h+" "+-i+" L "+d+" 0";var f={label:"Trapezoid Body",position:{x:e,y:t},vertices:o.fromPath(c)};if(l.chamfer){var p=l.chamfer;f.vertices=o.chamfer(f.vertices,p.radius,p.quality,p.qualityMin,p.qualityMax),delete l.chamfer}return a.create(r.extend({},f,l))},i.circle=function(e,t,n,o,a){o=o||{};var s={label:"Circle Body",circleRadius:n};a=a||25;var l=Math.ceil(Math.max(10,Math.min(a,n)));return l%2==1&&(l+=1),i.polygon(e,t,l,n,r.extend({},s,o))},i.polygon=function(e,t,n,s,l){if(l=l||{},n<3)return i.circle(e,t,s,l);for(var c=2*Math.PI/n,u="",h=.5*c,d=0;d<n;d+=1){var f=h+d*c,p=Math.cos(f)*s,y=Math.sin(f)*s;u+="L "+p.toFixed(3)+" "+y.toFixed(3)+" "}var m={label:"Polygon Body",position:{x:e,y:t},vertices:o.fromPath(u)};if(l.chamfer){var v=l.chamfer;m.vertices=o.chamfer(m.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete l.chamfer}return a.create(r.extend({},m,l))},i.fromVertices=function(e,t,n,i,c,u,h,d){var f,p,y,m,v,g,x,b,w,A,C=r.getDecomp();for(f=Boolean(C&&C.quickDecomp),i=i||{},y=[],c=void 0!==c&&c,u=void 0!==u?u:.01,h=void 0!==h?h:10,d=void 0!==d?d:.01,r.isArray(n[0])||(n=[n]),w=0;w<n.length;w+=1)if(v=n[w],!(m=o.isConvex(v))&&!f&&r.warnOnce("Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."),m||!f)v=m?o.clockwiseSort(v):o.hull(v),y.push({position:{x:e,y:t},vertices:v});else{var S=v.map((function(e){return[e.x,e.y]}));C.makeCCW(S),!1!==u&&C.removeCollinearPoints(S,u),!1!==d&&C.removeDuplicatePoints&&C.removeDuplicatePoints(S,d);var k=C.quickDecomp(S);for(g=0;g<k.length;g++){var P=k[g].map((function(e){return{x:e[0],y:e[1]}}));h>0&&o.area(P)<h||y.push({position:o.centre(P),vertices:P})}}for(g=0;g<y.length;g++)y[g]=a.create(r.extend(y[g],i));if(c)for(g=0;g<y.length;g++){var R=y[g];for(x=g+1;x<y.length;x++){var B=y[x];if(s.overlaps(R.bounds,B.bounds)){var M=R.vertices,_=B.vertices;for(b=0;b<R.vertices.length;b++)for(A=0;A<B.vertices.length;A++){var T=l.magnitudeSquared(l.sub(M[(b+1)%M.length],_[A])),I=l.magnitudeSquared(l.sub(M[b],_[(A+1)%_.length]));T<5&&I<5&&(M[b].isInternal=!0,_[A].isInternal=!0)}}}}return y.length>1?(p=a.create(r.extend({parts:y.slice(0)},i)),a.setPosition(p,{x:e,y:t}),p):y[0]}},function(e,t,n){var i={};e.exports=i;var o=n(0);i.create=function(e){var t={};return e||o.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=parseInt(t.element.getAttribute("data-pixel-ratio"),10)||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},i.setElement(t,t.element),t},i.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},i.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},i.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},i.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},i._getRelativeMousePosition=function(e,t,n){var i,o,r=t.getBoundingClientRect(),a=document.documentElement||document.body.parentNode||document.body,s=void 0!==window.pageXOffset?window.pageXOffset:a.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:a.scrollTop,c=e.changedTouches;return c?(i=c[0].pageX-r.left-s,o=c[0].pageY-r.top-l):(i=e.pageX-r.left-s,o=e.pageY-r.top-l),{x:i/(t.clientWidth/(t.width||t.clientWidth)*n),y:o/(t.clientHeight/(t.height||t.clientHeight)*n)}}},function(e,t,n){var i={};e.exports=i;var o=n(14),r=n(9),a=n(1);i.collisions=function(e,t){for(var n=[],s=t.pairs.table,l=0;l<e.length;l++){var c=e[l][0],u=e[l][1];if((!c.isStatic&&!c.isSleeping||!u.isStatic&&!u.isSleeping)&&i.canCollide(c.collisionFilter,u.collisionFilter)&&a.overlaps(c.bounds,u.bounds))for(var h=c.parts.length>1?1:0;h<c.parts.length;h++)for(var d=c.parts[h],f=u.parts.length>1?1:0;f<u.parts.length;f++){var p=u.parts[f];if(d===c&&p===u||a.overlaps(d.bounds,p.bounds)){var y,m=s[r.id(d,p)];y=m&&m.isActive?m.collision:null;var v=o.collides(d,p,y);v.collided&&n.push(v)}}}return n},i.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(2);i.collides=function(e,t,n){var a,s,l,c,u=!1;if(n){var h=e.parent,d=t.parent,f=h.speed*h.speed+h.angularSpeed*h.angularSpeed+d.speed*d.speed+d.angularSpeed*d.angularSpeed;u=n&&n.collided&&f<.2,c=n}else c={collided:!1,bodyA:e,bodyB:t};if(n&&u){var p=c.axisBody,y=p===e?t:e,m=[p.axes[n.axisNumber]];if(l=i._overlapAxes(p.vertices,y.vertices,m),c.reused=!0,l.overlap<=0)return c.collided=!1,c}else{if((a=i._overlapAxes(e.vertices,t.vertices,e.axes)).overlap<=0)return c.collided=!1,c;if((s=i._overlapAxes(t.vertices,e.vertices,t.axes)).overlap<=0)return c.collided=!1,c;a.overlap<s.overlap?(l=a,c.axisBody=e):(l=s,c.axisBody=t),c.axisNumber=l.axisNumber}c.bodyA=e.id<t.id?e:t,c.bodyB=e.id<t.id?t:e,c.collided=!0,c.depth=l.overlap,c.parentA=c.bodyA.parent,c.parentB=c.bodyB.parent,e=c.bodyA,t=c.bodyB,r.dot(l.axis,r.sub(t.position,e.position))<0?c.normal={x:l.axis.x,y:l.axis.y}:c.normal={x:-l.axis.x,y:-l.axis.y},c.tangent=r.perp(c.normal),c.penetration=c.penetration||{},c.penetration.x=c.normal.x*c.depth,c.penetration.y=c.normal.y*c.depth;var v=i._findSupports(e,t,c.normal),g=[];if(o.contains(e.vertices,v[0])&&g.push(v[0]),o.contains(e.vertices,v[1])&&g.push(v[1]),g.length<2){var x=i._findSupports(t,e,r.neg(c.normal));o.contains(t.vertices,x[0])&&g.push(x[0]),g.length<2&&o.contains(t.vertices,x[1])&&g.push(x[1])}return g.length<1&&(g=[v[0]]),c.supports=g,c},i._overlapAxes=function(e,t,n){for(var o,a,s=r._temp[0],l=r._temp[1],c={overlap:Number.MAX_VALUE},u=0;u<n.length;u++){if(a=n[u],i._projectToAxis(s,e,a),i._projectToAxis(l,t,a),(o=Math.min(s.max-l.min,l.max-s.min))<=0)return c.overlap=o,c;o<c.overlap&&(c.overlap=o,c.axis=a,c.axisNumber=u)}return c},i._projectToAxis=function(e,t,n){for(var i=r.dot(t[0],n),o=i,a=1;a<t.length;a+=1){var s=r.dot(t[a],n);s>o?o=s:s<i&&(i=s)}e.min=i,e.max=o},i._findSupports=function(e,t,n){for(var i,o,a,s,l=Number.MAX_VALUE,c=r._temp[0],u=t.vertices,h=e.position,d=0;d<u.length;d++)o=u[d],c.x=o.x-h.x,c.y=o.y-h.y,(i=-r.dot(n,c))<l&&(l=i,a=o);return o=u[a.index-1>=0?a.index-1:u.length-1],c.x=o.x-h.x,c.y=o.y-h.y,l=-r.dot(n,c),s=o,o=u[(a.index+1)%u.length],c.x=o.x-h.x,c.y=o.y-h.y,(i=-r.dot(n,c))<l&&(s=o),[a,s]}},function(e,t,n){var i={};e.exports=i;var o=n(0);i._registry={},i.register=function(e){if(i.isPlugin(e)||o.warn("Plugin.register:",i.toString(e),"does not implement all required fields."),e.name in i._registry){var t=i._registry[e.name],n=i.versionParse(e.version).number,r=i.versionParse(t.version).number;n>r?(o.warn("Plugin.register:",i.toString(t),"was upgraded to",i.toString(e)),i._registry[e.name]=e):n<r?o.warn("Plugin.register:",i.toString(t),"can not be downgraded to",i.toString(e)):e!==t&&o.warn("Plugin.register:",i.toString(e),"is already registered to different plugin object")}else i._registry[e.name]=e;return e},i.resolve=function(e){return i._registry[i.dependencyParse(e).name]},i.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},i.isPlugin=function(e){return e&&e.name&&e.version&&e.install},i.isUsed=function(e,t){return e.used.indexOf(t)>-1},i.isFor=function(e,t){var n=e.for&&i.dependencyParse(e.for);return!e.for||t.name===n.name&&i.versionSatisfies(t.version,n.range)},i.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=i.dependencies(e),r=o.topologicalSort(n),a=[],s=0;s<r.length;s+=1)if(r[s]!==e.name){var l=i.resolve(r[s]);l?i.isUsed(e,l.name)||(i.isFor(l,e)||(o.warn("Plugin.use:",i.toString(l),"is for",l.for,"but installed on",i.toString(e)+"."),l._warned=!0),l.install?l.install(e):(o.warn("Plugin.use:",i.toString(l),"does not specify an install function."),l._warned=!0),l._warned?(a.push("🔶 "+i.toString(l)),delete l._warned):a.push("✅ "+i.toString(l)),e.used.push(l.name)):a.push("❌ "+r[s])}a.length>0&&o.info(a.join("  "))}else o.warn("Plugin.use:",i.toString(e),"does not specify any dependencies to install.")},i.dependencies=function(e,t){var n=i.dependencyParse(e),r=n.name;if(!(r in(t=t||{}))){e=i.resolve(e)||e,t[r]=o.map(e.uses||[],(function(t){i.isPlugin(t)&&i.register(t);var r=i.dependencyParse(t),a=i.resolve(t);return a&&!i.versionSatisfies(a.version,r.range)?(o.warn("Plugin.dependencies:",i.toString(a),"does not satisfy",i.toString(r),"used by",i.toString(n)+"."),a._warned=!0,e._warned=!0):a||(o.warn("Plugin.dependencies:",i.toString(t),"used by",i.toString(n),"could not be resolved."),e._warned=!0),r.name}));for(var a=0;a<t[r].length;a+=1)i.dependencies(t[r][a],t);return t}},i.dependencyParse=function(e){return o.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(e)||o.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},i.versionParse=function(e){var t=/^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-]+)?$/;t.test(e)||o.warn("Plugin.versionParse:",e,"is not a valid version or range.");var n=t.exec(e),i=Number(n[4]),r=Number(n[5]),a=Number(n[6]);return{isRange:Boolean(n[1]||n[2]),version:n[3],range:e,operator:n[1]||n[2]||"",major:i,minor:r,patch:a,parts:[i,r,a],prerelease:n[7],number:1e8*i+1e4*r+a}},i.versionSatisfies=function(e,t){t=t||"*";var n=i.versionParse(t),o=i.versionParse(e);if(n.isRange){if("*"===n.operator||"*"===e)return!0;if(">"===n.operator)return o.number>n.number;if(">="===n.operator)return o.number>=n.number;if("~"===n.operator)return o.major===n.major&&o.minor===n.minor&&o.patch>=n.patch;if("^"===n.operator)return n.major>0?o.major===n.major&&o.number>=n.number:n.minor>0?o.minor===n.minor&&o.patch>=n.patch:o.patch===n.patch}return e===t||"*"===e}},function(e,t,n){var i={};e.exports=i;var o=n(0),r=n(5),a=n(1),s=n(4),l=n(2),c=n(12);!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(o.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),i._goodFps=30,i._goodDelta=1e3/60,i.create=function(e){var t={controller:i,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,timing:{historySize:60,delta:0,deltaHistory:[],lastTime:0,lastTimestamp:0,lastElapsed:0,timestampElapsed:0,timestampElapsedHistory:[],engineDeltaHistory:[],engineElapsedHistory:[],elapsedHistory:[]},options:{width:800,height:600,pixelRatio:1,background:"#14151f",wireframeBackground:"#14151f",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showStats:!1,showPerformance:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},n=o.extend(t,e);return n.canvas&&(n.canvas.width=n.options.width||n.canvas.width,n.canvas.height=n.options.height||n.canvas.height),n.mouse=e.mouse,n.engine=e.engine,n.canvas=n.canvas||h(n.options.width,n.options.height),n.context=n.canvas.getContext("2d"),n.textures={},n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.canvas.width,y:n.canvas.height}},1!==n.options.pixelRatio&&i.setPixelRatio(n,n.options.pixelRatio),o.isElement(n.element)?n.element.appendChild(n.canvas):n.canvas.parentNode||o.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),n},i.run=function(t){!function o(r){t.frameRequestId=e(o),n(t,r),i.world(t,r),(t.options.showStats||t.options.showDebug)&&i.stats(t,t.context,r),(t.options.showPerformance||t.options.showDebug)&&i.performance(t,t.context,r)}()},i.stop=function(e){t(e.frameRequestId)},i.setPixelRatio=function(e,t){var n=e.options,i=e.canvas;"auto"===t&&(t=d(i)),n.pixelRatio=t,i.setAttribute("data-pixel-ratio",t),i.width=n.width*t,i.height=n.height*t,i.style.width=n.width+"px",i.style.height=n.height+"px"},i.lookAt=function(e,t,n,i){i=void 0===i||i,t=o.isArray(t)?t:[t],n=n||{x:0,y:0};for(var r={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},a=0;a<t.length;a+=1){var s=t[a],l=s.bounds?s.bounds.min:s.min||s.position||s,u=s.bounds?s.bounds.max:s.max||s.position||s;l&&u&&(l.x<r.min.x&&(r.min.x=l.x),u.x>r.max.x&&(r.max.x=u.x),l.y<r.min.y&&(r.min.y=l.y),u.y>r.max.y&&(r.max.y=u.y))}var h=r.max.x-r.min.x+2*n.x,d=r.max.y-r.min.y+2*n.y,f=e.canvas.height,p=e.canvas.width/f,y=h/d,m=1,v=1;y>p?v=y/p:m=p/y,e.options.hasBounds=!0,e.bounds.min.x=r.min.x,e.bounds.max.x=r.min.x+h*m,e.bounds.min.y=r.min.y,e.bounds.max.y=r.min.y+d*v,i&&(e.bounds.min.x+=.5*h-h*m*.5,e.bounds.max.x+=.5*h-h*m*.5,e.bounds.min.y+=.5*d-d*v*.5,e.bounds.max.y+=.5*d-d*v*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(c.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),c.setOffset(e.mouse,e.bounds.min))},i.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,i=t/e.options.width,o=n/e.options.height;e.context.setTransform(e.options.pixelRatio/i,0,0,e.options.pixelRatio/o,0,0),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},i.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},i.world=function(e,t){var n,u=o.now(),h=e.engine,d=h.world,f=e.canvas,y=e.context,m=e.options,v=e.timing,g=r.allBodies(d),x=r.allConstraints(d),b=m.wireframes?m.wireframeBackground:m.background,w=[],A=[],C={timestamp:h.timing.timestamp};if(s.trigger(e,"beforeRender",C),e.currentBackground!==b&&p(e,b),y.globalCompositeOperation="source-in",y.fillStyle="transparent",y.fillRect(0,0,f.width,f.height),y.globalCompositeOperation="source-over",m.hasBounds){for(n=0;n<g.length;n++){var S=g[n];a.overlaps(S.bounds,e.bounds)&&w.push(S)}for(n=0;n<x.length;n++){var k=x[n],P=k.bodyA,R=k.bodyB,B=k.pointA,M=k.pointB;P&&(B=l.add(P.position,k.pointA)),R&&(M=l.add(R.position,k.pointB)),B&&M&&(a.contains(e.bounds,B)||a.contains(e.bounds,M))&&A.push(k)}i.startViewTransform(e),e.mouse&&(c.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.options.width,y:(e.bounds.max.y-e.bounds.min.y)/e.options.height}),c.setOffset(e.mouse,e.bounds.min))}else A=x,w=g,1!==e.options.pixelRatio&&e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0);!m.wireframes||h.enableSleeping&&m.showSleeping?i.bodies(e,w,y):(m.showConvexHulls&&i.bodyConvexHulls(e,w,y),i.bodyWireframes(e,w,y)),m.showBounds&&i.bodyBounds(e,w,y),(m.showAxes||m.showAngleIndicator)&&i.bodyAxes(e,w,y),m.showPositions&&i.bodyPositions(e,w,y),m.showVelocity&&i.bodyVelocity(e,w,y),m.showIds&&i.bodyIds(e,w,y),m.showSeparations&&i.separations(e,h.pairs.list,y),m.showCollisions&&i.collisions(e,h.pairs.list,y),m.showVertexNumbers&&i.vertexNumbers(e,w,y),m.showMousePosition&&i.mousePosition(e,e.mouse,y),i.constraints(A,y),m.showBroadphase&&i.grid(e,h.grid,y),m.hasBounds&&i.endViewTransform(e),s.trigger(e,"afterRender",C),v.lastElapsed=o.now()-u},i.stats=function(e,t,n){for(var i=e.engine,o=i.world,a=r.allBodies(o),s=0,l=0,c=0;c<a.length;c+=1)s+=a[c].parts.length;var u={Part:s,Body:a.length,Cons:r.allConstraints(o).length,Comp:r.allComposites(o).length,Pair:i.pairs.list.length};for(var h in t.fillStyle="#0e0f19",t.fillRect(l,0,302.5,44),t.font="12px Arial",t.textBaseline="top",t.textAlign="right",u){var d=u[h];t.fillStyle="#aaa",t.fillText(h,l+55,8),t.fillStyle="#eee",t.fillText(d,l+55,26),l+=55}},i.performance=function(e,t){var n=e.engine,o=e.timing,r=o.deltaHistory,a=o.elapsedHistory,s=o.timestampElapsedHistory,l=o.engineDeltaHistory,c=o.engineElapsedHistory,h=n.timing.lastDelta,d=u(r),f=u(a),p=u(l),y=u(c),m=u(s)/d||0,v=1e3/d||0;t.fillStyle="#0e0f19",t.fillRect(0,50,370,34),i.status(t,10,69,60,4,r.length,Math.round(v)+" fps",v/i._goodFps,(function(e){return r[e]/d-1})),i.status(t,82,69,60,4,l.length,h.toFixed(2)+" dt",i._goodDelta/h,(function(e){return l[e]/p-1})),i.status(t,154,69,60,4,c.length,y.toFixed(2)+" ut",1-y/i._goodFps,(function(e){return c[e]/y-1})),i.status(t,226,69,60,4,a.length,f.toFixed(2)+" rt",1-f/i._goodFps,(function(e){return a[e]/f-1})),i.status(t,298,69,60,4,s.length,m.toFixed(2)+" x",m*m*m,(function(e){return(s[e]/r[e]/m||0)-1}))},i.status=function(e,t,n,i,r,a,s,l,c){e.strokeStyle="#888",e.fillStyle="#444",e.lineWidth=1,e.fillRect(t,n+7,i,1),e.beginPath(),e.moveTo(t,n+7-r*o.clamp(.4*c(0),-2,2));for(var u=0;u<i;u+=1)e.lineTo(t+u,n+7-(u<a?r*o.clamp(.4*c(u),-2,2):0));e.stroke(),e.fillStyle="hsl("+o.clamp(25+95*l,0,120)+",100%,60%)",e.fillRect(t,n-7,4,4),e.font="12px Arial",e.textBaseline="middle",e.textAlign="right",e.fillStyle="#eee",e.fillText(s,t+i,n-5)},i.constraints=function(e,t){for(var n=t,i=0;i<e.length;i++){var r=e[i];if(r.render.visible&&r.pointA&&r.pointB){var a,s,c=r.bodyA,u=r.bodyB;if(a=c?l.add(c.position,r.pointA):r.pointA,"pin"===r.render.type)n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath();else{if(s=u?l.add(u.position,r.pointB):r.pointB,n.beginPath(),n.moveTo(a.x,a.y),"spring"===r.render.type)for(var h,d=l.sub(s,a),f=l.perp(l.normalise(d)),p=Math.ceil(o.clamp(r.length/5,12,20)),y=1;y<p;y+=1)h=y%2==0?1:-1,n.lineTo(a.x+d.x*(y/p)+f.x*h*4,a.y+d.y*(y/p)+f.y*h*4);n.lineTo(s.x,s.y)}r.render.lineWidth&&(n.lineWidth=r.render.lineWidth,n.strokeStyle=r.render.strokeStyle,n.stroke()),r.render.anchors&&(n.fillStyle=r.render.strokeStyle,n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.arc(s.x,s.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},i.bodies=function(e,t,n){var i,o,r,a,s=n,l=(e.engine,e.options),c=l.showInternalEdges||!l.wireframes;for(r=0;r<t.length;r++)if((i=t[r]).render.visible)for(a=i.parts.length>1?1:0;a<i.parts.length;a++)if((o=i.parts[a]).render.visible){if(l.showSleeping&&i.isSleeping?s.globalAlpha=.5*o.render.opacity:1!==o.render.opacity&&(s.globalAlpha=o.render.opacity),o.render.sprite&&o.render.sprite.texture&&!l.wireframes){var u=o.render.sprite,h=f(e,u.texture);s.translate(o.position.x,o.position.y),s.rotate(o.angle),s.drawImage(h,h.width*-u.xOffset*u.xScale,h.height*-u.yOffset*u.yScale,h.width*u.xScale,h.height*u.yScale),s.rotate(-o.angle),s.translate(-o.position.x,-o.position.y)}else{if(o.circleRadius)s.beginPath(),s.arc(o.position.x,o.position.y,o.circleRadius,0,2*Math.PI);else{s.beginPath(),s.moveTo(o.vertices[0].x,o.vertices[0].y);for(var d=1;d<o.vertices.length;d++)!o.vertices[d-1].isInternal||c?s.lineTo(o.vertices[d].x,o.vertices[d].y):s.moveTo(o.vertices[d].x,o.vertices[d].y),o.vertices[d].isInternal&&!c&&s.moveTo(o.vertices[(d+1)%o.vertices.length].x,o.vertices[(d+1)%o.vertices.length].y);s.lineTo(o.vertices[0].x,o.vertices[0].y),s.closePath()}l.wireframes?(s.lineWidth=1,s.strokeStyle="#bbb",s.stroke()):(s.fillStyle=o.render.fillStyle,o.render.lineWidth&&(s.lineWidth=o.render.lineWidth,s.strokeStyle=o.render.strokeStyle,s.stroke()),s.fill())}s.globalAlpha=1}},i.bodyWireframes=function(e,t,n){var i,o,r,a,s,l=n,c=e.options.showInternalEdges;for(l.beginPath(),r=0;r<t.length;r++)if((i=t[r]).render.visible)for(s=i.parts.length>1?1:0;s<i.parts.length;s++){for(o=i.parts[s],l.moveTo(o.vertices[0].x,o.vertices[0].y),a=1;a<o.vertices.length;a++)!o.vertices[a-1].isInternal||c?l.lineTo(o.vertices[a].x,o.vertices[a].y):l.moveTo(o.vertices[a].x,o.vertices[a].y),o.vertices[a].isInternal&&!c&&l.moveTo(o.vertices[(a+1)%o.vertices.length].x,o.vertices[(a+1)%o.vertices.length].y);l.lineTo(o.vertices[0].x,o.vertices[0].y)}l.lineWidth=1,l.strokeStyle="#bbb",l.stroke()},i.bodyConvexHulls=function(e,t,n){var i,o,r,a=n;for(a.beginPath(),o=0;o<t.length;o++)if((i=t[o]).render.visible&&1!==i.parts.length){for(a.moveTo(i.vertices[0].x,i.vertices[0].y),r=1;r<i.vertices.length;r++)a.lineTo(i.vertices[r].x,i.vertices[r].y);a.lineTo(i.vertices[0].x,i.vertices[0].y)}a.lineWidth=1,a.strokeStyle="rgba(255,255,255,0.2)",a.stroke()},i.vertexNumbers=function(e,t,n){var i,o,r,a=n;for(i=0;i<t.length;i++){var s=t[i].parts;for(r=s.length>1?1:0;r<s.length;r++){var l=s[r];for(o=0;o<l.vertices.length;o++)a.fillStyle="rgba(255,255,255,0.2)",a.fillText(i+"_"+o,l.position.x+.8*(l.vertices[o].x-l.position.x),l.position.y+.8*(l.vertices[o].y-l.position.y))}}},i.mousePosition=function(e,t,n){var i=n;i.fillStyle="rgba(255,255,255,0.8)",i.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},i.bodyBounds=function(e,t,n){var i=n,o=(e.engine,e.options);i.beginPath();for(var r=0;r<t.length;r++)if(t[r].render.visible)for(var a=t[r].parts,s=a.length>1?1:0;s<a.length;s++){var l=a[s];i.rect(l.bounds.min.x,l.bounds.min.y,l.bounds.max.x-l.bounds.min.x,l.bounds.max.y-l.bounds.min.y)}o.wireframes?i.strokeStyle="rgba(255,255,255,0.08)":i.strokeStyle="rgba(0,0,0,0.1)",i.lineWidth=1,i.stroke()},i.bodyAxes=function(e,t,n){var i,o,r,a,s=n,l=(e.engine,e.options);for(s.beginPath(),o=0;o<t.length;o++){var c=t[o],u=c.parts;if(c.render.visible)if(l.showAxes)for(r=u.length>1?1:0;r<u.length;r++)for(i=u[r],a=0;a<i.axes.length;a++){var h=i.axes[a];s.moveTo(i.position.x,i.position.y),s.lineTo(i.position.x+20*h.x,i.position.y+20*h.y)}else for(r=u.length>1?1:0;r<u.length;r++)for(i=u[r],a=0;a<i.axes.length;a++)s.moveTo(i.position.x,i.position.y),s.lineTo((i.vertices[0].x+i.vertices[i.vertices.length-1].x)/2,(i.vertices[0].y+i.vertices[i.vertices.length-1].y)/2)}l.wireframes?(s.strokeStyle="indianred",s.lineWidth=1):(s.strokeStyle="rgba(255, 255, 255, 0.4)",s.globalCompositeOperation="overlay",s.lineWidth=2),s.stroke(),s.globalCompositeOperation="source-over"},i.bodyPositions=function(e,t,n){var i,o,r,a,s=n,l=(e.engine,e.options);for(s.beginPath(),r=0;r<t.length;r++)if((i=t[r]).render.visible)for(a=0;a<i.parts.length;a++)o=i.parts[a],s.arc(o.position.x,o.position.y,3,0,2*Math.PI,!1),s.closePath();for(l.wireframes?s.fillStyle="indianred":s.fillStyle="rgba(0,0,0,0.5)",s.fill(),s.beginPath(),r=0;r<t.length;r++)(i=t[r]).render.visible&&(s.arc(i.positionPrev.x,i.positionPrev.y,2,0,2*Math.PI,!1),s.closePath());s.fillStyle="rgba(255,165,0,0.8)",s.fill()},i.bodyVelocity=function(e,t,n){var i=n;i.beginPath();for(var o=0;o<t.length;o++){var r=t[o];r.render.visible&&(i.moveTo(r.position.x,r.position.y),i.lineTo(r.position.x+2*(r.position.x-r.positionPrev.x),r.position.y+2*(r.position.y-r.positionPrev.y)))}i.lineWidth=3,i.strokeStyle="cornflowerblue",i.stroke()},i.bodyIds=function(e,t,n){var i,o,r=n;for(i=0;i<t.length;i++)if(t[i].render.visible){var a=t[i].parts;for(o=a.length>1?1:0;o<a.length;o++){var s=a[o];r.font="12px Arial",r.fillStyle="rgba(255,255,255,0.5)",r.fillText(s.id,s.position.x+10,s.position.y-10)}}},i.collisions=function(e,t,n){var i,o,r,a,s=n,l=e.options;for(s.beginPath(),r=0;r<t.length;r++)if((i=t[r]).isActive)for(o=i.collision,a=0;a<i.activeContacts.length;a++){var c=i.activeContacts[a].vertex;s.rect(c.x-1.5,c.y-1.5,3.5,3.5)}for(l.wireframes?s.fillStyle="rgba(255,255,255,0.7)":s.fillStyle="orange",s.fill(),s.beginPath(),r=0;r<t.length;r++)if((i=t[r]).isActive&&(o=i.collision,i.activeContacts.length>0)){var u=i.activeContacts[0].vertex.x,h=i.activeContacts[0].vertex.y;2===i.activeContacts.length&&(u=(i.activeContacts[0].vertex.x+i.activeContacts[1].vertex.x)/2,h=(i.activeContacts[0].vertex.y+i.activeContacts[1].vertex.y)/2),o.bodyB===o.supports[0].body||!0===o.bodyA.isStatic?s.moveTo(u-8*o.normal.x,h-8*o.normal.y):s.moveTo(u+8*o.normal.x,h+8*o.normal.y),s.lineTo(u,h)}l.wireframes?s.strokeStyle="rgba(255,165,0,0.7)":s.strokeStyle="orange",s.lineWidth=1,s.stroke()},i.separations=function(e,t,n){var i,o,r,a,s,l=n,c=e.options;for(l.beginPath(),s=0;s<t.length;s++)if((i=t[s]).isActive){r=(o=i.collision).bodyA;var u=1;(a=o.bodyB).isStatic||r.isStatic||(u=.5),a.isStatic&&(u=0),l.moveTo(a.position.x,a.position.y),l.lineTo(a.position.x-o.penetration.x*u,a.position.y-o.penetration.y*u),u=1,a.isStatic||r.isStatic||(u=.5),r.isStatic&&(u=0),l.moveTo(r.position.x,r.position.y),l.lineTo(r.position.x+o.penetration.x*u,r.position.y+o.penetration.y*u)}c.wireframes?l.strokeStyle="rgba(255,165,0,0.5)":l.strokeStyle="orange",l.stroke()},i.grid=function(e,t,n){var i=n;e.options.wireframes?i.strokeStyle="rgba(255,180,0,0.1)":i.strokeStyle="rgba(255,180,0,0.5)",i.beginPath();for(var r=o.keys(t.buckets),a=0;a<r.length;a++){var s=r[a];if(!(t.buckets[s].length<2)){var l=s.split(/C|R/);i.rect(.5+parseInt(l[1],10)*t.bucketWidth,.5+parseInt(l[2],10)*t.bucketHeight,t.bucketWidth,t.bucketHeight)}}i.lineWidth=1,i.stroke()},i.inspector=function(e,t){e.engine;var n,i=e.selected,o=e.render,r=o.options;if(r.hasBounds){var a=o.bounds.max.x-o.bounds.min.x,s=o.bounds.max.y-o.bounds.min.y,l=a/o.options.width,c=s/o.options.height;t.scale(1/l,1/c),t.translate(-o.bounds.min.x,-o.bounds.min.y)}for(var u=0;u<i.length;u++){var h=i[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),h.type){case"body":n=h.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var d=h.pointA;h.bodyA&&(d=h.pointB),t.beginPath(),t.arc(d.x,d.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),r.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=e.engine,o=e.timing,r=o.historySize,a=n.timing.timestamp;o.delta=t-o.lastTime||i._goodDelta,o.lastTime=t,o.timestampElapsed=a-o.lastTimestamp||0,o.lastTimestamp=a,o.deltaHistory.unshift(o.delta),o.deltaHistory.length=Math.min(o.deltaHistory.length,r),o.engineDeltaHistory.unshift(n.timing.lastDelta),o.engineDeltaHistory.length=Math.min(o.engineDeltaHistory.length,r),o.timestampElapsedHistory.unshift(o.timestampElapsed),o.timestampElapsedHistory.length=Math.min(o.timestampElapsedHistory.length,r),o.engineElapsedHistory.unshift(n.timing.lastElapsed),o.engineElapsedHistory.length=Math.min(o.engineElapsedHistory.length,r),o.elapsedHistory.unshift(o.lastElapsed),o.elapsedHistory.length=Math.min(o.elapsedHistory.length,r)},u=function(e){for(var t=0,n=0;n<e.length;n+=1)t+=e[n];return t/e.length||0},h=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},d=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},f=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},p=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},function(e,t){var n={};e.exports=n,n.create=function(e){return{id:n.id(e),vertex:e,normalImpulse:0,tangentImpulse:0}},n.id=function(e){return e.body.id+"_"+e.index}},function(e,t,n){var i={};e.exports=i;var o=n(7),r=n(19),a=n(13),s=n(20),l=n(21),c=n(4),u=n(5),h=n(8),d=n(0),f=n(6);i.create=function(e){e=e||{};var t=d.extend({positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},grid:null,gravity:{x:0,y:1,scale:.001},timing:{timestamp:0,timeScale:1,lastDelta:0,lastElapsed:0}},e);return t.world=e.world||u.create({label:"World"}),t.grid=l.create(e.grid||e.broadphase),t.pairs=s.create(),t.world.gravity=t.gravity,t.broadphase=t.grid,t.metrics={},t},i.update=function(e,t,n){var f=d.now();t=t||1e3/60,n=n||1;var p,y,m=e.world,v=e.timing,g=e.grid;v.timestamp+=t*v.timeScale,v.lastDelta=t*v.timeScale;var x={timestamp:v.timestamp};c.trigger(e,"beforeUpdate",x);var b=u.allBodies(m),w=u.allConstraints(m);for(e.enableSleeping&&o.update(b,v.timeScale),i._bodiesApplyGravity(b,e.gravity),i._bodiesUpdate(b,t,v.timeScale,n,m.bounds),h.preSolveAll(b),y=0;y<e.constraintIterations;y++)h.solveAll(w,v.timeScale);h.postSolveAll(b),m.isModified&&l.clear(g),l.update(g,b,e,m.isModified),p=g.pairsList,m.isModified&&u.setModified(m,!1,!1,!0);var A=a.collisions(p,e),C=e.pairs,S=v.timestamp;for(s.update(C,A,S),s.removeOld(C,S),e.enableSleeping&&o.afterCollisions(C.list,v.timeScale),C.collisionStart.length>0&&c.trigger(e,"collisionStart",{pairs:C.collisionStart}),r.preSolvePosition(C.list),y=0;y<e.positionIterations;y++)r.solvePosition(C.list,v.timeScale);for(r.postSolvePosition(b),h.preSolveAll(b),y=0;y<e.constraintIterations;y++)h.solveAll(w,v.timeScale);for(h.postSolveAll(b),r.preSolveVelocity(C.list),y=0;y<e.velocityIterations;y++)r.solveVelocity(C.list,v.timeScale);return C.collisionActive.length>0&&c.trigger(e,"collisionActive",{pairs:C.collisionActive}),C.collisionEnd.length>0&&c.trigger(e,"collisionEnd",{pairs:C.collisionEnd}),i._bodiesClearForces(b),c.trigger(e,"afterUpdate",x),e.timing.lastElapsed=d.now()-f,e},i.merge=function(e,t){if(d.extend(e,t),t.world){e.world=t.world,i.clear(e);for(var n=u.allBodies(e.world),r=0;r<n.length;r++){var a=n[r];o.set(a,!1),a.id=d.nextId()}}},i.clear=function(e){var t=e.world,n=u.allBodies(t);s.clear(e.pairs),l.clear(e.grid),l.update(e.grid,n,e,!0)},i._bodiesClearForces=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.force.x=0,n.force.y=0,n.torque=0}},i._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==n)for(var i=0;i<e.length;i++){var o=e[i];o.isStatic||o.isSleeping||(o.force.y+=o.mass*t.y*n,o.force.x+=o.mass*t.x*n)}},i._bodiesUpdate=function(e,t,n,i,o){for(var r=0;r<e.length;r++){var a=e[r];a.isStatic||a.isSleeping||f.update(a,t,n,i)}}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(2),a=n(0),s=n(1);i._restingThresh=4,i._restingThreshTangent=6,i._positionDampen=.9,i._positionWarming=.8,i._frictionNormalMultiplier=5,i.preSolvePosition=function(e){var t,n,i;for(t=0;t<e.length;t++)(n=e[t]).isActive&&(i=n.activeContacts.length,n.collision.parentA.totalContacts+=i,n.collision.parentB.totalContacts+=i)},i.solvePosition=function(e,t){var n,o,a,s,l,c,u,h,d,f=r._temp[0],p=r._temp[1],y=r._temp[2],m=r._temp[3];for(n=0;n<e.length;n++)(o=e[n]).isActive&&!o.isSensor&&(s=(a=o.collision).parentA,l=a.parentB,c=a.normal,u=r.sub(r.add(l.positionImpulse,l.position,f),r.add(s.positionImpulse,r.sub(l.position,a.penetration,p),y),m),o.separation=r.dot(c,u));for(n=0;n<e.length;n++)(o=e[n]).isActive&&!o.isSensor&&(s=(a=o.collision).parentA,l=a.parentB,c=a.normal,d=(o.separation-o.slop)*t,(s.isStatic||l.isStatic)&&(d*=2),s.isStatic||s.isSleeping||(h=i._positionDampen/s.totalContacts,s.positionImpulse.x+=c.x*d*h,s.positionImpulse.y+=c.y*d*h),l.isStatic||l.isSleeping||(h=i._positionDampen/l.totalContacts,l.positionImpulse.x-=c.x*d*h,l.positionImpulse.y-=c.y*d*h))},i.postSolvePosition=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.totalContacts=0,0!==n.positionImpulse.x||0!==n.positionImpulse.y){for(var a=0;a<n.parts.length;a++){var l=n.parts[a];o.translate(l.vertices,n.positionImpulse),s.update(l.bounds,l.vertices,n.velocity),l.position.x+=n.positionImpulse.x,l.position.y+=n.positionImpulse.y}n.positionPrev.x+=n.positionImpulse.x,n.positionPrev.y+=n.positionImpulse.y,r.dot(n.positionImpulse,n.velocity)<0?(n.positionImpulse.x=0,n.positionImpulse.y=0):(n.positionImpulse.x*=i._positionWarming,n.positionImpulse.y*=i._positionWarming)}}},i.preSolveVelocity=function(e){var t,n,i,o,a,s,l,c,u,h,d,f,p,y,m=r._temp[0],v=r._temp[1];for(t=0;t<e.length;t++)if((i=e[t]).isActive&&!i.isSensor)for(o=i.activeContacts,s=(a=i.collision).parentA,l=a.parentB,c=a.normal,u=a.tangent,n=0;n<o.length;n++)d=(h=o[n]).vertex,f=h.normalImpulse,p=h.tangentImpulse,0===f&&0===p||(m.x=c.x*f+u.x*p,m.y=c.y*f+u.y*p,s.isStatic||s.isSleeping||(y=r.sub(d,s.position,v),s.positionPrev.x+=m.x*s.inverseMass,s.positionPrev.y+=m.y*s.inverseMass,s.anglePrev+=r.cross(y,m)*s.inverseInertia),l.isStatic||l.isSleeping||(y=r.sub(d,l.position,v),l.positionPrev.x-=m.x*l.inverseMass,l.positionPrev.y-=m.y*l.inverseMass,l.anglePrev-=r.cross(y,m)*l.inverseInertia))},i.solveVelocity=function(e,t){for(var n=t*t,o=r._temp[0],s=r._temp[1],l=r._temp[2],c=r._temp[3],u=r._temp[4],h=r._temp[5],d=0;d<e.length;d++){var f=e[d];if(f.isActive&&!f.isSensor){var p=f.collision,y=p.parentA,m=p.parentB,v=p.normal,g=p.tangent,x=f.activeContacts,b=1/x.length;y.velocity.x=y.position.x-y.positionPrev.x,y.velocity.y=y.position.y-y.positionPrev.y,m.velocity.x=m.position.x-m.positionPrev.x,m.velocity.y=m.position.y-m.positionPrev.y,y.angularVelocity=y.angle-y.anglePrev,m.angularVelocity=m.angle-m.anglePrev;for(var w=0;w<x.length;w++){var A=x[w],C=A.vertex,S=r.sub(C,y.position,s),k=r.sub(C,m.position,l),P=r.add(y.velocity,r.mult(r.perp(S),y.angularVelocity),c),R=r.add(m.velocity,r.mult(r.perp(k),m.angularVelocity),u),B=r.sub(P,R,h),M=r.dot(v,B),_=r.dot(g,B),T=Math.abs(_),I=a.sign(_),E=(1+f.restitution)*M,O=a.clamp(f.separation+M,0,1)*i._frictionNormalMultiplier,L=_,W=1/0;T>f.friction*f.frictionStatic*O*n&&(W=T,L=a.clamp(f.friction*I*n,-W,W));var D=r.cross(S,v),F=r.cross(k,v),j=b/(y.inverseMass+m.inverseMass+y.inverseInertia*D*D+m.inverseInertia*F*F);if(E*=j,L*=j,M<0&&M*M>i._restingThresh*n)A.normalImpulse=0;else{var z=A.normalImpulse;A.normalImpulse=Math.min(A.normalImpulse+E,0),E=A.normalImpulse-z}if(_*_>i._restingThreshTangent*n)A.tangentImpulse=0;else{var H=A.tangentImpulse;A.tangentImpulse=a.clamp(A.tangentImpulse+L,-W,W),L=A.tangentImpulse-H}o.x=v.x*E+g.x*L,o.y=v.y*E+g.y*L,y.isStatic||y.isSleeping||(y.positionPrev.x+=o.x*y.inverseMass,y.positionPrev.y+=o.y*y.inverseMass,y.anglePrev+=r.cross(S,o)*y.inverseInertia),m.isStatic||m.isSleeping||(m.positionPrev.x-=o.x*m.inverseMass,m.positionPrev.y-=o.y*m.inverseMass,m.anglePrev-=r.cross(k,o)*m.inverseInertia)}}}}},function(e,t,n){var i={};e.exports=i;var o=n(9),r=n(0);i._pairMaxIdleLife=1e3,i.create=function(e){return r.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},i.update=function(e,t,n){var i,r,a,s,l=e.list,c=e.table,u=e.collisionStart,h=e.collisionEnd,d=e.collisionActive;for(u.length=0,h.length=0,d.length=0,s=0;s<l.length;s++)l[s].confirmedActive=!1;for(s=0;s<t.length;s++)(i=t[s]).collided&&((a=c[r=o.id(i.bodyA,i.bodyB)])?(a.isActive?d.push(a):u.push(a),o.update(a,i,n),a.confirmedActive=!0):(a=o.create(i,n),c[r]=a,u.push(a),l.push(a)));for(s=0;s<l.length;s++)(a=l[s]).isActive&&!a.confirmedActive&&(o.setActive(a,!1,n),h.push(a))},i.removeOld=function(e,t){var n,o,r,a,s=e.list,l=e.table,c=[];for(a=0;a<s.length;a++)(o=(n=s[a]).collision).bodyA.isSleeping||o.bodyB.isSleeping?n.timeUpdated=t:t-n.timeUpdated>i._pairMaxIdleLife&&c.push(a);for(a=0;a<c.length;a++)delete l[(n=s[r=c[a]-a]).id],s.splice(r,1)},i.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},function(e,t,n){var i={};e.exports=i;var o=n(9),r=n(0);i.create=function(e){return r.extend({buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48},e)},i.update=function(e,t,n,o){var r,a,s,l,c,u=n.world,h=e.buckets,d=!1;for(r=0;r<t.length;r++){var f=t[r];if((!f.isSleeping||o)&&(!u.bounds||!(f.bounds.max.x<u.bounds.min.x||f.bounds.min.x>u.bounds.max.x||f.bounds.max.y<u.bounds.min.y||f.bounds.min.y>u.bounds.max.y))){var p=i._getRegion(e,f);if(!f.region||p.id!==f.region.id||o){f.region&&!o||(f.region=p);var y=i._regionUnion(p,f.region);for(a=y.startCol;a<=y.endCol;a++)for(s=y.startRow;s<=y.endRow;s++){l=h[c=i._getBucketId(a,s)];var m=a>=p.startCol&&a<=p.endCol&&s>=p.startRow&&s<=p.endRow,v=a>=f.region.startCol&&a<=f.region.endCol&&s>=f.region.startRow&&s<=f.region.endRow;!m&&v&&v&&l&&i._bucketRemoveBody(e,l,f),(f.region===p||m&&!v||o)&&(l||(l=i._createBucket(h,c)),i._bucketAddBody(e,l,f))}f.region=p,d=!0}}}d&&(e.pairsList=i._createActivePairsList(e))},i.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},i._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),o=Math.max(e.endCol,t.endCol),r=Math.min(e.startRow,t.startRow),a=Math.max(e.endRow,t.endRow);return i._createRegion(n,o,r,a)},i._getRegion=function(e,t){var n=t.bounds,o=Math.floor(n.min.x/e.bucketWidth),r=Math.floor(n.max.x/e.bucketWidth),a=Math.floor(n.min.y/e.bucketHeight),s=Math.floor(n.max.y/e.bucketHeight);return i._createRegion(o,r,a,s)},i._createRegion=function(e,t,n,i){return{id:e+","+t+","+n+","+i,startCol:e,endCol:t,startRow:n,endRow:i}},i._getBucketId=function(e,t){return"C"+e+"R"+t},i._createBucket=function(e,t){return e[t]=[]},i._bucketAddBody=function(e,t,n){for(var i=0;i<t.length;i++){var r=t[i];if(!(n.id===r.id||n.isStatic&&r.isStatic)){var a=o.id(n,r),s=e.pairs[a];s?s[2]+=1:e.pairs[a]=[n,r,1]}}t.push(n)},i._bucketRemoveBody=function(e,t,n){t.splice(r.indexOf(t,n),1);for(var i=0;i<t.length;i++){var a=t[i],s=o.id(n,a),l=e.pairs[s];l&&(l[2]-=1)}},i._createActivePairsList=function(e){var t,n,i=[];t=r.keys(e.pairs);for(var o=0;o<t.length;o++)(n=e.pairs[t[o]])[2]>0?i.push(n):delete e.pairs[t[o]];return i}},function(e,t,n){var i=e.exports=n(23);i.Axes=n(10),i.Bodies=n(11),i.Body=n(6),i.Bounds=n(1),i.Common=n(0),i.Composite=n(5),i.Composites=n(24),i.Constraint=n(8),i.Contact=n(17),i.Detector=n(13),i.Engine=n(18),i.Events=n(4),i.Grid=n(21),i.Mouse=n(12),i.MouseConstraint=n(25),i.Pair=n(9),i.Pairs=n(20),i.Plugin=n(15),i.Query=n(26),i.Render=n(16),i.Resolver=n(19),i.Runner=n(27),i.SAT=n(14),i.Sleeping=n(7),i.Svg=n(28),i.Vector=n(2),i.Vertices=n(3),i.World=n(29),i.Engine.run=i.Runner.run,i.Common.deprecated(i.Engine,"run","Engine.run ➤ use Matter.Runner.run(engine) instead")},function(e,t,n){var i={};e.exports=i;var o=n(15),r=n(0);i.name="matter-js",i.version="0.17.1",i.uses=[],i.used=[],i.use=function(){o.use(i,Array.prototype.slice.call(arguments))},i.before=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathBefore(i,e,t)},i.after=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathAfter(i,e,t)}},function(e,t,n){var i={};e.exports=i;var o=n(5),r=n(8),a=n(0),s=n(6),l=n(11),c=a.deprecated;i.stack=function(e,t,n,i,r,a,l){for(var c,u=o.create({label:"Stack"}),h=e,d=t,f=0,p=0;p<i;p++){for(var y=0,m=0;m<n;m++){var v=l(h,d,m,p,c,f);if(v){var g=v.bounds.max.y-v.bounds.min.y,x=v.bounds.max.x-v.bounds.min.x;g>y&&(y=g),s.translate(v,{x:.5*x,y:.5*g}),h=v.bounds.max.x+r,o.addBody(u,v),c=v,f+=1}else h+=r}d+=y+a,h=e}return u},i.chain=function(e,t,n,i,s,l){for(var c=e.bodies,u=1;u<c.length;u++){var h=c[u-1],d=c[u],f=h.bounds.max.y-h.bounds.min.y,p=h.bounds.max.x-h.bounds.min.x,y=d.bounds.max.y-d.bounds.min.y,m={bodyA:h,pointA:{x:p*t,y:f*n},bodyB:d,pointB:{x:(d.bounds.max.x-d.bounds.min.x)*i,y:y*s}},v=a.extend(m,l);o.addConstraint(e,r.create(v))}return e.label+=" Chain",e},i.mesh=function(e,t,n,i,s){var l,c,u,h,d,f=e.bodies;for(l=0;l<n;l++){for(c=1;c<t;c++)u=f[c-1+l*t],h=f[c+l*t],o.addConstraint(e,r.create(a.extend({bodyA:u,bodyB:h},s)));if(l>0)for(c=0;c<t;c++)u=f[c+(l-1)*t],h=f[c+l*t],o.addConstraint(e,r.create(a.extend({bodyA:u,bodyB:h},s))),i&&c>0&&(d=f[c-1+(l-1)*t],o.addConstraint(e,r.create(a.extend({bodyA:d,bodyB:h},s)))),i&&c<t-1&&(d=f[c+1+(l-1)*t],o.addConstraint(e,r.create(a.extend({bodyA:d,bodyB:h},s))))}return e.label+=" Mesh",e},i.pyramid=function(e,t,n,o,r,a,l){return i.stack(e,t,n,o,r,a,(function(t,i,a,c,u,h){var d=Math.min(o,Math.ceil(n/2)),f=u?u.bounds.max.x-u.bounds.min.x:0;if(!(c>d||a<(c=d-c)||a>n-1-c))return 1===h&&s.translate(u,{x:(a+(n%2==1?1:-1))*f,y:0}),l(e+(u?a*f:0)+a*r,i,a,c,u,h)}))},i.newtonsCradle=function(e,t,n,i,a){for(var s=o.create({label:"Newtons Cradle"}),c=0;c<n;c++){var u=l.circle(e+c*(1.9*i),t+a,i,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),h=r.create({pointA:{x:e+c*(1.9*i),y:t},bodyB:u});o.addBody(s,u),o.addConstraint(s,h)}return s},c(i,"newtonsCradle","Composites.newtonsCradle ➤ moved to newtonsCradle example"),i.car=function(e,t,n,i,a){var c=s.nextGroup(!0),u=.5*-n+20,h=.5*n-20,d=o.create({label:"Car"}),f=l.rectangle(e,t,n,i,{collisionFilter:{group:c},chamfer:{radius:.5*i},density:2e-4}),p=l.circle(e+u,t+0,a,{collisionFilter:{group:c},friction:.8}),y=l.circle(e+h,t+0,a,{collisionFilter:{group:c},friction:.8}),m=r.create({bodyB:f,pointB:{x:u,y:0},bodyA:p,stiffness:1,length:0}),v=r.create({bodyB:f,pointB:{x:h,y:0},bodyA:y,stiffness:1,length:0});return o.addBody(d,f),o.addBody(d,p),o.addBody(d,y),o.addConstraint(d,m),o.addConstraint(d,v),d},c(i,"car","Composites.car ➤ moved to car example"),i.softBody=function(e,t,n,o,r,s,c,u,h,d){h=a.extend({inertia:1/0},h),d=a.extend({stiffness:.2,render:{type:"line",anchors:!1}},d);var f=i.stack(e,t,n,o,r,s,(function(e,t){return l.circle(e,t,u,h)}));return i.mesh(f,n,o,c,d),f.label="Soft Body",f},c(i,"softBody","Composites.softBody ➤ moved to softBody and cloth examples")},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(7),a=n(12),s=n(4),l=n(13),c=n(8),u=n(5),h=n(0),d=n(1);i.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=a.create(e.render.canvas):t&&t.element?n=a.create(t.element):(n=a.create(),h.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var o={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:c.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},r=h.extend(o,t);return s.on(e,"beforeUpdate",(function(){var t=u.allBodies(e.world);i.update(r,t),i._triggerEvents(r)})),r},i.update=function(e,t){var n=e.mouse,i=e.constraint,a=e.body;if(0===n.button){if(i.bodyB)r.set(i.bodyB,!1),i.pointA=n.position;else for(var c=0;c<t.length;c++)if(a=t[c],d.contains(a.bounds,n.position)&&l.canCollide(a.collisionFilter,e.collisionFilter))for(var u=a.parts.length>1?1:0;u<a.parts.length;u++){var h=a.parts[u];if(o.contains(h.vertices,n.position)){i.pointA=n.position,i.bodyB=e.body=a,i.pointB={x:n.position.x-a.position.x,y:n.position.y-a.position.y},i.angleB=a.angle,r.set(a,!1),s.trigger(e,"startdrag",{mouse:n,body:a});break}}}else i.bodyB=e.body=null,i.pointB=null,a&&s.trigger(e,"enddrag",{mouse:n,body:a})},i._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&s.trigger(e,"mousemove",{mouse:t}),n.mousedown&&s.trigger(e,"mousedown",{mouse:t}),n.mouseup&&s.trigger(e,"mouseup",{mouse:t}),a.clearSourceEvents(t)}},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(14),a=n(1),s=n(11),l=n(3);i.collides=function(e,t){for(var n=[],i=0;i<t.length;i++){var o=t[i];if(a.overlaps(o.bounds,e.bounds))for(var s=1===o.parts.length?0:1;s<o.parts.length;s++){var l=o.parts[s];if(a.overlaps(l.bounds,e.bounds)){var c=r.collides(l,e);if(c.collided){n.push(c);break}}}}return n},i.ray=function(e,t,n,r){r=r||1e-100;for(var a=o.angle(t,n),l=o.magnitude(o.sub(t,n)),c=.5*(n.x+t.x),u=.5*(n.y+t.y),h=s.rectangle(c,u,l,r,{angle:a}),d=i.collides(h,e),f=0;f<d.length;f+=1){var p=d[f];p.body=p.bodyB=p.bodyA}return d},i.region=function(e,t,n){for(var i=[],o=0;o<e.length;o++){var r=e[o],s=a.overlaps(r.bounds,t);(s&&!n||!s&&n)&&i.push(r)}return i},i.point=function(e,t){for(var n=[],i=0;i<e.length;i++){var o=e[i];if(a.contains(o.bounds,t))for(var r=1===o.parts.length?0:1;r<o.parts.length;r++){var s=o.parts[r];if(a.contains(s.bounds,t)&&l.contains(s.vertices,t)){n.push(o);break}}}return n}},function(e,t,n){var i={};e.exports=i;var o,r,a,s=n(4),l=n(18),c=n(0);"undefined"!=typeof window&&(o=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,r=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o||(o=function(e){a=setTimeout((function(){e(c.now())}),1e3/60)},r=function(){clearTimeout(a)}),i.create=function(e){var t=c.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},i.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=i.create()),function n(r){e.frameRequestId=o(n),r&&e.enabled&&i.tick(e,t,r)}(),e},i.tick=function(e,t,n){var i,o=t.timing,r=1,a={timestamp:o.timestamp};s.trigger(e,"beforeTick",a),e.isFixed?i=e.delta:(i=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(i),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),r=(i=(i=(i=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:i)>e.deltaMax?e.deltaMax:i)/e.delta,e.delta=i),0!==e.timeScalePrev&&(r*=o.timeScale/e.timeScalePrev),0===o.timeScale&&(r=0),e.timeScalePrev=o.timeScale,e.correction=r,e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),s.trigger(e,"tick",a),s.trigger(e,"beforeUpdate",a),l.update(t,i,r),s.trigger(e,"afterUpdate",a),s.trigger(e,"afterTick",a)},i.stop=function(e){r(e.frameRequestId)},i.start=function(e,t){i.run(e,t)}},function(e,t,n){var i={};e.exports=i,n(1);var o=n(0);i.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||o.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,r,a,s,l,c,u,h,d,f,p,y=[],m=0,v=0,g=0;t=t||15;var x=function(e,t,n){var i=n%2==1&&n>1;if(!d||e!=d.x||t!=d.y){d&&i?(f=d.x,p=d.y):(f=0,p=0);var o={x:f+e,y:p+t};!i&&d||(d=o),y.push(o),v=f+e,g=p+t}},b=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":v=e.x,g=e.y;break;case"H":v=e.x;break;case"V":g=e.y}x(v,g,e.pathSegType)}};for(i._svgPathToAbsolute(e),a=e.getTotalLength(),c=[],n=0;n<e.pathSegList.numberOfItems;n+=1)c.push(e.pathSegList.getItem(n));for(u=c.concat();m<a;){if((l=c[e.getPathSegAtLength(m)])!=h){for(;u.length&&u[0]!=l;)b(u.shift());h=l}switch(l.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":s=e.getPointAtLength(m),x(s.x,s.y,0)}m+=t}for(n=0,r=u.length;n<r;++n)b(u[n]);return y},i._svgPathToAbsolute=function(e){for(var t,n,i,o,r,a,s=e.pathSegList,l=0,c=0,u=s.numberOfItems,h=0;h<u;++h){var d=s.getItem(h),f=d.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))"x"in d&&(l=d.x),"y"in d&&(c=d.y);else switch("x1"in d&&(i=l+d.x1),"x2"in d&&(r=l+d.x2),"y1"in d&&(o=c+d.y1),"y2"in d&&(a=c+d.y2),"x"in d&&(l+=d.x),"y"in d&&(c+=d.y),f){case"m":s.replaceItem(e.createSVGPathSegMovetoAbs(l,c),h);break;case"l":s.replaceItem(e.createSVGPathSegLinetoAbs(l,c),h);break;case"h":s.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(l),h);break;case"v":s.replaceItem(e.createSVGPathSegLinetoVerticalAbs(c),h);break;case"c":s.replaceItem(e.createSVGPathSegCurvetoCubicAbs(l,c,i,o,r,a),h);break;case"s":s.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(l,c,r,a),h);break;case"q":s.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(l,c,i,o),h);break;case"t":s.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(l,c),h);break;case"a":s.replaceItem(e.createSVGPathSegArcAbs(l,c,d.r1,d.r2,d.angle,d.largeArcFlag,d.sweepFlag),h);break;case"z":case"Z":l=t,c=n}"M"!=f&&"m"!=f||(t=l,n=c)}}},function(e,t,n){var i={};e.exports=i;var o=n(5);n(0),i.create=o.create,i.add=o.add,i.remove=o.remove,i.clear=o.clear,i.addComposite=o.addComposite,i.addBody=o.addBody,i.addConstraint=o.addConstraint}])},e.exports=i()},379:(e,t,n)=>{"use strict";var i,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),r=[];function a(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},i=[],o=0;o<e.length;o++){var s=e[o],l=t.base?s[0]+t.base:s[0],c=n[l]||0,u="".concat(l," ").concat(c);n[l]=c+1;var h=a(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==h?(r[h].references++,r[h].updater(d)):r.push({identifier:u,updater:y(d,t),references:1}),i.push(u)}return i}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function h(e,t,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}function d(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,p=0;function y(e,t){var n,i,o;if(t.singleton){var r=p++;n=f||(f=l(t)),i=h.bind(null,n,r,!1),o=h.bind(null,n,r,!0)}else n=l(t),i=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=a(n[i]);r[o].references--}for(var l=s(e,t),c=0;c<n.length;c++){var u=a(n[c]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}n=l}}}},93:(e,t,n)=>{"use strict";e.exports=n.p+"7e38cc7026295c4987ec.mp3"},278:(e,t,n)=>{"use strict";e.exports=n.p+"ddee8fde823e80fc8be7.mp3"},391:(e,t,n)=>{"use strict";e.exports=n.p+"e98f18bd5148bdefc134.mp3"},281:(e,t,n)=>{"use strict";e.exports=n.p+"aa5d1df31dc46c18a451.mp3"},530:(e,t,n)=>{"use strict";e.exports=n.p+"0c2de0a9d1cc1375d038.mp3"}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={id:i,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";var e=n(379),t=n.n(e),i=n(566);t()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;var o=function(){function e(){this.enabled=!0,this.soundCache={};var e=window.AudioContext||window.webkitAudioContext;this.audioContext=new e,this.buffer=this.audioContext.createBuffer(1,1*this.audioContext.sampleRate,this.audioContext.sampleRate),this.channelData=this.buffer.getChannelData(0),this.primaryGainControl=this.audioContext.createGain(),this.primaryGainControl.gain.setValueAtTime(.5,0),this.primaryGainControl.connect(this.audioContext.destination)}return e.prototype.initialize=function(){},e.prototype.playNote=function(e,t,n){if(void 0===e&&(e=150),void 0===t&&(t=.2),void 0===n&&(n=""),this.enabled){var i=this.audioContext.createOscillator();n&&(i.type=n),i.frequency.setValueAtTime(e,this.audioContext.currentTime);var o=this.audioContext.createGain();o.gain.setValueAtTime(1,this.audioContext.currentTime),o.gain.linearRampToValueAtTime(.01,this.audioContext.currentTime+t),i.connect(o),o.connect(this.primaryGainControl),i.start(),i.stop(this.audioContext.currentTime+t)}},e.prototype.playCustomSound=function(e,t,n){var i=this;if(void 0===t&&(t=""),this.enabled){var o=this.audioContext.createOscillator();t&&(o.type=t);var r=0;e.forEach((function(e){o.frequency.setValueAtTime(e.f,i.audioContext.currentTime+r+e.t),r+=e.t}));var a=this.audioContext.createGain();return a.gain.setValueAtTime(1,this.audioContext.currentTime),a.gain.linearRampToValueAtTime(.01,this.audioContext.currentTime+r),o.connect(a),a.connect(this.primaryGainControl),n&&(o.onended=n),o.start(),o.stop(this.audioContext.currentTime+r),o}},e.prototype.playCustomSoundNoFall=function(e,t,n){var i=this;if(void 0===t&&(t=""),this.enabled){var o=this.audioContext.createOscillator();t&&(o.type=t);var r=0;e.forEach((function(e){o.frequency.setValueAtTime(e.f,i.audioContext.currentTime+r+e.t),r+=e.t}));var a=this.audioContext.createGain();return a.gain.setValueAtTime(1,this.audioContext.currentTime),o.connect(a),a.connect(this.primaryGainControl),n&&(o.onended=n),o.start(),o.stop(this.audioContext.currentTime+r),o}},e.prototype.loadSound=function(e){return void 0===e&&(e="https://raw.githubusercontent.com/TinaSoltanian/Patatap/master/sounds/bubbles.mp3"),t=this,n=void 0,o=function(){var t,n,i;return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(o){switch(o.label){case 0:return t="cache-"+e,this.soundCache[t]?[2,this.soundCache[t]]:[4,fetch(e)];case 1:return[4,o.sent().arrayBuffer()];case 2:return n=o.sent(),[4,this.audioContext.decodeAudioData(n)];case 3:return i=o.sent(),this.soundCache[t]=i,[2,i]}}))},new((i=void 0)||(i=Promise))((function(e,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(a,s)}l((o=o.apply(t,n||[])).next())}));var t,n,i,o},e.prototype.playSound=function(e,t){if(this.enabled){var n=this.audioContext.createBufferSource();n.buffer=e;var i=this.audioContext.createGain();return i.gain.setValueAtTime(1,this.audioContext.currentTime),n.connect(i),i.connect(this.primaryGainControl),t&&(n.onended=t),n.start(),n}},e}();function r(e,t){void 0===t&&(t=0);var n=e.target.getBoundingClientRect();return[e.touches[t].clientX-n.left,e.touches[t].clientY-n.top]}function a(e){for(var t=e.target.getBoundingClientRect(),n=[],i=0;i<e.touches.length;i++)n.push({x:e.touches[i].clientX-t.left,y:e.touches[i].clientY-t.top,id:e.touches[i].identifier});return n}function s(e,t){var n=e.x-t.x,i=e.y-t.y;return Math.sqrt(n*n+i*i)}function l(e,t,n){return void 0===n&&(n=!1),n?180*Math.atan2(t.y-e.y,t.x-e.x)/Math.PI:Math.atan2(t.y-e.y,t.x-e.x)}function c(e,t){return{x:Math.cos(e)*t,y:Math.sin(e)*t}}function u(e){return e*(180/Math.PI)}function h(e){return e*(Math.PI/180)}function d(e,t){var n=e.c,i=e.x,o=e.y,r=e.a;n.save(),n.translate(i,o),n.rotate(r*Math.PI/180),t(),n.restore()}function f(e){var t=e.c,n=e.x,i=e.y,o=e.radius,r=e.startAngle,a=e.endAngle,s=e.fillColor,l=e.strokeWidth,c=e.strokeColor;t.beginPath(),t.arc(n,i,o,r?h(r):0,a?h(a):2*Math.PI),s&&(t.fillStyle=s,t.fill()),l&&c&&(t.strokeStyle=c,t.lineWidth=l,t.stroke())}function p(e){var t=e.c,n=e.x,i=e.y,o=e.width,r=e.height,a=e.fillColor,s=e.strokeWidth,l=e.strokeColor;t.beginPath(),t.rect(n,i,o,r),a&&(t.fillStyle=a,t.fill()),s&&l&&(t.strokeStyle=l,t.lineWidth=s,t.stroke())}function y(e){var t=e.c,n=e.x,i=e.y,o=e.fillColor,r=e.strokeWidth,a=e.strokeColor,s=e.text,l=e.fontFamily,c=e.fontSize,u=e.align,h=e.style,d=e.weight;t.textAlign=u||"center",t.font=(h?h+" ":"")+(d?d+" ":"")+c+"px "+l,r&&a&&(t.strokeStyle=a,t.lineWidth=r,t.strokeText(s,n,i)),o&&(t.fillStyle=o,t.fillText(s,n,i))}var m,v=function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))},g=function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},x=function(){function e(e){var t=this;this.gameActive=!1,this.cameraPos={x:0,y:0},this.lastUpdate=Date.now(),this.updateDiff=Date.now(),this.updateTick=1e3/60,this.fps=0,this.diffMulti=this.updateDiff/this.updateTick,this.keyBoardEnabled=!1,this.pressedKeys={},this.mouseEnabled=!1,this.mouseInfo={x:-100,y:-100,mouseDown:!1},this.touchInfo=[],this.touchMode=!1,this.levels={},this.activeLevel="",this.targetLevel="",this.pendingLevelLoad=!1,this.basedObjectRefs={},this.loadingMessage="Loading Assets",this.currentlyLoading="",this.canvasElement=this.createCanvas(),this.canvasElement.width=e.width?e.width:200,this.gameWidth=this.canvasElement.width,this.canvasElement.height=e.height?e.height:400,this.gameHeight=this.canvasElement.height;var n=e.canvasElementId?document.getElementById(e.canvasElementId):document;n&&n.appendChild(this.canvasElement),this.ctx=this.createContextFromElement(this.canvasElement),this.soundPlayer=new o,window.addEventListener("resize",(function(e){t.resizeCanvas()})),e.levels&&e.levels.forEach((function(e){t.levels[e.key]=new e.level({key:e.key,gameRef:t}),""==t.activeLevel&&(t.activeLevel=e.key)})),this.gameLoop=this.gameLoop.bind(this),this.update=this.update.bind(this),this.tick=this.tick.bind(this),this.draw=this.draw.bind(this)}return e.prototype.createCanvas=function(){return document.createElement("canvas")},e.prototype.resizeCanvas=function(){this.canvasElement.width=window.innerWidth,this.canvasElement.height=window.innerHeight,this.gameWidth=this.canvasElement.width,this.gameHeight=this.canvasElement.height,this.ctx=this.createContextFromElement(this.canvasElement),this.levels[this.activeLevel].onResize&&this.levels[this.activeLevel].onResize()},e.prototype.createContextFromElement=function(e){return e.getContext("2d")},e.prototype.enableMouse=function(){var e=this;this.canvasElement.addEventListener("mousedown",(function(t){e.mouseInfo.mouseDown=!0})),this.canvasElement.addEventListener("mousemove",(function(t){var n;n=function(e){var t=e.target.getBoundingClientRect();return[e.clientX-t.left,e.clientY-t.top]}(t),e.mouseInfo.x=n[0],e.mouseInfo.y=n[1]})),window.addEventListener("mouseup",(function(t){e.mouseInfo.mouseDown=!1})),this.canvasElement.addEventListener("touchstart",(function(t){var n;n=r(t),e.mouseInfo.x=n[0],e.mouseInfo.y=n[1],e.mouseInfo.mouseDown=!0,e.touchMode=!0,e.touchInfo=a(t)})),this.canvasElement.addEventListener("touchmove",(function(t){var n;n=r(t),e.mouseInfo.x=n[0],e.mouseInfo.y=n[1],e.touchInfo=a(t)})),window.addEventListener("touchend",(function(t){e.mouseInfo.mouseDown=!1,e.touchInfo=a(t)}))},e.prototype.enableKeyboard=function(){var e=this;this.keyBoardEnabled||(document.addEventListener("keydown",(function(t){e.pressedKeys[t.code]=!0})),document.addEventListener("keyup",(function(t){e.pressedKeys[t.code]=!1})))},e.prototype.tick=function(){this.updateDiff=Date.now()-this.lastUpdate,this.fps=1/(this.updateDiff/1e3),this.diffMulti=this.updateDiff/this.updateTick,this.lastUpdate=Date.now()},e.prototype.start=function(){return v(this,void 0,void 0,(function(){return g(this,(function(e){switch(e.label){case 0:return this.drawLoading(),this.soundPlayer.initialize(),this.gameActive=!0,this.targetLevel=this.activeLevel,[4,this.levels[this.activeLevel].preload()];case 1:return e.sent(),this.levels[this.activeLevel].initialize(),this.animFrame=window.requestAnimationFrame(this.gameLoop),[2]}}))}))},e.prototype.update=function(){this.tick(),this.levels[this.activeLevel].update()},e.prototype.draw=function(){this.levels[this.activeLevel].draw()},e.prototype.drawLoading=function(e){this.ctx.beginPath(),this.ctx.rect(0,0,this.gameWidth,this.gameHeight),this.ctx.fillStyle="#eee",this.ctx.fill(),y({c:this.ctx,x:this.gameWidth/2,y:100,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"500",fontFamily:"sans-serif",fontSize:20,text:this.loadingMessage}),y({c:this.ctx,x:this.gameWidth/2,y:150,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"500",fontFamily:"sans-serif",fontSize:20,text:e||this.currentlyLoading})},e.prototype.loadLevel=function(e){this.targetLevel=e,this.pendingLevelLoad=!0},e.prototype.handleLevelLoad=function(){return v(this,void 0,void 0,(function(){return g(this,(function(e){switch(e.label){case 0:return this.loadingMessage="Loading Assets",this.currentlyLoading="",this.drawLoading(),this.levels[this.activeLevel].tearDown(),this.activeLevel=this.targetLevel,[4,this.levels[this.activeLevel].preload()];case 1:return e.sent(),this.levels[this.activeLevel].initialize(),this.pendingLevelLoad=!1,this.animFrame=window.requestAnimationFrame(this.gameLoop),[2]}}))}))},e.prototype.gameLoop=function(){this.gameActive&&(this.activeLevel!==this.targetLevel||this.pendingLevelLoad?this.handleLevelLoad():(this.update(),this.draw(),this.animFrame=window.requestAnimationFrame(this.gameLoop)))},e}(),b=function(){function e(e){this.levelKey=e.key,this.gameRef=e.gameRef,this.initialize=this.initialize.bind(this),this.update=this.update.bind(this),this.draw=this.draw.bind(this),this.tearDown=this.tearDown.bind(this)}return e.prototype.preload=function(){return e=this,t=void 0,i=function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(e){return[2]}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},e.prototype.initialize=function(){},e.prototype.update=function(){},e.prototype.draw=function(){},e.prototype.onResize=function(){},e.prototype.tearDown=function(){},e}(),w=n(842),A=n.n(w),C=function(){function e(e){this.x=0,this.y=0,this.objectKey=e.key,this.gameRef=e.gameRef,this.initialize=this.initialize.bind(this),this.preload=this.preload.bind(this),this.update=this.update.bind(this),this.draw=this.draw.bind(this),this.tearDown=this.tearDown.bind(this),this.gameRef.basedObjectRefs[this.objectKey]=this}return e.prototype.preload=function(){return e=this,t=void 0,i=function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(e){return[2]}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},e.prototype.initialize=function(){},e.prototype.update=function(){},e.prototype.draw=function(){},e.prototype.tearDown=function(){},e}(),S=(m=function(e,t){return(m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}m(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),k=function(){return(k=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};const P=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.x=0,t.y=0,t.width=40,t.height=40,t.color="blue",t.bodyOptions={label:"asdfgh",restitution:.8},t.bodyCenter={x:0,y:0},t.collisionStartFn=function(e){return null},t.collisionEndFn=function(e){return null},t}return S(t,e),t.prototype.preload=function(){return e=this,t=void 0,i=function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(e){return[2]}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},t.prototype.initialize=function(){var e=this;this.body=A().Bodies.rectangle(this.x,this.y,this.width,this.height,k(k({},this.bodyOptions),{plugin:{collisionStart:function(t){return e.onCollisionStart(t)},collisionEnd:function(t){return e.onCollisionEnd(t)}}})),this.setCenter()},t.prototype.setCenter=function(){this.body&&A().Body.setCentre(this.body,this.bodyCenter,!0)},t.prototype.onCollisionStart=function(e){this.collisionStartFn(e)},t.prototype.onCollisionEnd=function(e){this.collisionEndFn(e)},t.prototype.update=function(){},t.prototype.draw=function(){var e=this;d({c:this.gameRef.ctx,x:this.body.position.x+this.gameRef.cameraPos.x,y:this.body.position.y+this.gameRef.cameraPos.y,a:u(this.body.angle)},(function(){p({c:e.gameRef.ctx,x:-e.width/2-e.bodyCenter.x,y:-e.height/2-e.bodyCenter.y,width:e.width,height:e.height,fillColor:e.color})}))},t.prototype.tearDown=function(){},t}(C);var R=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),B=function(){return(B=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};const M=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.x=0,t.y=0,t.radius=15,t.color="blue",t.bodyOptions={label:"ball",restitution:.8},t.active=!1,t.bodyCenter={x:0,y:0},t.collisionStartFn=function(e){return null},t.collisionEndFn=function(e){return null},t}return R(t,e),t.prototype.preload=function(){return e=this,t=void 0,i=function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(e){return[2]}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},t.prototype.initialize=function(){var e=this;this.body=A().Bodies.circle(this.x,this.y,this.radius,B(B({},this.bodyOptions),{plugin:{collisionStart:function(t){return e.onCollisionStart(t)},collisionEnd:function(t){return e.onCollisionEnd(t)}}})),this.setCenter()},t.prototype.setCenter=function(){this.body&&A().Body.setCentre(this.body,this.bodyCenter,!0)},t.prototype.onCollisionStart=function(e){this.collisionStartFn(e)},t.prototype.onCollisionEnd=function(e){this.collisionEndFn(e)},t.prototype.update=function(){},t.prototype.draw=function(){var e=this;d({c:this.gameRef.ctx,x:this.body.position.x+this.gameRef.cameraPos.x,y:this.body.position.y+this.gameRef.cameraPos.y,a:u(this.body.angle)},(function(){f({c:e.gameRef.ctx,x:-e.bodyCenter.x,y:-e.bodyCenter.y,radius:e.radius,fillColor:e.color})}))},t.prototype.tearDown=function(){},t}(C);var _=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),T=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.boxes=[],t.level=[],t.itemRef={},t.levelWidth=2e3,t.levelHeight=2e3,t}return _(t,e),t.prototype.preload=function(){return e=this,t=void 0,i=function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(e){return[2]}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},t.prototype.initialize=function(){var e=this;this.physics=A().Engine.create(),this.physics.world.gravity.y=10,this.player=new P({key:"player",gameRef:this.gameRef}),this.player.x=50,this.player.y=200,this.player.width=100,this.player.height=10,this.player.grounded=!0,this.player.bodyOptions={label:"playerBox",density:10},this.player.bodyCenter={x:-20,y:0},this.player.collisionStartFn=function(t){e.player.color="red",e.player.grounded=!0},this.player.collisionEndFn=function(t){e.player.color="blue"},this.player.initialize(),this.addToWorld(this.player.body),this.boxes=[{x:100,y:100,w:40,h:40,o:{density:1,label:"boxA"}},{x:130,y:70,w:40,h:40,o:{density:1,label:"boxB",inertia:1/0}}].map((function(t,n){var i=new P({key:"box"+n,gameRef:e.gameRef});return i.x=t.x,i.y=t.y,i.width=t.w,i.height=t.h,i.bodyOptions=t.o,i.initialize(),e.addToWorld(i.body),i})),this.ballA=new M({key:"ballA",gameRef:this.gameRef}),this.ballA.x=300,this.ballA.y=300,this.ballA.initialize(),this.addToWorld(this.ballA.body),this.level=[{x:0,y:380,w:400,h:60,c:"red",o:{label:"ground",isStatic:!0}},{x:1e3,y:0,w:2e3,h:60,c:"brown",o:{label:"wallTop",isStatic:!0}},{x:0,y:970,w:60,h:2e3,c:"brown",o:{label:"wallLeft",isStatic:!0}},{x:2e3,y:970,w:60,h:2e3,c:"brown",o:{label:"wallRight",isStatic:!0}},{x:1e3,y:2e3,w:2e3,h:60,c:"brown",o:{label:"wallBottom",isStatic:!0}},{x:400,y:380,w:400,h:60,c:"white",o:{label:"sensorSample",isStatic:!0,isSensor:!0}}].map((function(t,n){var i=new P({key:"box"+n,gameRef:e.gameRef});return i.x=t.x,i.y=t.y,i.width=t.w,i.height=t.h,i.bodyOptions=t.o,i.color=t.c,i.initialize(),e.addToWorld(i.body),i})),A().Events.on(this.physics,"collisionStart",(function(e){e.pairs.map((function(e){var t=e.bodyA,n=e.bodyB;t.plugin.collisionStart(n),n.plugin.collisionStart(t)}))})),A().Events.on(this.physics,"collisionEnd",(function(e){e.pairs.map((function(e){var t=e.bodyA,n=e.bodyB;t.plugin.collisionEnd(n),n.plugin.collisionEnd(t)}))}))},t.prototype.handleKeys=function(){var e=this.gameRef.pressedKeys,t=(h(25*this.gameRef.diffMulti),0),n=0,i=this.player.body.velocity.y;(e.KeyA||e.ArrowLeft)&&(n-=1),(e.KeyD||e.ArrowRight)&&(n+=1),(e.KeyW||e.ArrowUp)&&this.player.grounded&&(i=-10,this.player.grounded=!1),(e.KeyS||e.ArrowDown)&&(i=Math.min(i+1,20)),e.KeyX&&(t-=.1),e.KeyC&&(t+=.1),A().Body.setAngularVelocity(this.player.body,t),A().Body.setVelocity(this.player.body,{x:n,y:i})},t.prototype.addToWorld=function(e){A().Composite.add(this.physics.world,e)},t.prototype.update=function(){this.handleKeys(),A().Engine.update(this.physics,this.gameRef.updateDiff),this.updateCamera()},t.prototype.updateCamera=function(){var e=this.player.body.position;this.gameRef.cameraPos={x:-(e.x-this.gameRef.gameWidth/2),y:-(e.y-this.gameRef.gameHeight/2)},this.gameRef.gameWidth<this.levelWidth?(this.gameRef.cameraPos.x>0&&(this.gameRef.cameraPos.x=0),this.gameRef.cameraPos.x-this.gameRef.gameWidth<-1*this.levelWidth&&(this.gameRef.cameraPos.x=-(this.levelWidth-this.gameRef.gameWidth))):this.gameRef.cameraPos.x=(this.gameRef.gameWidth-this.levelWidth)/2,this.gameRef.gameHeight<this.levelHeight?(this.gameRef.cameraPos.y>0&&(this.gameRef.cameraPos.y=0),this.gameRef.cameraPos.y-this.gameRef.gameHeight<-1*this.levelHeight&&(this.gameRef.cameraPos.y=-(this.levelHeight-this.gameRef.gameHeight))):this.gameRef.cameraPos.y=(this.gameRef.gameHeight-this.levelHeight)/2},t.prototype.onResize=function(){},t.prototype.drawBg=function(){this.gameRef.ctx.beginPath(),this.gameRef.ctx.rect(0,0,this.gameRef.gameWidth,this.gameRef.gameHeight),this.gameRef.ctx.fillStyle="#777",this.gameRef.ctx.fill()},t.prototype.draw=function(){this.drawBg(),this.level.forEach((function(e){e.draw()})),this.boxes.forEach((function(e){e.draw()})),this.ballA.draw(),this.player.draw()},t.prototype.tearDown=function(){},t}(b),I=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),E=function(){return(E=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};const O=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.x=0,t.y=0,t.color="orange",t.angle=0,t.vertices=[{x:0,y:0},{x:560,y:0},{x:560,y:20},{x:540,y:40},{x:20,y:40},{x:0,y:20}],t.bodyOptions={label:"asdfgh",restitution:.8},t.bodyCenter={x:0,y:0},t.collisionStartFn=function(e){return null},t.collisionEndFn=function(e){return null},t}return I(t,e),t.prototype.preload=function(){return e=this,t=void 0,i=function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(e){return[2]}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},t.prototype.initialize=function(){var e=this,t=A().Vertices.fromPath(this.vertices.map((function(e){return e.x+" "+e.y})).join(" "),this.bodyOptions);this.body=A().Bodies.fromVertices(this.x,this.y,[t],E(E({},this.bodyOptions),{plugin:{collisionStart:function(t){return e.onCollisionStart(t)},collisionEnd:function(t){return e.onCollisionEnd(t)}}})),this.bodyCenter={x:(this.body.bounds.max.x-this.body.bounds.min.x)/-2,y:(this.body.bounds.max.y-this.body.bounds.min.y)/-2},this.setCenter()},t.prototype.setCenter=function(){this.body&&A().Body.setCentre(this.body,this.bodyCenter,!0)},t.prototype.onCollisionStart=function(e){this.collisionStartFn(e)},t.prototype.onCollisionEnd=function(e){this.collisionEndFn(e)},t.prototype.update=function(){},t.prototype.draw=function(){var e=this;d({c:this.gameRef.ctx,x:this.body.position.x+this.gameRef.cameraPos.x,y:this.body.position.y+this.gameRef.cameraPos.y,a:u(this.body.angle)},(function(){var t=e.gameRef.ctx;t.fillStyle=e.color,t.beginPath(),t.moveTo(e.vertices[0].x,e.vertices[0].y);for(var n=1;n<e.vertices.length;n++)t.lineTo(e.vertices[n].x,e.vertices[n].y);t.lineTo(e.vertices[0].x,e.vertices[0].y),t.closePath(),t.fill()}))},t.prototype.tearDown=function(){},t}(C);var L=n(281),W=n(391),D=n(93),F=n(278),j=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),z=function(){return(z=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},H=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.x=0,t.y=0,t.width=200,t.height=200,t.radius=40,t.knobActive=!1,t.knobCoord={x:0,y:0},t.knobCenter={x:0,y:0},t.knobRadius=30,t.maxOffset=30,t.touchId="",t.touchColor="rgba(255,0,0,.2)",t}return j(t,e),t.prototype.preload=function(){return e=this,t=void 0,i=function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(e){return[2]}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},t.prototype.initialize=function(){},t.prototype.update=function(){this.gameRef.touchMode?this.checkTouch():this.checkMouse()},t.prototype.checkMouse=function(){var e=this.x,t=this.y,n=this.x+this.width,i=this.y+this.height,o=this.gameRef.mouseInfo,r=o.x,a=o.y,u=r>e&&r<n&&a>t&&a<i;if(this.knobActive)if(this.gameRef.mouseInfo.mouseDown){var h=s(this.knobCenter,this.gameRef.mouseInfo),d=l(this.knobCenter,this.gameRef.mouseInfo);this.knobCoord=c(d,h<=this.maxOffset?h:this.maxOffset)}else this.knobActive=!1,this.touchId="";else this.gameRef.mouseInfo.mouseDown&&u&&(this.knobActive=!0,this.knobCoord={x:0,y:0},this.knobCenter={x:this.gameRef.mouseInfo.x,y:this.gameRef.mouseInfo.y})},t.prototype.checkTouch=function(){var e=this;if(this.knobActive){var t=this.gameRef.touchInfo.filter((function(t){return t.id===e.touchId}));if(t.length>0){var n=s(this.knobCenter,t[0]),i=l(this.knobCenter,t[0]);this.knobCoord=c(i,n<=this.maxOffset?n:this.maxOffset)}else this.knobActive=!1,this.touchId="",this.findTouch()}else this.gameRef.touchInfo.length>0&&this.findTouch()},t.prototype.findTouch=function(){var e=this,t={};this.gameRef.touchInfo.forEach((function(n){var i=e.x,o=e.y,r=e.x+e.width,a=e.y+e.height,s=n.x,l=n.y;s>i&&s<r&&l>o&&l<a&&(t=z({},n),e.knobActive=!0,e.touchId=n.id)})),this.knobActive&&t.x&&t.y&&(this.knobCoord={x:0,y:0},this.knobCenter=t)},t.prototype.centerCoordinates=function(){return{x:this.x+this.width/2,y:this.y+this.height/2}},t.prototype.draw=function(){this.knobActive?(f(z(z({c:this.gameRef.ctx},this.knobCenter),{radius:this.radius,fillColor:"rgba(255,255,255,.5)"})),f({c:this.gameRef.ctx,x:this.knobCoord.x+this.knobCenter.x,y:this.knobCoord.y+this.knobCenter.y,radius:this.knobRadius,fillColor:"rgba(0,0,0,.5)"})):(f({c:this.gameRef.ctx,x:this.x+this.width/2,y:this.y+this.height/2,radius:this.radius,fillColor:"rgba(255,255,255,.5)"}),f({c:this.gameRef.ctx,x:this.x+this.width/2,y:this.y+this.height/2,radius:this.knobRadius,fillColor:"rgba(0,0,0,.5)"}))},t}(C),V=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),q=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.x=0,t.y=0,t.active=!1,t.radius=8,t.color="red",t}return V(t,e),t.prototype.preload=function(){return e=this,t=void 0,i=function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(e){return[2]}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},t.prototype.initialize=function(){},t.prototype.update=function(){},t.prototype.setTarget=function(e){this.x=e.x,this.y=e.y,this.active=!0},t.prototype.getTarget=function(){return{x:this.x,y:this.y}},t.prototype.clearTarget=function(){this.active=!1},t.prototype.draw=function(){this.active&&f({c:this.gameRef.ctx,x:this.x+this.gameRef.cameraPos.x,y:this.y+this.gameRef.cameraPos.y,radius:this.radius,fillColor:this.color})},t.prototype.tearDown=function(){},t}(C),G=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),U=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.x=0,t.y=0,t.width=100,t.height=50,t.fillColor="#777",t.hoverColor="#333",t.focusColor="#000",t.strokeWidth=0,t.strokeColor="",t.hovered=!1,t.focused=!1,t.textColor="#fff",t.buttonText="Click Me",t.style="",t.weight="bold",t.fontSize=16,t.fontFamily="sans-serif",t.clickFunction=function(){return null},t.holdFunction=function(){return null},t.lastSwitch=0,t.switchDelay=300,t.touchId="",t}return G(t,e),t.prototype.initialize=function(){},t.prototype.update=function(){this.gameRef.touchMode?this.checkTouch():this.checkMouse()},t.prototype.checkMouse=function(){var e=this.x,t=this.y,n=this.x+this.width,i=this.y+this.height,o=this.gameRef.mouseInfo,r=o.x,a=o.y;this.hovered=r>e&&r<n&&a>t&&a<i,this.hovered&&this.gameRef.mouseInfo.mouseDown?(this.focused=!0,this.holdFunction()):this.hovered&&this.focused&&!this.gameRef.mouseInfo.mouseDown?(this.clickFunction(),this.focused=!1):this.focused=!1},t.prototype.checkTouch=function(){var e=this;this.gameRef.touchInfo.length>0&&this.gameRef.touchInfo.forEach((function(t){var n=e.x,i=e.y,o=e.x+e.width,r=e.y+e.height,a=t.x,s=t.y;a>n&&a<o&&s>i&&s<r&&e.lastSwitch+e.switchDelay<e.gameRef.lastUpdate&&(e.clickFunction(),e.lastSwitch=e.gameRef.lastUpdate)}))},t.prototype.draw=function(){p({c:this.gameRef.ctx,x:this.x,y:this.y,width:this.width,height:this.height,fillColor:this.hovered&&this.focused?this.focusColor:this.hovered?this.hoverColor:this.fillColor}),y({c:this.gameRef.ctx,x:(this.x+this.x+this.width)/2,y:(this.y+this.y+this.height)/2+this.fontSize/3,align:"center",fillColor:this.textColor,style:this.style,weight:this.weight,fontFamily:this.fontFamily,fontSize:this.fontSize,text:this.buttonText})},t}(C),K=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),N=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.width=150,t.height=20,t.yOffset=0,t.xOffset=0,t.x=0,t.y=0,t.current=0,t.max=100,t.lastTick=0,t.tickSize=20,t}return K(t,e),t.prototype.tick=function(e,t){return void 0===t&&(t=!1),!!(t||this.gameRef.lastUpdate>this.lastTick+this.tickSize)&&(this.current+=e,this.current<0&&(this.current=0),this.current>this.max&&(this.current=this.max),this.lastTick=this.gameRef.lastUpdate,!0)},t.prototype.draw=function(){if(p({c:this.gameRef.ctx,x:this.x-this.width/2+this.xOffset,y:this.y-this.height+this.yOffset,width:this.width,height:this.height,fillColor:"white"}),this.current>0){var e=this.current/this.max;p({c:this.gameRef.ctx,x:this.x-this.width/2+this.xOffset,y:this.y-this.height+this.yOffset,width:this.width*this.current/this.max,height:this.height,fillColor:e<.5?"red":e<.8?"orange":"green"})}},t}(C),X=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Y=function(e,t,n){return void 0===e&&(e=520),void 0===t&&(t=50),void 0===n&&(n=30),[{x:0,y:0},{x:e,y:0},{x:e,y:t/2},{x:e-n,y:t},{x:n,y:t},{x:0,y:t/2}]},Q=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.level=[],t.levelColor="#222",t.levelDecor=[{x:80,y:80,w:640,h:25,c:t.levelColor},{x:80,y:80,w:25,h:840,c:t.levelColor},{x:695,y:80,w:25,h:840,c:t.levelColor},{x:80,y:895,w:640,h:25,c:t.levelColor}],t.lastPhysicsUpdate=0,t.physicsRate=1e3/60,t.lastShot=0,t.itemRef={},t.balls=[],t.ballSize=15,t.activeBalls=0,t.pockets=[],t.pocketSize=30,t.bouncePads=[],t.levelWidth=800,t.levelHeight=1e3,t.levelBounds={x:0,y:0,w:800,h:1e3},t.freeCam={x:0,y:0},t.lastCamMove=0,t.cameraFocus="cue",t.powerGain=1,t.phase="aim",t}return X(t,e),t.prototype.preload=function(){return e=this,t=void 0,i=function(){var e,t,n,i;return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(o){switch(o.label){case 0:return e=this,[4,this.gameRef.soundPlayer.loadSound(L)];case 1:return e.ballHit=o.sent(),t=this,[4,this.gameRef.soundPlayer.loadSound(W)];case 2:return t.ballsHiting=o.sent(),n=this,[4,this.gameRef.soundPlayer.loadSound(D)];case 3:return n.ballInPocket=o.sent(),i=this,[4,this.gameRef.soundPlayer.loadSound(F)];case 4:return i.ballRailBounce=o.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},t.prototype.initialize=function(){var e=this;this.physics=A().Engine.create(),this.physics.world.gravity.y=0,this.bouncePads=[{x:140,y:80,a:0,v:Y(520,50,30)},{x:660,y:920,a:180,v:Y(520,50,30)},{x:720,y:140,a:90,v:Y(330,50,20)},{x:720,y:530,a:90,v:Y(330,50,20)},{x:80,y:470,a:270,v:Y(330,50,20)},{x:80,y:860,a:270,v:Y(330,50,20)}].map((function(t,n){var i=new O({key:"bouncePad-"+n,gameRef:e.gameRef});return i.x=t.x,i.y=t.y,i.color="#333",i.angle=t.a,i.vertices=t.v,i.bodyOptions={label:"bouncePadA",isStatic:!0},i.onCollisionStart=function(t){"ball"!==t.label&&"cue"!==t.label||e.gameRef.soundPlayer.playSound(e.ballRailBounce)},i.initialize(),A().Body.setPosition(i.body,{x:i.x,y:i.y}),A().Body.setAngle(i.body,h(i.angle)),e.addToWorld(i.body),i})),this.ballA=new M({key:"ballA",gameRef:this.gameRef}),this.ballA.x=400,this.ballA.y=700,this.ballA.radius=this.ballSize,this.ballA.bodyOptions.label="cue",this.ballA.color="white",this.ballA.onCollisionStart=function(t){"ball"===t.label&&Math.abs(t.force.x)+Math.abs(t.force.y)>.5&&e.gameRef.soundPlayer.playSound(e.ballsHiting)},this.ballA.initialize(),this.addToWorld(this.ballA.body),this.pockets=[{x:110,y:110},{x:690,y:110},{x:100,y:500},{x:700,y:500},{x:110,y:890},{x:690,y:890}].map((function(t,n){var i=new M({key:"pocket"+n,gameRef:e.gameRef});return i.x=t.x,i.y=t.y,i.radius=e.pocketSize,i.color="black",i.onCollisionStart=function(t){console.log(t),"ball"===t.label&&(e.gameRef.soundPlayer.playSound(e.ballInPocket),e.removeFromWorld(t),e.balls.forEach((function(e){e.body.id===t.id&&(e.active=!1)}))),"cue"===t.label&&(e.gameRef.soundPlayer.playSound(e.ballInPocket),A().Body.setPosition(t,{x:400,y:700}),A().Body.setVelocity(t,{x:0,y:0}),e.cameraFocus="cue")},i.bodyOptions={label:"hole",isStatic:!0,isSensor:!0},i.initialize(),e.addToWorld(i.body),i})),this.level=[{x:440,y:0,w:880,h:160,c:this.levelColor,o:{label:"wallTop",isStatic:!0}},{x:0,y:500,w:160,h:1e3,c:this.levelColor,o:{label:"wallLeft",isStatic:!0}},{x:800,y:500,w:160,h:1e3,c:this.levelColor,o:{label:"wallRight",isStatic:!0}},{x:440,y:1e3,w:880,h:160,c:this.levelColor,o:{label:"wallBottom",isStatic:!0}}].map((function(t,n){var i=new P({key:"box"+n,gameRef:e.gameRef});return i.x=t.x,i.y=t.y,i.width=t.w,i.height=t.h,i.bodyOptions=t.o,i.color=t.c,i.initialize(),e.addToWorld(i.body),i}));var t=[{x:5,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0},{x:4,y:1},{x:4,y:1},{x:4,y:1},{x:4,y:1},{x:3,y:2},{x:3,y:2},{x:3,y:2},{x:2,y:3},{x:2,y:3},{x:1,y:4}];this.balls=new Array(15).fill(0).map((function(n,i){var o=new M({key:"ball-"+i,gameRef:e.gameRef});return o.radius=e.ballSize,o.x=325+2*e.ballSize*(i%t[i].x)+e.ballSize*t[i].y,console.log(o.x),o.y=200+2*e.ballSize*t[i].y,o.color="rgba("+(i/15*100+100)+","+(200-i/15*100)+","+(i/15*100+100)+",1)",o.onCollisionStart=function(t){"ball"!==t.label&&"cue"!==t.label||Math.abs(t.force.x)+Math.abs(t.force.y)>.5&&e.gameRef.soundPlayer.playSound(e.ballsHiting)},o.initialize(),e.addToWorld(o.body),o.active=!0,o})),A().Events.on(this.physics,"collisionStart",(function(e){e.pairs.map((function(e){var t=e.bodyA,n=e.bodyB;t.plugin.collisionStart(n),n.plugin.collisionStart(t)}))})),A().Events.on(this.physics,"collisionEnd",(function(e){e.pairs.map((function(e){var t=e.bodyA,n=e.bodyB;t.plugin.collisionEnd(n),n.plugin.collisionEnd(t)}))})),this.shootButton=new U({key:"shoot-button",gameRef:this.gameRef}),this.shootButton.fillColor="red",this.shootButton.hoverColor="black",this.shootButton.textColor="white",this.shootButton.x=30,this.shootButton.y=this.gameRef.gameHeight-120,this.shootButton.height=90,this.shootButton.buttonText="SHOOT",this.shootButton.width=100,this.shootButton.clickFunction=function(){e.shootBall()},this.moveKnob=new H({key:"move-knob",gameRef:this.gameRef}),this.moveKnob.height=160,this.moveKnob.width=160,this.positionKnobs(),this.aimTarget=new q({key:"aim-target",gameRef:this.gameRef}),this.powerMeter=new N({key:"power-meter",gameRef:this.gameRef}),this.powerMeter.x=this.gameRef.gameWidth/2,this.powerMeter.y=50,this.lastShot=this.gameRef.lastUpdate,this.phase="aim"},t.prototype.checkGame=function(){var e,t,n=this;e={x:this.ballA.body.position.x-this.ballSize,y:this.ballA.body.position.y-this.ballSize,w:2*this.ballSize,h:2*this.ballSize},t=this.levelBounds,(e.y+e.h<t.y||e.y>t.y+t.h||e.x+e.w<t.x||e.x>t.x+t.w)&&(A().Body.setPosition(this.ballA.body,{x:400,y:700}),A().Body.setVelocity(this.ballA.body,{x:0,y:0})),this.activeBalls=0,this.balls.map((function(e){e.active&&n.activeBalls++})),0===this.activeBalls&&(alert("you win"),this.initialize())},t.prototype.handleKeys=function(){var e=this.gameRef.pressedKeys,t=10,n=0,i=0;(e.KeyA||e.ArrowLeft)&&(n-=t),(e.KeyD||e.ArrowRight)&&(n+=t),(e.KeyW||e.ArrowUp)&&(i-=t),(e.KeyS||e.ArrowDown)&&(i+=t),e.KeyX&&this.shootBall(),this.shootButton.update(),this.moveKnob.update(),"power"===this.phase&&this.powerMeter.tick(this.powerGain)&&(this.powerGain=this.powerMeter.current===this.powerMeter.max?-Math.abs(this.powerGain):0===this.powerMeter.current?Math.abs(this.powerGain):this.powerGain),this.moveKnob.knobActive&&(n+=this.moveKnob.knobCoord.x/this.moveKnob.maxOffset*t,i+=this.moveKnob.knobCoord.y/this.moveKnob.maxOffset*t),!this.moveKnob.knobActive&&!this.shootButton.hovered&&this.gameRef.mouseInfo.mouseDown&&this.lastShot+300<this.gameRef.lastUpdate&&this.aimTarget.setTarget({x:this.gameRef.mouseInfo.x-this.gameRef.cameraPos.x,y:this.gameRef.mouseInfo.y-this.gameRef.cameraPos.y}),Math.abs(n)||Math.abs(i)?("free"!==this.cameraFocus&&(this.freeCam={x:this.ballA.body.position.x,y:this.ballA.body.position.y},this.cameraFocus="free"),this.freeCam.x+=n*this.gameRef.diffMulti,this.freeCam.x<0&&(this.freeCam.x=0),this.freeCam.x>this.levelWidth&&(this.freeCam.x=this.levelWidth),this.freeCam.y+=i*this.gameRef.diffMulti,this.freeCam.y<0&&(this.freeCam.y=0),this.freeCam.y>this.levelHeight&&(this.freeCam.y=this.levelHeight),this.lastCamMove=this.gameRef.lastUpdate):"free"===this.cameraFocus&&this.lastCamMove+1e4<this.gameRef.lastUpdate&&(this.freeCam.x<this.ballA.body.position.x-1&&(this.freeCam.x+=1*this.gameRef.diffMulti),this.freeCam.x>this.ballA.body.position.x+1&&(this.freeCam.x-=1*this.gameRef.diffMulti),this.freeCam.y<this.ballA.body.position.y-1&&(this.freeCam.y+=1*this.gameRef.diffMulti),this.freeCam.y>this.ballA.body.position.y+1&&(this.freeCam.y-=1*this.gameRef.diffMulti))},t.prototype.shootBall=function(){if(!this.moveKnob.knobActive&&this.aimTarget.active&&this.lastShot+300<this.gameRef.lastUpdate)if("aim"===this.phase)this.powerMeter.current=1,this.powerMeter.powerGain=Math.abs(this.powerGain),this.lastShot=this.gameRef.lastUpdate,this.phase="power";else{var e=function(e,t){void 0===t&&(t=1);var n=e.x&&e.y?Math.sqrt(e.x*e.x+e.y*e.y):1;return{x:e.x/n*t,y:e.y/n*t}}({x:this.aimTarget.x-this.ballA.body.position.x,y:this.aimTarget.y-this.ballA.body.position.y},60*this.powerMeter.current/this.powerMeter.max);A().Body.setVelocity(this.ballA.body,e),this.gameRef.soundPlayer.playSound(this.ballHit),this.lastShot=this.gameRef.lastUpdate,this.cameraFocus="cue",this.aimTarget.clearTarget(),this.phase="aim"}},t.prototype.addToWorld=function(e){A().Composite.add(this.physics.world,e)},t.prototype.removeFromWorld=function(e){A().Composite.remove(this.physics.world,e)},t.prototype.update=function(){this.handleKeys(),this.handlePhysics(),this.updateCamera(),this.checkGame()},t.prototype.handlePhysics=function(){this.gameRef.fps<61?A().Engine.update(this.physics,this.gameRef.updateDiff):this.gameRef.lastUpdate-this.lastPhysicsUpdate>=this.physicsRate&&(A().Engine.update(this.physics,this.gameRef.lastUpdate-this.lastPhysicsUpdate),this.lastPhysicsUpdate=this.gameRef.lastUpdate)},t.prototype.updateCamera=function(){var e="cue"===this.cameraFocus?this.ballA.body.position:this.freeCam;this.gameRef.cameraPos={x:-(e.x-this.gameRef.gameWidth/2),y:-(e.y-this.gameRef.gameHeight/2)},this.gameRef.gameWidth<this.levelWidth?(this.gameRef.cameraPos.x>0&&(this.gameRef.cameraPos.x=0),this.gameRef.cameraPos.x-this.gameRef.gameWidth<-1*this.levelWidth&&(this.gameRef.cameraPos.x=-(this.levelWidth-this.gameRef.gameWidth))):this.gameRef.cameraPos.x=(this.gameRef.gameWidth-this.levelWidth)/2,this.gameRef.gameHeight<this.levelHeight?(this.gameRef.cameraPos.y>0&&(this.gameRef.cameraPos.y=0),this.gameRef.cameraPos.y-this.gameRef.gameHeight<-1*this.levelHeight&&(this.gameRef.cameraPos.y=-(this.levelHeight-this.gameRef.gameHeight))):this.gameRef.cameraPos.y=(this.gameRef.gameHeight-this.levelHeight)/2},t.prototype.positionKnobs=function(){this.shootButton.y=this.gameRef.gameHeight-120,this.moveKnob.width=this.moveKnob.width>this.gameRef.gameWidth/2?this.gameRef.gameWidth/2-5:this.moveKnob.width,this.moveKnob.x=this.gameRef.gameWidth-this.moveKnob.width,this.moveKnob.y=this.gameRef.gameHeight-this.moveKnob.height},t.prototype.onResize=function(){this.positionKnobs()},t.prototype.drawBg=function(){this.gameRef.ctx.beginPath(),this.gameRef.ctx.rect(0,0,this.gameRef.gameWidth,this.gameRef.gameHeight),this.gameRef.ctx.fillStyle="#777",this.gameRef.ctx.fill()},t.prototype.draw=function(){var e,t,n,i,o,r,a,s,l=this;this.drawBg(),this.level.forEach((function(e){e.draw()})),this.levelDecor.forEach((function(e){p({c:l.gameRef.ctx,x:e.x+l.gameRef.cameraPos.x,y:e.y+l.gameRef.cameraPos.y,width:e.w,height:e.h,fillColor:e.c})})),this.pockets.forEach((function(e){e.draw()})),this.bouncePads.forEach((function(e){e.draw()})),this.balls.forEach((function(e){e.active&&e.draw()})),this.aimTarget.active&&(n=(e={c:this.gameRef.ctx,x:this.ballA.body.position.x+this.gameRef.cameraPos.x,y:this.ballA.body.position.y+this.gameRef.cameraPos.y,toX:this.aimTarget.x+this.gameRef.cameraPos.x,toY:this.aimTarget.y+this.gameRef.cameraPos.y,strokeColor:"red",strokeWidth:3}).x,i=e.y,o=e.toX,r=e.toY,a=e.strokeWidth,s=e.strokeColor,(t=e.c).beginPath(),t.moveTo(n,i),t.lineTo(o,r),t.strokeStyle=s,t.lineWidth=a,t.stroke(),this.aimTarget.draw()),this.ballA.draw(),this.moveKnob.draw(),this.aimTarget.active&&this.shootButton.draw(),"power"===this.phase?this.powerMeter.draw():(y({c:this.gameRef.ctx,x:30,y:60,align:"left",fontSize:16,fontFamily:"sans-serif",fillColor:"#fff",text:"FPS: "+Math.round(this.gameRef.fps)}),y({c:this.gameRef.ctx,x:30,y:40,align:"left",fontSize:16,fontFamily:"sans-serif",fillColor:"#fff",text:"BALLS LEFT: "+this.activeBalls}))},t.prototype.tearDown=function(){},t}(b),Z=n(530),$=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),J=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.activeSound={playing:!1,soundRef:null},t.levelLoadedTime=0,t.levelLoadedDelay=1e3,t}return $(t,e),t.prototype.preload=function(){return e=this,t=void 0,i=function(){var e;return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(t){switch(t.label){case 0:return this.gameRef.drawLoading("Music"),e=this,[4,this.gameRef.soundPlayer.loadSound(Z)];case 1:return e.bgSong=t.sent(),this.activeSound.playing=!1,[2]}}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}));var e,t,n,i},t.prototype.initialize=function(){var e=this;this.startButton=new U({key:"start-button",gameRef:this.gameRef}),this.startButton.fillColor="red",this.startButton.hoverColor="black",this.startButton.textColor="white",this.startButton.x=100,this.startButton.y=this.gameRef.gameHeight-200,this.startButton.buttonText="Play",this.startButton.width=this.gameRef.gameWidth-200,this.startButton.clickFunction=function(){e.gameRef.loadLevel("standard-level")},this.creditsButton=new U({key:"credits-button",gameRef:this.gameRef}),this.creditsButton.fillColor="red",this.creditsButton.hoverColor="black",this.creditsButton.textColor="white",this.creditsButton.x=100,this.creditsButton.y=this.gameRef.gameHeight-135,this.creditsButton.buttonText="Credits",this.creditsButton.width=this.gameRef.gameWidth-200,this.creditsButton.clickFunction=function(){},this.soundButton=new U({key:"sound-button",gameRef:this.gameRef}),this.soundButton.fillColor="red",this.soundButton.hoverColor="black",this.soundButton.textColor="white",this.soundButton.x=100,this.soundButton.y=this.gameRef.gameHeight-70,this.soundButton.buttonText=(this.gameRef.soundPlayer.enabled?"Disable":"Enable")+" Sound",this.soundButton.width=this.gameRef.gameWidth-200,this.soundButton.clickFunction=function(){e.activeSound.playing&&e.activeSound.soundRef&&e.activeSound.soundRef.stop&&e.activeSound.soundRef.stop(),e.gameRef.soundPlayer.enabled=!e.gameRef.soundPlayer.enabled,e.soundButton.buttonText=(e.gameRef.soundPlayer.enabled?"Disable":"Enable")+" Sound",e.activeSound.playing=!1},this.levelLoadedTime=this.gameRef.lastUpdate},t.prototype.handleSounds=function(){var e=this;this.gameRef.soundPlayer.enabled&&0==this.activeSound.playing&&(this.activeSound.soundRef=this.gameRef.soundPlayer.playSound(this.bgSong,(function(){e.activeSound.playing=!1})),this.activeSound.playing=!0)},t.prototype.update=function(){this.updateBg(),this.handleSounds(),this.gameRef.lastUpdate>this.levelLoadedTime+this.levelLoadedDelay&&(this.startButton.update(),this.soundButton.update(),this.creditsButton.update())},t.prototype.updateBg=function(){},t.prototype.onResize=function(){this.startButton.y=this.gameRef.gameHeight-200,this.startButton.width=this.gameRef.gameWidth-200,this.creditsButton.y=this.gameRef.gameHeight-135,this.creditsButton.width=this.gameRef.gameWidth-200,this.soundButton.y=this.gameRef.gameHeight-70,this.soundButton.width=this.gameRef.gameWidth-200},t.prototype.drawBg=function(){},t.prototype.draw=function(){this.gameRef.ctx.beginPath(),this.gameRef.ctx.rect(0,0,this.gameRef.gameWidth,this.gameRef.gameHeight),this.gameRef.ctx.fillStyle="#333",this.gameRef.ctx.fill(),this.drawBg(),this.startButton.draw(),this.soundButton.draw(),this.creditsButton.draw(),y({c:this.gameRef.ctx,x:this.gameRef.gameWidth/2,y:this.gameRef.gameHeight/4,align:"center",fillColor:"#000",strokeColor:"#fff",strokeWidth:3,style:"",weight:"700",fontFamily:"sans-serif",fontSize:40,text:"POOL"})},t.prototype.tearDown=function(){this.startButton.tearDown(),this.soundButton.tearDown(),this.creditsButton.tearDown(),this.activeSound.playing&&this.activeSound.soundRef&&this.activeSound.soundRef.stop()},t}(b),ee=document.getElementById("start-game"),te=document.getElementById("game-description"),ne=document.getElementById("audio-b");ee&&ne&&ne&&ee.addEventListener("click",(function(){var e;te.remove(),ne.play(),(e=new x({canvasElementId:"game-container",width:window.innerWidth,height:window.innerHeight,levels:[{key:"start-screen",level:J},{key:"standard-level",level:Q},{key:"level-1",level:T}]})).enableMouse(),e.enableKeyboard(),e.start(),ee.remove(),setTimeout((function(){ne.remove()}),500)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,